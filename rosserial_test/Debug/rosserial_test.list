
rosserial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d94  08005d94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d94  08005d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d9c  08005d9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005d9c  08005d9c  00015d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000adc  20000074  08005e1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b50  08005e1c  00020b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014984  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c4  00000000  00000000  00034a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000381f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001821b  00000000  00000000  00039030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a49  00000000  00000000  0005124b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094352  00000000  00000000  00061c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  000f6038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005b3c 	.word	0x08005b3c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08005b3c 	.word	0x08005b3c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 f8e6 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80a 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f912 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f8e8 	bl	8000724 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8bc 	bl	80006d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000558:	f000 f86e 	bl	8000638 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x1c>
	...

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 f95a 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd4>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005d4:	2310      	movs	r3, #16
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005de:	2304      	movs	r3, #4
 80005e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ffb6 	bl	800355c <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f6:	f000 f92b 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2102      	movs	r1, #2
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fa18 	bl	8003a4c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f915 	bl	8000850 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064c:	463b      	mov	r3, r7
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_TIM2_Init+0x94>)
 8000656:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800065a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_TIM2_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_TIM2_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_TIM2_Init+0x94>)
 800066a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800066e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_TIM2_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_TIM2_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800067c:	4813      	ldr	r0, [pc, #76]	; (80006cc <MX_TIM2_Init+0x94>)
 800067e:	f003 fc05 	bl	8003e8c <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000688:	f000 f8e2 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	4619      	mov	r1, r3
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <MX_TIM2_Init+0x94>)
 800069a:	f003 fc46 	bl	8003f2a <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 f8d4 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_TIM2_Init+0x94>)
 80006b6:	f003 fe19 	bl	80042ec <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006c0:	f000 f8c6 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000090 	.word	0x20000090

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f003 fe5e 	bl	80043c8 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f89d 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000d8 	.word	0x200000d8
 8000720:	40004400 	.word	0x40004400

08000724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_DMA_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_DMA_Init+0x4c>)
 8000734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2010      	movs	r0, #16
 800074c:	f002 f92f 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000750:	2010      	movs	r0, #16
 8000752:	f002 f948 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f002 f927 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000760:	2011      	movs	r0, #17
 8000762:	f002 f940 	bl	80029e6 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f002 fe92 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f002 fd00 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f002 fcf2 	bl	8003220 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>

0800085a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <_ZN3ros3MsgC1Ev+0x1c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	08005d64 	.word	0x08005d64

0800089c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
      data()
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ffe8 	bl	800087c <_ZN3ros3MsgC1Ev>
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3304      	adds	r3, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffcf 	bl	800085a <_ZN3ros4TimeC1Ev>
    {
    }
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	08005d4c 	.word	0x08005d4c

080008cc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6859      	ldr	r1, [r3, #4]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2ca      	uxtb	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	0a19      	lsrs	r1, r3, #8
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	0c19      	lsrs	r1, r3, #16
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3302      	adds	r3, #2
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	b2ca      	uxtb	r2, r1
 800090a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	0e19      	lsrs	r1, r3, #24
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3303      	adds	r3, #3
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	4413      	add	r3, r2
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3304      	adds	r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6899      	ldr	r1, [r3, #8]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	4413      	add	r3, r2
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	0a19      	lsrs	r1, r3, #8
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	4413      	add	r3, r2
 8000940:	b2ca      	uxtb	r2, r1
 8000942:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	0c19      	lsrs	r1, r3, #16
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3302      	adds	r3, #2
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	4413      	add	r3, r2
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	0e19      	lsrs	r1, r3, #24
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3303      	adds	r3, #3
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	b2ca      	uxtb	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3304      	adds	r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
      return offset;
 800096e:	68fb      	ldr	r3, [r7, #12]
    }
 8000970:	4618      	mov	r0, r3
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	3301      	adds	r3, #1
 80009a0:	6839      	ldr	r1, [r7, #0]
 80009a2:	440b      	add	r3, r1
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3302      	adds	r3, #2
 80009b6:	6839      	ldr	r1, [r7, #0]
 80009b8:	440b      	add	r3, r1
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	041b      	lsls	r3, r3, #16
 80009be:	431a      	orrs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3303      	adds	r3, #3
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	440b      	add	r3, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	061b      	lsls	r3, r3, #24
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	683a      	ldr	r2, [r7, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	6839      	ldr	r1, [r7, #0]
 80009f8:	440b      	add	r3, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	6839      	ldr	r1, [r7, #0]
 8000a0e:	440b      	add	r3, r1
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	041b      	lsls	r3, r3, #16
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3303      	adds	r3, #3
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	061b      	lsls	r3, r3, #24
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3304      	adds	r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a36:	68fb      	ldr	r3, [r7, #12]
    }
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	08005b54 	.word	0x08005b54

08000a60 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	08005b64 	.word	0x08005b64

08000a7c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fef8 	bl	800087c <_ZN3ros3MsgC1Ev>
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	809a      	strh	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
    {
    }
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08005d34 	.word	0x08005d34
 8000ac0:	08005b88 	.word	0x08005b88

08000ac4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	8899      	ldrh	r1, [r3, #4]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b2ca      	uxtb	r2, r1
 8000ade:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	889b      	ldrh	r3, [r3, #4]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	b299      	uxth	r1, r3
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	3301      	adds	r3, #1
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	b2ca      	uxtb	r2, r1
 8000af2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3302      	adds	r3, #2
 8000af8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb68 	bl	80001d4 <strlen>
 8000b04:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	69b9      	ldr	r1, [r7, #24]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 feea 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	3304      	adds	r3, #4
 8000b18:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f004 fe70 	bl	800580c <memcpy>
      offset += length_topic_name;
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fb4b 	bl	80001d4 <strlen>
 8000b3e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	683a      	ldr	r2, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	6979      	ldr	r1, [r7, #20]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fecd 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	18d0      	adds	r0, r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f004 fe53 	bl	800580c <memcpy>
      offset += length_message_type;
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fb2e 	bl	80001d4 <strlen>
 8000b78:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 feb0 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	18d0      	adds	r0, r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f004 fe36 	bl	800580c <memcpy>
      offset += length_md5sum;
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000bae:	68f9      	ldr	r1, [r7, #12]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0a19      	lsrs	r1, r3, #8
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b2ca      	uxtb	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	0c19      	lsrs	r1, r3, #16
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	0e19      	lsrs	r1, r3, #24
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3303      	adds	r3, #3
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	61fb      	str	r3, [r7, #28]
      return offset;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
    }
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b08a      	sub	sp, #40	; 0x28
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	889b      	ldrh	r3, [r3, #4]
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	440b      	add	r3, r1
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3302      	adds	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	441a      	add	r2, r3
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fe6c 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d20c      	bcs.n	8000c7c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	441a      	add	r2, r3
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6839      	ldr	r1, [r7, #0]
 8000c6e:	440b      	add	r3, r1
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	3301      	adds	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7a:	e7ec      	b.n	8000c56 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	4413      	add	r3, r2
 8000c82:	3b01      	subs	r3, #1
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	441a      	add	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fe39 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	6a3a      	ldr	r2, [r7, #32]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d20c      	bcs.n	8000ce2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	441a      	add	r2, r3
 8000cce:	6a3b      	ldr	r3, [r7, #32]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
 8000ce0:	e7ec      	b.n	8000cbc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4413      	add	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	441a      	add	r2, r3
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fe06 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d20c      	bcs.n	8000d48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	441a      	add	r2, r3
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	440b      	add	r3, r1
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	3301      	adds	r3, #1
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e7ec      	b.n	8000d22 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	441a      	add	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	6839      	ldr	r1, [r7, #0]
 8000d76:	440a      	add	r2, r1
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3301      	adds	r3, #1
 8000d84:	6839      	ldr	r1, [r7, #0]
 8000d86:	440b      	add	r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	021b      	lsls	r3, r3, #8
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3302      	adds	r3, #2
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	440b      	add	r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	041b      	lsls	r3, r3, #16
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3303      	adds	r3, #3
 8000da8:	6839      	ldr	r1, [r7, #0]
 8000daa:	440b      	add	r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	061b      	lsls	r3, r3, #24
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	61bb      	str	r3, [r7, #24]
     return offset;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
    }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	08005b8c 	.word	0x08005b8c

08000de8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	08005ba8 	.word	0x08005ba8

08000e04 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd34 	bl	800087c <_ZN3ros3MsgC1Ev>
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	711a      	strb	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000e24:	609a      	str	r2, [r3, #8]
    {
    }
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08005d1c 	.word	0x08005d1c
 8000e34:	08005b88 	.word	0x08005b88

08000e38 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	7912      	ldrb	r2, [r2, #4]
 8000e50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9b9 	bl	80001d4 <strlen>
 8000e62:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	683a      	ldr	r2, [r7, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fd3b 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3304      	adds	r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	18d0      	adds	r0, r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f004 fcc1 	bl	800580c <memcpy>
      offset += length_msg;
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e92:	68fb      	ldr	r3, [r7, #12]
    }
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	441a      	add	r2, r3
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fd2b 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d20c      	bcs.n	8000efe <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	441a      	add	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e7ec      	b.n	8000ed8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	3b01      	subs	r3, #1
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	4413      	add	r3, r2
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	441a      	add	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
     return offset;
 8000f22:	693b      	ldr	r3, [r7, #16]
    }
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	08005bcc 	.word	0x08005bcc

08000f48 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	08005be0 	.word	0x08005be0

08000f64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fc84 	bl	800087c <_ZN3ros3MsgC1Ev>
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08005d04 	.word	0x08005d04

08000fac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6859      	ldr	r1, [r3, #4]
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	0a19      	lsrs	r1, r3, #8
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	0c19      	lsrs	r1, r3, #16
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2ca      	uxtb	r2, r1
 8000fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	0e19      	lsrs	r1, r3, #24
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	3303      	adds	r3, #3
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	3304      	adds	r3, #4
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	6a3a      	ldr	r2, [r7, #32]
 800100e:	429a      	cmp	r2, r3
 8001010:	d22b      	bcs.n	800106a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001020:	6939      	ldr	r1, [r7, #16]
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	0a19      	lsrs	r1, r3, #8
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	3301      	adds	r3, #1
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	4413      	add	r3, r2
 8001038:	b2ca      	uxtb	r2, r1
 800103a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	0c19      	lsrs	r1, r3, #16
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	3302      	adds	r3, #2
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	b2ca      	uxtb	r2, r1
 800104a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	0e19      	lsrs	r1, r3, #24
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	3303      	adds	r3, #3
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	b2ca      	uxtb	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	3304      	adds	r3, #4
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	3301      	adds	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	e7ce      	b.n	8001008 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6919      	ldr	r1, [r3, #16]
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	4413      	add	r3, r2
 8001074:	b2ca      	uxtb	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	0a19      	lsrs	r1, r3, #8
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	3301      	adds	r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	0c19      	lsrs	r1, r3, #16
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	3302      	adds	r3, #2
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	0e19      	lsrs	r1, r3, #24
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	3303      	adds	r3, #3
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	b2ca      	uxtb	r2, r1
 80010ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	3304      	adds	r3, #4
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d22b      	bcs.n	800111a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699a      	ldr	r2, [r3, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80010d0:	68f9      	ldr	r1, [r7, #12]
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0a19      	lsrs	r1, r3, #8
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	3301      	adds	r3, #1
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	b2ca      	uxtb	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	0c19      	lsrs	r1, r3, #16
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	3302      	adds	r3, #2
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	b2ca      	uxtb	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	0e19      	lsrs	r1, r3, #24
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	3303      	adds	r3, #3
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	b2ca      	uxtb	r2, r1
 800110a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3304      	adds	r3, #4
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	e7ce      	b.n	80010b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69d9      	ldr	r1, [r3, #28]
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	4413      	add	r3, r2
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	0a19      	lsrs	r1, r3, #8
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3301      	adds	r3, #1
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	0c19      	lsrs	r1, r3, #16
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3302      	adds	r3, #2
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	0e19      	lsrs	r1, r3, #24
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3303      	adds	r3, #3
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4413      	add	r3, r2
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3304      	adds	r3, #4
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	429a      	cmp	r2, r3
 8001170:	d228      	bcs.n	80011c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f828 	bl	80001d4 <strlen>
 8001184:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	6979      	ldr	r1, [r7, #20]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fbaa 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3304      	adds	r3, #4
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	18d0      	adds	r0, r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4619      	mov	r1, r3
 80011b0:	f004 fb2c 	bl	800580c <memcpy>
      offset += length_stringsi;
 80011b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4413      	add	r3, r2
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	3301      	adds	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
 80011c2:	e7d1      	b.n	8001168 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80011c6:	4618      	mov	r0, r3
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b08e      	sub	sp, #56	; 0x38
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	6a3a      	ldr	r2, [r7, #32]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80011f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011fa:	3302      	adds	r3, #2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	6a3a      	ldr	r2, [r7, #32]
 8001206:	4313      	orrs	r3, r2
 8001208:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800120a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120c:	3303      	adds	r3, #3
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	6a3a      	ldr	r2, [r7, #32]
 8001218:	4313      	orrs	r3, r2
 800121a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	3304      	adds	r3, #4
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	6a3a      	ldr	r2, [r7, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d90a      	bls.n	8001242 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4619      	mov	r1, r3
 8001236:	4610      	mov	r0, r2
 8001238:	f004 fafe 	bl	8005838 <realloc>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001252:	429a      	cmp	r2, r3
 8001254:	d236      	bcs.n	80012c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	440a      	add	r2, r1
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	4313      	orrs	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126c:	3301      	adds	r3, #1
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	440b      	add	r3, r1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127e:	3302      	adds	r3, #2
 8001280:	6839      	ldr	r1, [r7, #0]
 8001282:	440b      	add	r3, r1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	041b      	lsls	r3, r3, #16
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001290:	3303      	adds	r3, #3
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	440b      	add	r3, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	4313      	orrs	r3, r2
 800129c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	3304      	adds	r3, #4
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012be:	3301      	adds	r3, #1
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
 80012c2:	e7c3      	b.n	800124c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80012c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	3301      	adds	r3, #1
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80012e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e2:	3302      	adds	r3, #2
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	041b      	lsls	r3, r3, #16
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f4:	3303      	adds	r3, #3
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	061b      	lsls	r3, r3, #24
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4313      	orrs	r3, r2
 8001302:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	3304      	adds	r3, #4
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	429a      	cmp	r2, r3
 8001312:	d90a      	bls.n	800132a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f004 fa8a 	bl	8005838 <realloc>
 8001324:	4602      	mov	r2, r0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133a:	429a      	cmp	r2, r3
 800133c:	d236      	bcs.n	80013ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	440a      	add	r2, r1
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001354:	3301      	adds	r3, #1
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	440b      	add	r3, r1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001366:	3302      	adds	r3, #2
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	440b      	add	r3, r1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	041b      	lsls	r3, r3, #16
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001378:	3303      	adds	r3, #3
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	440b      	add	r3, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	3304      	adds	r3, #4
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	3214      	adds	r2, #20
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80013a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a6:	3301      	adds	r3, #1
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013aa:	e7c3      	b.n	8001334 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	3301      	adds	r3, #1
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80013c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ca:	3302      	adds	r3, #2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	041b      	lsls	r3, r3, #16
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	3303      	adds	r3, #3
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	3304      	adds	r3, #4
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d90a      	bls.n	8001412 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f004 fa16 	bl	8005838 <realloc>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001422:	429a      	cmp	r2, r3
 8001424:	d23f      	bcs.n	80014a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	441a      	add	r2, r3
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fa76 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143a:	3304      	adds	r3, #4
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4413      	add	r3, r2
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	441a      	add	r2, r3
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3b01      	subs	r3, #1
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	440b      	add	r3, r1
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	3301      	adds	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e7ec      	b.n	8001442 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	3b01      	subs	r3, #1
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	4413      	add	r3, r2
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	3b01      	subs	r3, #1
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	441a      	add	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4413      	add	r3, r2
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	3220      	adds	r2, #32
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	3301      	adds	r3, #1
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014a4:	e7ba      	b.n	800141c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80014a8:	4618      	mov	r0, r3
 80014aa:	3738      	adds	r7, #56	; 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	08005ca0 	.word	0x08005ca0

080014cc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	08005c04 	.word	0x08005c04

080014e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
  }
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <_ZN13STM32HardwareC1Ev+0x34>)
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	200000d8 	.word	0x200000d8

0800158c <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6818      	ldr	r0, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3304      	adds	r3, #4
 800159c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a0:	4619      	mov	r1, r3
 80015a2:	f002 ffdd 	bl	8004560 <HAL_UART_Receive_DMA>
    }
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <_ZN13STM32Hardware4readEv>:

    int read(){
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
      int c = -1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb3 	bl	800152e <_ZN13STM32Hardware10getRdmaIndEv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	429c      	cmp	r4, r3
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d012      	beq.n	80015fe <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	791b      	ldrb	r3, [r3, #4]
 80015ec:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80015fe:	68fb      	ldr	r3, [r7, #12]
    }
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bd90      	pop	{r4, r7, pc}

08001608 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b20      	cmp	r3, #32
 800161c:	d108      	bne.n	8001630 <_ZN13STM32Hardware5flushEv+0x28>
 800161e:	4b28      	ldr	r3, [pc, #160]	; (80016c0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	f083 0301 	eor.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <_ZN13STM32Hardware5flushEv+0x28>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <_ZN13STM32Hardware5flushEv+0x2a>
 8001630:	2300      	movs	r3, #0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001648:	429a      	cmp	r2, r3
 800164a:	d031      	beq.n	80016b0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001658:	429a      	cmp	r2, r3
 800165a:	d20a      	bcs.n	8001672 <_ZN13STM32Hardware5flushEv+0x6a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001662:	b29a      	uxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800166a:	b29b      	uxth	r3, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29b      	uxth	r3, r3
 8001670:	e006      	b.n	8001680 <_ZN13STM32Hardware5flushEv+0x78>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001678:	b29b      	uxth	r3, r3
 800167a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800167e:	b29b      	uxth	r3, r3
 8001680:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800168c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	89fa      	ldrh	r2, [r7, #14]
 8001696:	4619      	mov	r1, r3
 8001698:	f002 fee4 	bl	8004464 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	4413      	add	r3, r2
 80016a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
      }
    }
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200001dc 	.word	0x200001dc

080016c4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
      int n = length;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016da:	bfa8      	it	ge
 80016dc:	f44f 7300 	movge.w	r3, #512	; 0x200
 80016e0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016e8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	bf28      	it	cs
 80016f2:	4613      	movcs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68b9      	ldr	r1, [r7, #8]
 8001708:	4618      	mov	r0, r3
 800170a:	f004 f87f 	bl	800580c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4413      	add	r3, r2
 8001718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	d00b      	beq.n	8001742 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	18d1      	adds	r1, r2, r3
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	461a      	mov	r2, r3
 800173e:	f004 f865 	bl	800580c <memcpy>
      }

      flush();
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff ff60 	bl	8001608 <_ZN13STM32Hardware5flushEv>
    }
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	f001 f842 	bl	80027e0 <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
      data("")
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f882 	bl	800087c <_ZN3ros3MsgC1Ev>
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_ZN8std_msgs6StringC1Ev+0x28>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001782:	605a      	str	r2, [r3, #4]
    {
    }
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08005cd8 	.word	0x08005cd8
 8001794:	08005b88 	.word	0x08005b88

08001798 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd12 	bl	80001d4 <strlen>
 80017b0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f894 	bl	80018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3304      	adds	r3, #4
 80017c4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	18d0      	adds	r0, r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	4619      	mov	r1, r3
 80017d4:	f004 f81a 	bl	800580c <memcpy>
      offset += length_data;
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
      return offset;
 80017e0:	68fb      	ldr	r3, [r7, #12]
    }
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	441a      	add	r2, r3
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f88d 	bl	8001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	3304      	adds	r3, #4
 800180e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	429a      	cmp	r2, r3
 800181e:	d20c      	bcs.n	800183a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	441a      	add	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3b01      	subs	r3, #1
 800182a:	6839      	ldr	r1, [r7, #0]
 800182c:	440b      	add	r3, r1
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e7ec      	b.n	8001814 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	3b01      	subs	r3, #1
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	3b01      	subs	r3, #1
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	441a      	add	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
     return offset;
 800185e:	693b      	ldr	r3, [r7, #16]
    }
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	08005c28 	.word	0x08005c28

08001884 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	08005c38 	.word	0x08005c38

080018a0 <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_UART_TxCpltCallback+0x20>)
 80018aa:	f000 f8f1 	bl	8001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fea9 	bl	8001608 <_ZN13STM32Hardware5flushEv>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200001e0 	.word	0x200001e0

080018c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_RxCpltCallback+0x20>)
 80018ce:	f000 f8df 	bl	8001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe59 	bl	800158c <_ZN13STM32Hardware10reset_rbufEv>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200001e0 	.word	0x200001e0

080018e8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d80d      	bhi.n	8001918 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	fa22 f103 	lsr.w	r1, r2, r3
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	e7ee      	b.n	80018f6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d811      	bhi.n	8001962 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	440a      	add	r2, r1
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4611      	mov	r1, r2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	00d2      	lsls	r2, r2, #3
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	e7ea      	b.n	8001938 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	08005cf0 	.word	0x08005cf0

08001990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ffe8 	bl	8001970 <_ZN3ros15NodeHandleBase_C1Ev>
 80019a0:	4a3a      	ldr	r2, [pc, #232]	; (8001a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3304      	adds	r3, #4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fdd2 	bl	8001554 <_ZN13STM32HardwareC1Ev>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fad0 	bl	8000f64 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b18      	cmp	r3, #24
 80019cc:	d80b      	bhi.n	80019e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	e7f0      	b.n	80019c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b18      	cmp	r3, #24
 80019ee:	d80a      	bhi.n	8001a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80019f8:	2100      	movs	r1, #0
 80019fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3301      	adds	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e7f1      	b.n	80019ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a10:	d20a      	bcs.n	8001a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e7f0      	b.n	8001a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a32:	d20a      	bcs.n	8001a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4413      	add	r3, r2
 8001a3a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	e7f0      	b.n	8001a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08005cc4 	.word	0x08005cc4

08001a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3304      	adds	r3, #4
  }
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe4b 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8001aba:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d903      	bls.n	8001ad6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d009      	beq.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d903      	bls.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d014      	beq.n	8001b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3304      	adds	r3, #4
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fe24 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad2      	subs	r2, r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001b14:	429a      	cmp	r2, r3
 8001b16:	bf8c      	ite	hi
 8001b18:	2301      	movhi	r3, #1
 8001b1a:	2300      	movls	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8001b22:	f06f 0301 	mvn.w	r3, #1
 8001b26:	e194      	b.n	8001e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fd3e 	bl	80015ae <_ZN13STM32Hardware4readEv>
 8001b32:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f2c0 8174 	blt.w	8001e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	441a      	add	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d11e      	bne.n	8001b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001b5c:	1c59      	adds	r1, r3, #1
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	b2d1      	uxtb	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1b4      	bne.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001b92:	e7af      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d128      	bne.n	8001bf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2bff      	cmp	r3, #255	; 0xff
 8001ba2:	d10d      	bne.n	8001bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f103 0214 	add.w	r2, r3, #20
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001bbe:	e799      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fdc3 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf8c      	ite	hi
 8001bd8:	2301      	movhi	r3, #1
 8001bda:	2300      	movls	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d088      	beq.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001bea:	f06f 0301 	mvn.w	r3, #1
 8001bee:	e130      	b.n	8001e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d118      	bne.n	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8001bfe:	d107      	bne.n	8001c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c0e:	e771      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f af68 	bne.w	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f918 	bl	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001c2a:	e763      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d113      	bne.n	8001c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001c5c:	e74a      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d110      	bne.n	8001c8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	441a      	add	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001c88:	e734      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d116      	bne.n	8001cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001c9a:	425a      	negs	r2, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	bf58      	it	pl
 8001ca2:	4253      	negpl	r3, r2
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
 8001ca6:	d107      	bne.n	8001cb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cb6:	e71d      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001cc0:	e718      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d10f      	bne.n	8001cec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001cea:	e703      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d117      	bne.n	8001d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	021b      	lsls	r3, r3, #8
 8001d00:	441a      	add	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f47f aeec 	bne.w	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2208      	movs	r2, #8
 8001d20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d24:	e6e6      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	f47f aee1 	bne.w	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001d40:	425a      	negs	r2, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	bf58      	it	pl
 8001d48:	4253      	negpl	r3, r2
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	f47f aed2 	bne.w	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d110      	bne.n	8001d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f87d 	bl	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f898 	bl	8001e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7a:	e06a      	b.n	8001e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d82:	2b0a      	cmp	r3, #10
 8001d84:	d107      	bne.n	8001d96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f960 	bl	8002054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001d94:	e6ae      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d10e      	bne.n	8001dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f7ff fa0d 	bl	80011ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001dbc:	e69a      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001dc4:	2b0b      	cmp	r3, #11
 8001dc6:	d104      	bne.n	8001dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001dd0:	e690      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001dd8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f43f ae84 	beq.w	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001df2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dfc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001e06:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4798      	blx	r3
    while (true)
 8001e22:	e667      	b.n	8001af4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001e24:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00f      	beq.n	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d906      	bls.n	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f809 	bl	8001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8001e50:	2300      	movs	r3, #0
  }
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fd18 	bl	800089c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f107 020c 	add.w	r2, r7, #12
 8001e76:	210a      	movs	r1, #10
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
    rt_time = hardware_.time();
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc65 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8001e96:	b590      	push	{r4, r7, lr}
 8001e98:	b08b      	sub	sp, #44	; 0x2c
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fdea 	bl	8000a7c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	2b18      	cmp	r3, #24
 8001eb0:	dc63      	bgt.n	8001f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d056      	beq.n	8001f72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4608      	mov	r0, r1
 8001f12:	4798      	blx	r3
 8001f14:	4603      	mov	r3, r0
 8001f16:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4608      	mov	r0, r1
 8001f40:	4798      	blx	r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681c      	ldr	r4, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fad8 	bl	8001516 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001f66:	4601      	mov	r1, r0
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e798      	b.n	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	dc5f      	bgt.n	8002044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f88:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d053      	beq.n	800203c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001faa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fba:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4798      	blx	r3
 8001fd8:	4603      	mov	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4608      	mov	r0, r1
 8001ffc:	4798      	blx	r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002006:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681c      	ldr	r4, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002012:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002016:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3304      	adds	r3, #4
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4608      	mov	r0, r1
 800202e:	4798      	blx	r3
 8002030:	4601      	mov	r1, r0
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	461a      	mov	r2, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	3301      	adds	r3, #1
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	e79c      	b.n	8001f7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800204c:	bf00      	nop
 800204e:	372c      	adds	r7, #44	; 0x2c
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fc1a 	bl	800089c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fb6f 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8002072:	4602      	mov	r2, r0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fc79 	bl	800097c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4915      	ldr	r1, [pc, #84]	; (80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002090:	fba1 1303 	umull	r1, r3, r1, r3
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800209a:	6939      	ldr	r1, [r7, #16]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80020a0:	fba3 0302 	umull	r0, r3, r3, r2
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020aa:	fb00 f303 	mul.w	r3, r0, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a0d      	ldr	r2, [pc, #52]	; (80020e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	440b      	add	r3, r1
 80020b8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8a6 	bl	8002214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb3f 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 80020d2:	4602      	mov	r2, r0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	10624dd3 	.word	0x10624dd3
 80020e8:	000f4240 	.word	0x000f4240

080020ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b63      	cmp	r3, #99	; 0x63
 80020fc:	dd09      	ble.n	8002112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800210e:	2300      	movs	r3, #0
 8002110:	e079      	b.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800211e:	3207      	adds	r2, #7
 8002120:	4611      	mov	r1, r2
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
 8002126:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	22fe      	movs	r2, #254	; 0xfe
 8002134:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	b29b      	uxth	r3, r3
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	b29b      	uxth	r3, r3
 800214a:	b2da      	uxtb	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800215e:	4413      	add	r3, r2
 8002160:	b2db      	uxtb	r3, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	b21b      	sxth	r3, r3
 800217a:	121b      	asrs	r3, r3, #8
 800217c:	b21b      	sxth	r3, r3
 800217e:	b2da      	uxtb	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800218a:	2305      	movs	r3, #5
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3306      	adds	r3, #6
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	429a      	cmp	r2, r3
 8002196:	dc0d      	bgt.n	80021b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4413      	add	r3, r2
 800219e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	e7ec      	b.n	800218e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3307      	adds	r3, #7
 80021b8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	425a      	negs	r2, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	bf58      	it	pl
 80021c4:	4253      	negpl	r3, r2
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	6179      	str	r1, [r7, #20]
 80021ce:	43d2      	mvns	r2, r2
 80021d0:	b2d1      	uxtb	r1, r2
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	460a      	mov	r2, r1
 80021d8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e2:	dc0a      	bgt.n	80021fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1d18      	adds	r0, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7ff fa67 	bl	80016c4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	e005      	b.n	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80021fa:	4905      	ldr	r1, [pc, #20]	; (8002210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f849 	bl	8002294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	08005c5c 	.word	0x08005c5c

08002214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3304      	adds	r3, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fa94 	bl	8001750 <_ZN13STM32Hardware4timeEv>
 8002228:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4915      	ldr	r1, [pc, #84]	; (8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002232:	fba1 1303 	umull	r1, r3, r1, r3
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800224a:	fba3 0302 	umull	r0, r3, r3, r2
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002254:	fb00 f303 	mul.w	r3, r0, r3
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	1aca      	subs	r2, r1, r3
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002264:	4413      	add	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe f934 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	10624dd3 	.word	0x10624dd3
 800228c:	000f4240 	.word	0x000f4240
 8002290:	3b9aca00 	.word	0x3b9aca00

08002294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	2103      	movs	r1, #3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f804 	bl	80022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	460b      	mov	r3, r1
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fd9e 	bl	8000e04 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f107 0214 	add.w	r2, r7, #20
 80022da:	2107      	movs	r1, #7
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	4798      	blx	r3
  }
 80022e0:	bf00      	nop
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_Z41__static_initialization_and_destruction_0ii>:
  str_msg.data = hello;
  chatter.publish(&str_msg);
  nh.spinOnce();

  HAL_Delay(1000);
}
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d110      	bne.n	800231a <_Z41__static_initialization_and_destruction_0ii+0x32>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10b      	bne.n	800231a <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002304:	f7ff fb44 	bl	8001990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002308:	4807      	ldr	r0, [pc, #28]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800230a:	f7ff fa2d 	bl	8001768 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800230e:	2300      	movs	r3, #0
 8002310:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002312:	4906      	ldr	r1, [pc, #24]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002316:	f7ff f8e7 	bl	80014e8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001e0 	.word	0x200001e0
 8002328:	20000b1c 	.word	0x20000b1c
 800232c:	08005c98 	.word	0x08005c98
 8002330:	20000b24 	.word	0x20000b24

08002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    return configured_;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <_GLOBAL__sub_I_nh>:
 800234e:	b580      	push	{r7, lr}
 8002350:	af00      	add	r7, sp, #0
 8002352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff ffc6 	bl	80022e8 <_Z41__static_initialization_and_destruction_0ii>
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_MspInit+0x4c>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_MspInit+0x4c>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_MspInit+0x4c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_MspInit+0x4c>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <HAL_MspInit+0x4c>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_MspInit+0x4c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800239e:	2007      	movs	r0, #7
 80023a0:	f000 fafa 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d10d      	bne.n	80023de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <HAL_TIM_Base_MspInit+0x3c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_TIM_Base_MspInit+0x3c>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_TIM_Base_MspInit+0x3c>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_UART_MspInit+0x150>)
 800240e:	4293      	cmp	r3, r2
 8002410:	f040 8091 	bne.w	8002536 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_UART_MspInit+0x154>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_UART_MspInit+0x154>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002422:	6413      	str	r3, [r2, #64]	; 0x40
 8002424:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	4a42      	ldr	r2, [pc, #264]	; (8002544 <HAL_UART_MspInit+0x154>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6313      	str	r3, [r2, #48]	; 0x30
 8002440:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_UART_MspInit+0x154>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2300      	movs	r3, #0
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800245c:	2307      	movs	r3, #7
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4838      	ldr	r0, [pc, #224]	; (8002548 <HAL_UART_MspInit+0x158>)
 8002468:	f000 feda 	bl	8003220 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800246c:	4b37      	ldr	r3, [pc, #220]	; (800254c <HAL_UART_MspInit+0x15c>)
 800246e:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_UART_MspInit+0x160>)
 8002470:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <HAL_UART_MspInit+0x15c>)
 8002474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002478:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247a:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_UART_MspInit+0x15c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <HAL_UART_MspInit+0x15c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_UART_MspInit+0x15c>)
 8002488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800248c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248e:	4b2f      	ldr	r3, [pc, #188]	; (800254c <HAL_UART_MspInit+0x15c>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_UART_MspInit+0x15c>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_UART_MspInit+0x15c>)
 800249c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024ae:	4827      	ldr	r0, [pc, #156]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024b0:	f000 fab4 	bl	8002a1c <HAL_DMA_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024ba:	f7fe f9c9 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
 80024c4:	4a21      	ldr	r2, [pc, #132]	; (800254c <HAL_UART_MspInit+0x15c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_UART_MspInit+0x168>)
 80024ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d8:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_UART_MspInit+0x164>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_UART_MspInit+0x164>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_UART_MspInit+0x164>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800250a:	4812      	ldr	r0, [pc, #72]	; (8002554 <HAL_UART_MspInit+0x164>)
 800250c:	f000 fa86 	bl	8002a1c <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002516:	f7fe f99b 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_UART_MspInit+0x164>)
 800251e:	635a      	str	r2, [r3, #52]	; 0x34
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <HAL_UART_MspInit+0x164>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2026      	movs	r0, #38	; 0x26
 800252c:	f000 fa3f 	bl	80029ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002530:	2026      	movs	r0, #38	; 0x26
 8002532:	f000 fa58 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40004400 	.word	0x40004400
 8002544:	40023800 	.word	0x40023800
 8002548:	40020000 	.word	0x40020000
 800254c:	2000011c 	.word	0x2000011c
 8002550:	40026088 	.word	0x40026088
 8002554:	2000017c 	.word	0x2000017c
 8002558:	400260a0 	.word	0x400260a0

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f906 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Stream5_IRQHandler+0x10>)
 80025b6:	f000 fbc9 	bl	8002d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000011c 	.word	0x2000011c

080025c4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Stream6_IRQHandler+0x10>)
 80025ca:	f000 fbbf 	bl	8002d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000017c 	.word	0x2000017c

080025d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART2_IRQHandler+0x10>)
 80025de:	f001 ffef 	bl	80045c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200000d8 	.word	0x200000d8

080025ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_kill>:

int _kill(int pid, int sig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002606:	f003 f8d7 	bl	80057b8 <__errno>
 800260a:	4603      	mov	r3, r0
 800260c:	2216      	movs	r2, #22
 800260e:	601a      	str	r2, [r3, #0]
	return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_exit>:

void _exit (int status)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002624:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffe7 	bl	80025fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800262e:	e7fe      	b.n	800262e <_exit+0x12>

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f003 f8aa 	bl	80057b8 <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20018000 	.word	0x20018000
 8002690:	00000400 	.word	0x00000400
 8002694:	20000b38 	.word	0x20000b38
 8002698:	20000b50 	.word	0x20000b50

0800269c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x20>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <SystemInit+0x20>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c6:	490e      	ldr	r1, [pc, #56]	; (8002700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026dc:	4c0b      	ldr	r4, [pc, #44]	; (800270c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ea:	f7ff ffd7 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f003 f869 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7fd ff25 	bl	8000540 <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002704:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 8002708:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800270c:	20000b50 	.word	0x20000b50

08002710 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f000 f92b 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fe0a 	bl	8002360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f943 	bl	8002a02 <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002794:	f000 f90b 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000008 	.word	0x20000008
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20000b3c 	.word	0x20000b3c

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000b3c 	.word	0x20000b3c

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	; (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	; (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	; (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002978:	f7ff ff8e 	bl	8002898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff29 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff3e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff8e 	bl	80028ec <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5d 	bl	8002898 <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff31 	bl	800285c <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff feda 	bl	80027e0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e099      	b.n	8002b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a58:	e00f      	b.n	8002a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a5a:	f7ff fec1 	bl	80027e0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d908      	bls.n	8002a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2203      	movs	r2, #3
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e078      	b.n	8002b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1e8      	bne.n	8002a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4b38      	ldr	r3, [pc, #224]	; (8002b74 <HAL_DMA_Init+0x158>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d107      	bne.n	8002ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	4313      	orrs	r3, r2
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d117      	bne.n	8002b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00e      	beq.n	8002b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 fb01 	bl	8003128 <DMA_CheckFifoParam>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2240      	movs	r2, #64	; 0x40
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fab8 	bl	80030bc <DMA_CalcBaseAndBitshift>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	223f      	movs	r2, #63	; 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	f010803f 	.word	0xf010803f

08002b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_DMA_Start_IT+0x26>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e040      	b.n	8002c20 <HAL_DMA_Start_IT+0xa8>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12f      	bne.n	8002c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa4a 	bl	8003060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	223f      	movs	r2, #63	; 0x3f
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0216 	orr.w	r2, r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0208 	orr.w	r2, r2, #8
 8002bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e005      	b.n	8002c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c36:	f7ff fdd3 	bl	80027e0 <HAL_GetTick>
 8002c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2280      	movs	r2, #128	; 0x80
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e052      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0216 	bic.w	r2, r2, #22
 8002c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d103      	bne.n	8002c8a <HAL_DMA_Abort+0x62>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0208 	bic.w	r2, r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	e013      	b.n	8002cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cac:	f7ff fd98 	bl	80027e0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d90c      	bls.n	8002cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e015      	b.n	8002d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e4      	bne.n	8002cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d004      	beq.n	8002d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00c      	b.n	8002d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d58:	4b8e      	ldr	r3, [pc, #568]	; (8002f94 <HAL_DMA_IRQHandler+0x248>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a8e      	ldr	r2, [pc, #568]	; (8002f98 <HAL_DMA_IRQHandler+0x24c>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2208      	movs	r2, #8
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01a      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	2208      	movs	r2, #8
 8002da6:	409a      	lsls	r2, r3
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d012      	beq.n	8002dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00b      	beq.n	8002dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	2201      	movs	r2, #1
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	2204      	movs	r2, #4
 8002df4:	409a      	lsls	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2204      	movs	r2, #4
 8002e12:	409a      	lsls	r2, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	2210      	movs	r2, #16
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d043      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d03c      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2210      	movs	r2, #16
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d024      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
 8002e7a:	e01f      	b.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e016      	b.n	8002ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0208 	bic.w	r2, r2, #8
 8002eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 808f 	beq.w	8002fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8087 	beq.w	8002fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d136      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0216 	bic.w	r2, r2, #22
 8002f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x1da>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3a:	223f      	movs	r2, #63	; 0x3f
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d07e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
        }
        return;
 8002f62:	e079      	b.n	8003058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01d      	beq.n	8002fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e02c      	b.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000
 8002f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e01e      	b.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0210 	bic.w	r2, r2, #16
 8002fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d032      	beq.n	800305a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d022      	beq.n	8003046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2205      	movs	r2, #5
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	3301      	adds	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	d307      	bcc.n	8003034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f2      	bne.n	8003018 <HAL_DMA_IRQHandler+0x2cc>
 8003032:	e000      	b.n	8003036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
 8003056:	e000      	b.n	800305a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003058:	bf00      	nop
    }
  }
}
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800307c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d108      	bne.n	80030a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800309e:	e007      	b.n	80030b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3b10      	subs	r3, #16
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <DMA_CalcBaseAndBitshift+0x64>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <DMA_CalcBaseAndBitshift+0x68>)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d909      	bls.n	80030fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	1d1a      	adds	r2, r3, #4
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
 80030fc:	e007      	b.n	800310e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	aaaaaaab 	.word	0xaaaaaaab
 8003124:	08005d8c 	.word	0x08005d8c

08003128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11f      	bne.n	8003182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d856      	bhi.n	80031f6 <DMA_CheckFifoParam+0xce>
 8003148:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <DMA_CheckFifoParam+0x28>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003161 	.word	0x08003161
 8003154:	08003173 	.word	0x08003173
 8003158:	08003161 	.word	0x08003161
 800315c:	080031f7 	.word	0x080031f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d046      	beq.n	80031fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e043      	b.n	80031fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800317a:	d140      	bne.n	80031fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e03d      	b.n	80031fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318a:	d121      	bne.n	80031d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d837      	bhi.n	8003202 <DMA_CheckFifoParam+0xda>
 8003192:	a201      	add	r2, pc, #4	; (adr r2, 8003198 <DMA_CheckFifoParam+0x70>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031af 	.word	0x080031af
 80031a0:	080031a9 	.word	0x080031a9
 80031a4:	080031c1 	.word	0x080031c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      break;
 80031ac:	e030      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d025      	beq.n	8003206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e022      	b.n	8003206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031c8:	d11f      	bne.n	800320a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ce:	e01c      	b.n	800320a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d903      	bls.n	80031de <DMA_CheckFifoParam+0xb6>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d003      	beq.n	80031e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031dc:	e018      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      break;
 80031e2:	e015      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e00b      	b.n	800320e <DMA_CheckFifoParam+0xe6>
      break;
 80031f6:	bf00      	nop
 80031f8:	e00a      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e008      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
 8003200:	e006      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
 8003204:	e004      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;   
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <DMA_CheckFifoParam+0xe8>
      break;
 800320e:	bf00      	nop
    }
  } 
  
  return status; 
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e159      	b.n	80034f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8148 	bne.w	80034ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d005      	beq.n	8003272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	2b02      	cmp	r3, #2
 8003270:	d130      	bne.n	80032d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0201 	and.w	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d017      	beq.n	8003310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d123      	bne.n	8003364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a2 	beq.w	80034ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b57      	ldr	r3, [pc, #348]	; (8003508 <HAL_GPIO_Init+0x2e8>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b54      	ldr	r3, [pc, #336]	; (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_GPIO_Init+0x2ec>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	; (8003510 <HAL_GPIO_Init+0x2f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x202>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a48      	ldr	r2, [pc, #288]	; (8003514 <HAL_GPIO_Init+0x2f4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x1fe>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a47      	ldr	r2, [pc, #284]	; (8003518 <HAL_GPIO_Init+0x2f8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x1fa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a46      	ldr	r2, [pc, #280]	; (800351c <HAL_GPIO_Init+0x2fc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x1f6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a45      	ldr	r2, [pc, #276]	; (8003520 <HAL_GPIO_Init+0x300>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x1f2>
 800340e:	2304      	movs	r3, #4
 8003410:	e008      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003412:	2307      	movs	r3, #7
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003422:	2300      	movs	r3, #0
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003434:	4935      	ldr	r1, [pc, #212]	; (800350c <HAL_GPIO_Init+0x2ec>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_GPIO_Init+0x304>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_GPIO_Init+0x304>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <HAL_GPIO_Init+0x304>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_GPIO_Init+0x304>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_GPIO_Init+0x304>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ba:	4a1a      	ldr	r2, [pc, #104]	; (8003524 <HAL_GPIO_Init+0x304>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_GPIO_Init+0x304>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e4:	4a0f      	ldr	r2, [pc, #60]	; (8003524 <HAL_GPIO_Init+0x304>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	f67f aea2 	bls.w	800323c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40013800 	.word	0x40013800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003544:	e003      	b.n	800354e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	041a      	lsls	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e267      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d075      	beq.n	8003666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	4b88      	ldr	r3, [pc, #544]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d00c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	2b08      	cmp	r3, #8
 8003590:	d112      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359e:	d10b      	bne.n	80035b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	4b7e      	ldr	r3, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d05b      	beq.n	8003664 <HAL_RCC_OscConfig+0x108>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d157      	bne.n	8003664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e242      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d106      	bne.n	80035d0 <HAL_RCC_OscConfig+0x74>
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a75      	ldr	r2, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e01d      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x98>
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6f      	ldr	r2, [pc, #444]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b6d      	ldr	r3, [pc, #436]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0xb0>
 80035f4:	4b69      	ldr	r3, [pc, #420]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a68      	ldr	r2, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800360a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff f8e4 	bl	80027e0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7ff f8e0 	bl	80027e0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e207      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0xc0>
 800363a:	e014      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7ff f8d0 	bl	80027e0 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7ff f8cc 	bl	80027e0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1f3      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	4b51      	ldr	r3, [pc, #324]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0xe8>
 8003662:	e000      	b.n	8003666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d063      	beq.n	800373a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	4b4a      	ldr	r3, [pc, #296]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b47      	ldr	r3, [pc, #284]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	2b08      	cmp	r3, #8
 8003688:	d11c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCC_OscConfig+0x240>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d116      	bne.n	80036c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003696:	4b41      	ldr	r3, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e1c7      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	4b3b      	ldr	r3, [pc, #236]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4937      	ldr	r1, [pc, #220]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	e03a      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036cc:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d2:	f7ff f885 	bl	80027e0 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036da:	f7ff f881 	bl	80027e0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e1a8      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	4b2b      	ldr	r3, [pc, #172]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f8:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4925      	ldr	r1, [pc, #148]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	e015      	b.n	800373a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x244>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f864 	bl	80027e0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7ff f860 	bl	80027e0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e187      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d036      	beq.n	80037b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7ff f844 	bl	80027e0 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375c:	f7ff f840 	bl	80027e0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e167      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x240>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x200>
 800377a:	e01b      	b.n	80037b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x248>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7ff f82d 	bl	80027e0 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003788:	e00e      	b.n	80037a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378a:	f7ff f829 	bl	80027e0 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d907      	bls.n	80037a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e150      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 800379c:	40023800 	.word	0x40023800
 80037a0:	42470000 	.word	0x42470000
 80037a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a8:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1ea      	bne.n	800378a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8097 	beq.w	80038f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b7d      	ldr	r3, [pc, #500]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a7c      	ldr	r2, [pc, #496]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b7a      	ldr	r3, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b77      	ldr	r3, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b74      	ldr	r3, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe ffe9 	bl	80027e0 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe ffe5 	bl	80027e0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e10c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x474>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x2ea>
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a63      	ldr	r2, [pc, #396]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	e01c      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x30c>
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	e00b      	b.n	8003880 <HAL_RCC_OscConfig+0x324>
 8003868:	4b58      	ldr	r3, [pc, #352]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a54      	ldr	r2, [pc, #336]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0304 	bic.w	r3, r3, #4
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d015      	beq.n	80038b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe ffaa 	bl	80027e0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe ffa6 	bl	80027e0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0cb      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b49      	ldr	r3, [pc, #292]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCC_OscConfig+0x334>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b4:	f7fe ff94 	bl	80027e0 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe ff90 	bl	80027e0 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0b5      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d2:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1ee      	bne.n	80038bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	4a38      	ldr	r2, [pc, #224]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a1 	beq.w	8003a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038fa:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d05c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d141      	bne.n	8003992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390e:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe ff64 	bl	80027e0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe ff60 	bl	80027e0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e087      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	491b      	ldr	r1, [pc, #108]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fe ff39 	bl	80027e0 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003972:	f7fe ff35 	bl	80027e0 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e05c      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	4b11      	ldr	r3, [pc, #68]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x416>
 8003990:	e054      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe ff22 	bl	80027e0 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe ff1e 	bl	80027e0 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e045      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x444>
 80039be:	e03d      	b.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e038      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40007000 	.word	0x40007000
 80039d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x4ec>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d121      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d11a      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	3b01      	subs	r3, #1
 8003a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800

08003a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cc      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a60:	4b68      	ldr	r3, [pc, #416]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d90c      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b8      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d020      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab8:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a52      	ldr	r2, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	494d      	ldr	r1, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d044      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d119      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e07f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0a:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e06f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e067      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 0203 	bic.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fe50 	bl	80027e0 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b44:	f7fe fe4c 	bl	80027e0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e04f      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 020c 	and.w	r2, r3, #12
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1eb      	bne.n	8003b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d20c      	bcs.n	8003b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e032      	b.n	8003bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4916      	ldr	r1, [pc, #88]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	490e      	ldr	r1, [pc, #56]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bd2:	f000 f821 	bl	8003c18 <HAL_RCC_GetSysClockFreq>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fdb0 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08005d74 	.word	0x08005d74
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004

08003c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b094      	sub	sp, #80	; 0x50
 8003c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	647b      	str	r3, [r7, #68]	; 0x44
 8003c24:	2300      	movs	r3, #0
 8003c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c28:	2300      	movs	r3, #0
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	4b79      	ldr	r3, [pc, #484]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d00d      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	f200 80e1 	bhi.w	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x34>
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c4a:	e0db      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c50:	e0db      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c52:	4b73      	ldr	r3, [pc, #460]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c56:	e0d8      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d063      	beq.n	8003d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6e:	4b6a      	ldr	r3, [pc, #424]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	2200      	movs	r2, #0
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
 8003c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c8a:	4622      	mov	r2, r4
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	f04f 0000 	mov.w	r0, #0
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	0159      	lsls	r1, r3, #5
 8003c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c9c:	0150      	lsls	r0, r2, #5
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	1a51      	subs	r1, r2, r1
 8003ca6:	6139      	str	r1, [r7, #16]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	018b      	lsls	r3, r1, #6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cc6:	4651      	mov	r1, sl
 8003cc8:	018a      	lsls	r2, r1, #6
 8003cca:	4651      	mov	r1, sl
 8003ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cea:	4690      	mov	r8, r2
 8003cec:	4699      	mov	r9, r3
 8003cee:	4623      	mov	r3, r4
 8003cf0:	eb18 0303 	adds.w	r3, r8, r3
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	eb49 0303 	adc.w	r3, r9, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	024b      	lsls	r3, r1, #9
 8003d0e:	4621      	mov	r1, r4
 8003d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d14:	4621      	mov	r1, r4
 8003d16:	024a      	lsls	r2, r1, #9
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d28:	f7fc fa5c 	bl	80001e4 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4613      	mov	r3, r2
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	e058      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b38      	ldr	r3, [pc, #224]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4611      	mov	r1, r2
 8003d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d46:	623b      	str	r3, [r7, #32]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	0159      	lsls	r1, r3, #5
 8003d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d62:	0150      	lsls	r0, r2, #5
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4641      	mov	r1, r8
 8003d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d88:	ebb2 040a 	subs.w	r4, r2, sl
 8003d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	00eb      	lsls	r3, r5, #3
 8003d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d9e:	00e2      	lsls	r2, r4, #3
 8003da0:	4614      	mov	r4, r2
 8003da2:	461d      	mov	r5, r3
 8003da4:	4643      	mov	r3, r8
 8003da6:	18e3      	adds	r3, r4, r3
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	464b      	mov	r3, r9
 8003dac:	eb45 0303 	adc.w	r3, r5, r3
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	028b      	lsls	r3, r1, #10
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc8:	4621      	mov	r1, r4
 8003dca:	028a      	lsls	r2, r1, #10
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	61fa      	str	r2, [r7, #28]
 8003dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ddc:	f7fc fa02 	bl	80001e4 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3301      	adds	r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3750      	adds	r7, #80	; 0x50
 8003e10:	46bd      	mov	sp, r7
 8003e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08005d84 	.word	0x08005d84

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffdc 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0b5b      	lsrs	r3, r3, #13
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	08005d84 	.word	0x08005d84

08003e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e041      	b.n	8003f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe fa7c 	bl	80023b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f000 f8f4 	bl	80040b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_ConfigClockSource+0x1c>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0b4      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x186>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	d03e      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xd4>
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	f200 8087 	bhi.w	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	f000 8086 	beq.w	800409c <HAL_TIM_ConfigClockSource+0x172>
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d87f      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003f96:	2b70      	cmp	r3, #112	; 0x70
 8003f98:	d01a      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0xa6>
 8003f9a:	2b70      	cmp	r3, #112	; 0x70
 8003f9c:	d87b      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9e:	2b60      	cmp	r3, #96	; 0x60
 8003fa0:	d050      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x11a>
 8003fa2:	2b60      	cmp	r3, #96	; 0x60
 8003fa4:	d877      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	2b50      	cmp	r3, #80	; 0x50
 8003fa8:	d03c      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xfa>
 8003faa:	2b50      	cmp	r3, #80	; 0x50
 8003fac:	d873      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d058      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x13a>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d86f      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb6:	2b30      	cmp	r3, #48	; 0x30
 8003fb8:	d064      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x15a>
 8003fba:	2b30      	cmp	r3, #48	; 0x30
 8003fbc:	d86b      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d060      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x15a>
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d867      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d05c      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x15a>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d05a      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x15a>
 8003fce:	e062      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f000 f964 	bl	80042ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ff2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e04f      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f000 f94d 	bl	80042ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e03c      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f8c1 	bl	80041b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2150      	movs	r1, #80	; 0x50
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f91a 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8004042:	e02c      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	461a      	mov	r2, r3
 8004052:	f000 f8e0 	bl	8004216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2160      	movs	r1, #96	; 0x60
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f90a 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8004062:	e01c      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f8a1 	bl	80041b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f8fa 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8004082:	e00c      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 f8f1 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8004094:	e003      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e000      	b.n	800409e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800409c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a34      	ldr	r2, [pc, #208]	; (800419c <TIM_Base_SetConfig+0xe4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00f      	beq.n	80040f0 <TIM_Base_SetConfig+0x38>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d6:	d00b      	beq.n	80040f0 <TIM_Base_SetConfig+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a31      	ldr	r2, [pc, #196]	; (80041a0 <TIM_Base_SetConfig+0xe8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_Base_SetConfig+0x38>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a30      	ldr	r2, [pc, #192]	; (80041a4 <TIM_Base_SetConfig+0xec>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0x38>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a2f      	ldr	r2, [pc, #188]	; (80041a8 <TIM_Base_SetConfig+0xf0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a25      	ldr	r2, [pc, #148]	; (800419c <TIM_Base_SetConfig+0xe4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01b      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d017      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <TIM_Base_SetConfig+0xe8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <TIM_Base_SetConfig+0xec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00f      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <TIM_Base_SetConfig+0xf0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00b      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <TIM_Base_SetConfig+0xf4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <TIM_Base_SetConfig+0xf8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <TIM_Base_SetConfig+0xfc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d108      	bne.n	8004154 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	4313      	orrs	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <TIM_Base_SetConfig+0xe4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d103      	bne.n	8004188 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	615a      	str	r2, [r3, #20]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800

080041b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f023 0201 	bic.w	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 030a 	bic.w	r3, r3, #10
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004216:	b480      	push	{r7}
 8004218:	b087      	sub	sp, #28
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	f023 0210 	bic.w	r2, r3, #16
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	031b      	lsls	r3, r3, #12
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4313      	orrs	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	f043 0307 	orr.w	r3, r3, #7
 8004298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	021a      	lsls	r2, r3, #8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004300:	2302      	movs	r3, #2
 8004302:	e050      	b.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d013      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10c      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40014000 	.word	0x40014000

080043c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e03f      	b.n	800445a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd fffe 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800440a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 ff43 	bl	8005298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	d165      	bne.n	800454a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Transmit_DMA+0x26>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e05e      	b.n	800454c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_UART_Transmit_DMA+0x38>
 8004498:	2302      	movs	r3, #2
 800449a:	e057      	b.n	800454c <HAL_UART_Transmit_DMA+0xe8>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_UART_Transmit_DMA+0xf0>)
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	4a21      	ldr	r2, [pc, #132]	; (8004558 <HAL_UART_Transmit_DMA+0xf4>)
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_UART_Transmit_DMA+0xf8>)
 80044da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	2200      	movs	r2, #0
 80044e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80044e4:	f107 0308 	add.w	r3, r7, #8
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3304      	adds	r3, #4
 80044f8:	461a      	mov	r2, r3
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	f7fe fb3c 	bl	8002b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004508:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3314      	adds	r3, #20
 8004518:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	617b      	str	r3, [r7, #20]
   return(result);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004532:	627a      	str	r2, [r7, #36]	; 0x24
 8004534:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6a39      	ldr	r1, [r7, #32]
 8004538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e5      	bne.n	8004512 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
  }
}
 800454c:	4618      	mov	r0, r3
 800454e:	3730      	adds	r7, #48	; 0x30
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	08004b31 	.word	0x08004b31
 8004558:	08004bcb 	.word	0x08004bcb
 800455c:	08004d43 	.word	0x08004d43

08004560 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b20      	cmp	r3, #32
 8004578:	d11d      	bne.n	80045b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_UART_Receive_DMA+0x26>
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e016      	b.n	80045b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_UART_Receive_DMA+0x38>
 8004594:	2302      	movs	r3, #2
 8004596:	e00f      	b.n	80045b8 <HAL_UART_Receive_DMA+0x58>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	461a      	mov	r2, r3
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fc13 	bl	8004dd8 <UART_Start_Receive_DMA>
 80045b2:	4603      	mov	r3, r0
 80045b4:	e000      	b.n	80045b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b0ba      	sub	sp, #232	; 0xe8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_UART_IRQHandler+0x66>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fd7f 	bl	8005122 <UART_Receive_IT>
      return;
 8004624:	e256      	b.n	8004ad4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80de 	beq.w	80047ec <HAL_UART_IRQHandler+0x22c>
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004640:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80d1 	beq.w	80047ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_UART_IRQHandler+0xae>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_UART_IRQHandler+0xd2>
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0202 	orr.w	r2, r3, #2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0xf6>
 800469e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d011      	beq.n	80046e6 <HAL_UART_IRQHandler+0x126>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f043 0208 	orr.w	r2, r3, #8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 81ed 	beq.w	8004aca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x14e>
 80046fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fd0a 	bl	8005122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <HAL_UART_IRQHandler+0x17a>
 8004732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d04f      	beq.n	80047da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fc12 	bl	8004f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d141      	bne.n	80047d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3314      	adds	r3, #20
 8004776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800477a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800477e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1d9      	bne.n	800474e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	4a7d      	ldr	r2, [pc, #500]	; (800499c <HAL_UART_IRQHandler+0x3dc>)
 80047a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe faaa 	bl	8002d08 <HAL_DMA_Abort_IT>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d016      	beq.n	80047e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	e00e      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f99a 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	e00a      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f996 	bl	8004b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e006      	b.n	80047e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f992 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047e6:	e170      	b.n	8004aca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	bf00      	nop
    return;
 80047ea:	e16e      	b.n	8004aca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 814a 	bne.w	8004a8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 8143 	beq.w	8004a8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 813c 	beq.w	8004a8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	f040 80b4 	bne.w	80049a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8140 	beq.w	8004ace <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004856:	429a      	cmp	r2, r3
 8004858:	f080 8139 	bcs.w	8004ace <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004862:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	f000 8088 	beq.w	8004982 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800489e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1d9      	bne.n	8004872 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3314      	adds	r3, #20
 80048c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e1      	bne.n	80048be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800490a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3314      	adds	r3, #20
 800491a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800491e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004920:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800492c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e3      	bne.n	80048fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004952:	f023 0310 	bic.w	r3, r3, #16
 8004956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004964:	65ba      	str	r2, [r7, #88]	; 0x58
 8004966:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800496a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e3      	bne.n	8004940 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe f953 	bl	8002c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800498a:	b29b      	uxth	r3, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	b29b      	uxth	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f8c0 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004998:	e099      	b.n	8004ace <HAL_UART_IRQHandler+0x50e>
 800499a:	bf00      	nop
 800499c:	0800502b 	.word	0x0800502b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 808b 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8086 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ea:	647a      	str	r2, [r7, #68]	; 0x44
 80049ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e3      	bne.n	80049c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f023 0301 	bic.w	r3, r3, #1
 8004a14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a22:	633a      	str	r2, [r7, #48]	; 0x30
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e3      	bne.n	80049fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f023 0310 	bic.w	r3, r3, #16
 8004a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a68:	61fa      	str	r2, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	617b      	str	r3, [r7, #20]
   return(result);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e3      	bne.n	8004a44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f848 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a88:	e023      	b.n	8004ad2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x4ea>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fad5 	bl	8005052 <UART_Transmit_IT>
    return;
 8004aa8:	e014      	b.n	8004ad4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x514>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fb15 	bl	80050f2 <UART_EndTransmit_IT>
    return;
 8004ac8:	e004      	b.n	8004ad4 <HAL_UART_IRQHandler+0x514>
    return;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ad2:	bf00      	nop
  }
}
 8004ad4:	37e8      	adds	r7, #232	; 0xe8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop

08004adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b090      	sub	sp, #64	; 0x40
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d137      	bne.n	8004bbc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4e:	2200      	movs	r2, #0
 8004b50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	623b      	str	r3, [r7, #32]
   return(result);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b72:	633a      	str	r2, [r7, #48]	; 0x30
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e5      	bne.n	8004b52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba6:	61fa      	str	r2, [r7, #28]
 8004ba8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	69b9      	ldr	r1, [r7, #24]
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bba:	e002      	b.n	8004bc2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004bbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004bbe:	f7fc fe6f 	bl	80018a0 <HAL_UART_TxCpltCallback>
}
 8004bc2:	bf00      	nop
 8004bc4:	3740      	adds	r7, #64	; 0x40
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff ff7f 	bl	8004adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b09c      	sub	sp, #112	; 0x70
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d172      	bne.n	8004ce8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	2200      	movs	r2, #0
 8004c06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c28:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	667b      	str	r3, [r7, #100]	; 0x64
 8004c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c5c:	647a      	str	r2, [r7, #68]	; 0x44
 8004c5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3314      	adds	r3, #20
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c86:	663b      	str	r3, [r7, #96]	; 0x60
 8004c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c90:	633a      	str	r2, [r7, #48]	; 0x30
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e5      	bne.n	8004c70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d119      	bne.n	8004ce8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cd4:	61fa      	str	r2, [r7, #28]
 8004cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004cf8:	f7ff ff0e 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cfc:	e002      	b.n	8004d04 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004cfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d00:	f7fc fde0 	bl	80018c4 <HAL_UART_RxCpltCallback>
}
 8004d04:	bf00      	nop
 8004d06:	3770      	adds	r7, #112	; 0x70
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d108      	bne.n	8004d34 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff fef3 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d32:	e002      	b.n	8004d3a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fedb 	bl	8004af0 <HAL_UART_RxHalfCpltCallback>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b21      	cmp	r3, #33	; 0x21
 8004d74:	d108      	bne.n	8004d88 <UART_DMAError+0x46>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	f000 f8c6 	bl	8004f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	bf0c      	ite	eq
 8004d96:	2301      	moveq	r3, #1
 8004d98:	2300      	movne	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b22      	cmp	r3, #34	; 0x22
 8004da8:	d108      	bne.n	8004dbc <UART_DMAError+0x7a>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f000 f8d4 	bl	8004f64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	f043 0210 	orr.w	r2, r3, #16
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc8:	68b8      	ldr	r0, [r7, #8]
 8004dca:	f7ff fe9b 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b098      	sub	sp, #96	; 0x60
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2222      	movs	r2, #34	; 0x22
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	4a40      	ldr	r2, [pc, #256]	; (8004f08 <UART_Start_Receive_DMA+0x130>)
 8004e06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	4a3f      	ldr	r2, [pc, #252]	; (8004f0c <UART_Start_Receive_DMA+0x134>)
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	4a3e      	ldr	r2, [pc, #248]	; (8004f10 <UART_Start_Receive_DMA+0x138>)
 8004e16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	f7fd fe9e 	bl	8002b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e82:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e5      	bne.n	8004e62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3314      	adds	r3, #20
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	657b      	str	r3, [r7, #84]	; 0x54
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eb6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee0:	653b      	str	r3, [r7, #80]	; 0x50
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3314      	adds	r3, #20
 8004ee8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004eea:	627a      	str	r2, [r7, #36]	; 0x24
 8004eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6a39      	ldr	r1, [r7, #32]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e5      	bne.n	8004eca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3760      	adds	r7, #96	; 0x60
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	08004be7 	.word	0x08004be7
 8004f0c:	08004d0d 	.word	0x08004d0d
 8004f10:	08004d43 	.word	0x08004d43

08004f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	61ba      	str	r2, [r7, #24]
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e5      	bne.n	8004f1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004f58:	bf00      	nop
 8004f5a:	3724      	adds	r7, #36	; 0x24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b095      	sub	sp, #84	; 0x54
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f8c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e5      	bne.n	8004f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3314      	adds	r3, #20
 8004fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3314      	adds	r3, #20
 8004fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d119      	bne.n	8005010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501e:	bf00      	nop
 8005020:	3754      	adds	r7, #84	; 0x54
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff fd5d 	bl	8004b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b21      	cmp	r3, #33	; 0x21
 8005064:	d13e      	bne.n	80050e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d114      	bne.n	800509a <UART_Transmit_IT+0x48>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d110      	bne.n	800509a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800508c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	621a      	str	r2, [r3, #32]
 8005098:	e008      	b.n	80050ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	1c59      	adds	r1, r3, #1
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6211      	str	r1, [r2, #32]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4619      	mov	r1, r3
 80050ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10f      	bne.n	80050e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e000      	b.n	80050e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fbc4 	bl	80018a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b08c      	sub	sp, #48	; 0x30
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b22      	cmp	r3, #34	; 0x22
 8005134:	f040 80ab 	bne.w	800528e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005140:	d117      	bne.n	8005172 <UART_Receive_IT+0x50>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d113      	bne.n	8005172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	b29b      	uxth	r3, r3
 800515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005160:	b29a      	uxth	r2, r3
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28
 8005170:	e026      	b.n	80051c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005184:	d007      	beq.n	8005196 <UART_Receive_IT+0x74>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10a      	bne.n	80051a4 <UART_Receive_IT+0x82>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e008      	b.n	80051b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	4619      	mov	r1, r3
 80051ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d15a      	bne.n	800528a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0220 	bic.w	r2, r2, #32
 80051e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	2b01      	cmp	r3, #1
 8005212:	d135      	bne.n	8005280 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	330c      	adds	r3, #12
 8005220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	613b      	str	r3, [r7, #16]
   return(result);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f023 0310 	bic.w	r3, r3, #16
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	623a      	str	r2, [r7, #32]
 800523c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	6a3a      	ldr	r2, [r7, #32]
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	61bb      	str	r3, [r7, #24]
   return(result);
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d10a      	bne.n	8005272 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fc4d 	bl	8004b18 <HAL_UARTEx_RxEventCallback>
 800527e:	e002      	b.n	8005286 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fc fb1f 	bl	80018c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e002      	b.n	8005290 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3730      	adds	r7, #48	; 0x30
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800529c:	b0c0      	sub	sp, #256	; 0x100
 800529e:	af00      	add	r7, sp, #0
 80052a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b4:	68d9      	ldr	r1, [r3, #12]
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	ea40 0301 	orr.w	r3, r0, r1
 80052c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052f0:	f021 010c 	bic.w	r1, r1, #12
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052fe:	430b      	orrs	r3, r1
 8005300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	6999      	ldr	r1, [r3, #24]
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	ea40 0301 	orr.w	r3, r0, r1
 800531e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b8f      	ldr	r3, [pc, #572]	; (8005564 <UART_SetConfig+0x2cc>)
 8005328:	429a      	cmp	r2, r3
 800532a:	d005      	beq.n	8005338 <UART_SetConfig+0xa0>
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b8d      	ldr	r3, [pc, #564]	; (8005568 <UART_SetConfig+0x2d0>)
 8005334:	429a      	cmp	r2, r3
 8005336:	d104      	bne.n	8005342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7fe fd94 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 800533c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005340:	e003      	b.n	800534a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005342:	f7fe fd7b 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005346:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005354:	f040 810c 	bne.w	8005570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535c:	2200      	movs	r2, #0
 800535e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005362:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	1891      	adds	r1, r2, r2
 8005370:	65b9      	str	r1, [r7, #88]	; 0x58
 8005372:	415b      	adcs	r3, r3
 8005374:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800537a:	4621      	mov	r1, r4
 800537c:	eb12 0801 	adds.w	r8, r2, r1
 8005380:	4629      	mov	r1, r5
 8005382:	eb43 0901 	adc.w	r9, r3, r1
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800539a:	4690      	mov	r8, r2
 800539c:	4699      	mov	r9, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	eb18 0303 	adds.w	r3, r8, r3
 80053a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053a8:	462b      	mov	r3, r5
 80053aa:	eb49 0303 	adc.w	r3, r9, r3
 80053ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053c6:	460b      	mov	r3, r1
 80053c8:	18db      	adds	r3, r3, r3
 80053ca:	653b      	str	r3, [r7, #80]	; 0x50
 80053cc:	4613      	mov	r3, r2
 80053ce:	eb42 0303 	adc.w	r3, r2, r3
 80053d2:	657b      	str	r3, [r7, #84]	; 0x54
 80053d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053dc:	f7fa ff02 	bl	80001e4 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b61      	ldr	r3, [pc, #388]	; (800556c <UART_SetConfig+0x2d4>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011c      	lsls	r4, r3, #4
 80053ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005400:	4642      	mov	r2, r8
 8005402:	464b      	mov	r3, r9
 8005404:	1891      	adds	r1, r2, r2
 8005406:	64b9      	str	r1, [r7, #72]	; 0x48
 8005408:	415b      	adcs	r3, r3
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005410:	4641      	mov	r1, r8
 8005412:	eb12 0a01 	adds.w	sl, r2, r1
 8005416:	4649      	mov	r1, r9
 8005418:	eb43 0b01 	adc.w	fp, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800542c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005430:	4692      	mov	sl, r2
 8005432:	469b      	mov	fp, r3
 8005434:	4643      	mov	r3, r8
 8005436:	eb1a 0303 	adds.w	r3, sl, r3
 800543a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800543e:	464b      	mov	r3, r9
 8005440:	eb4b 0303 	adc.w	r3, fp, r3
 8005444:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005454:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800545c:	460b      	mov	r3, r1
 800545e:	18db      	adds	r3, r3, r3
 8005460:	643b      	str	r3, [r7, #64]	; 0x40
 8005462:	4613      	mov	r3, r2
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
 800546a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800546e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005472:	f7fa feb7 	bl	80001e4 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4611      	mov	r1, r2
 800547c:	4b3b      	ldr	r3, [pc, #236]	; (800556c <UART_SetConfig+0x2d4>)
 800547e:	fba3 2301 	umull	r2, r3, r3, r1
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	2264      	movs	r2, #100	; 0x64
 8005486:	fb02 f303 	mul.w	r3, r2, r3
 800548a:	1acb      	subs	r3, r1, r3
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005492:	4b36      	ldr	r3, [pc, #216]	; (800556c <UART_SetConfig+0x2d4>)
 8005494:	fba3 2302 	umull	r2, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054a0:	441c      	add	r4, r3
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054b4:	4642      	mov	r2, r8
 80054b6:	464b      	mov	r3, r9
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80054bc:	415b      	adcs	r3, r3
 80054be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054c4:	4641      	mov	r1, r8
 80054c6:	1851      	adds	r1, r2, r1
 80054c8:	6339      	str	r1, [r7, #48]	; 0x30
 80054ca:	4649      	mov	r1, r9
 80054cc:	414b      	adcs	r3, r1
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054dc:	4659      	mov	r1, fp
 80054de:	00cb      	lsls	r3, r1, #3
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e6:	4651      	mov	r1, sl
 80054e8:	00ca      	lsls	r2, r1, #3
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	4603      	mov	r3, r0
 80054f0:	4642      	mov	r2, r8
 80054f2:	189b      	adds	r3, r3, r2
 80054f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f8:	464b      	mov	r3, r9
 80054fa:	460a      	mov	r2, r1
 80054fc:	eb42 0303 	adc.w	r3, r2, r3
 8005500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005510:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005518:	460b      	mov	r3, r1
 800551a:	18db      	adds	r3, r3, r3
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 800551e:	4613      	mov	r3, r2
 8005520:	eb42 0303 	adc.w	r3, r2, r3
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800552a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800552e:	f7fa fe59 	bl	80001e4 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <UART_SetConfig+0x2d4>)
 8005538:	fba3 1302 	umull	r1, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2164      	movs	r1, #100	; 0x64
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <UART_SetConfig+0x2d4>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f003 0207 	and.w	r2, r3, #7
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4422      	add	r2, r4
 800555e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005560:	e105      	b.n	800576e <UART_SetConfig+0x4d6>
 8005562:	bf00      	nop
 8005564:	40011000 	.word	0x40011000
 8005568:	40011400 	.word	0x40011400
 800556c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800557a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800557e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005582:	4642      	mov	r2, r8
 8005584:	464b      	mov	r3, r9
 8005586:	1891      	adds	r1, r2, r2
 8005588:	6239      	str	r1, [r7, #32]
 800558a:	415b      	adcs	r3, r3
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005592:	4641      	mov	r1, r8
 8005594:	1854      	adds	r4, r2, r1
 8005596:	4649      	mov	r1, r9
 8005598:	eb43 0501 	adc.w	r5, r3, r1
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	00eb      	lsls	r3, r5, #3
 80055a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055aa:	00e2      	lsls	r2, r4, #3
 80055ac:	4614      	mov	r4, r2
 80055ae:	461d      	mov	r5, r3
 80055b0:	4643      	mov	r3, r8
 80055b2:	18e3      	adds	r3, r4, r3
 80055b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b8:	464b      	mov	r3, r9
 80055ba:	eb45 0303 	adc.w	r3, r5, r3
 80055be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055de:	4629      	mov	r1, r5
 80055e0:	008b      	lsls	r3, r1, #2
 80055e2:	4621      	mov	r1, r4
 80055e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e8:	4621      	mov	r1, r4
 80055ea:	008a      	lsls	r2, r1, #2
 80055ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055f0:	f7fa fdf8 	bl	80001e4 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4b60      	ldr	r3, [pc, #384]	; (800577c <UART_SetConfig+0x4e4>)
 80055fa:	fba3 2302 	umull	r2, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	011c      	lsls	r4, r3, #4
 8005602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005606:	2200      	movs	r2, #0
 8005608:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800560c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005614:	4642      	mov	r2, r8
 8005616:	464b      	mov	r3, r9
 8005618:	1891      	adds	r1, r2, r2
 800561a:	61b9      	str	r1, [r7, #24]
 800561c:	415b      	adcs	r3, r3
 800561e:	61fb      	str	r3, [r7, #28]
 8005620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005624:	4641      	mov	r1, r8
 8005626:	1851      	adds	r1, r2, r1
 8005628:	6139      	str	r1, [r7, #16]
 800562a:	4649      	mov	r1, r9
 800562c:	414b      	adcs	r3, r1
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800563c:	4659      	mov	r1, fp
 800563e:	00cb      	lsls	r3, r1, #3
 8005640:	4651      	mov	r1, sl
 8005642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005646:	4651      	mov	r1, sl
 8005648:	00ca      	lsls	r2, r1, #3
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	4603      	mov	r3, r0
 8005650:	4642      	mov	r2, r8
 8005652:	189b      	adds	r3, r3, r2
 8005654:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005658:	464b      	mov	r3, r9
 800565a:	460a      	mov	r2, r1
 800565c:	eb42 0303 	adc.w	r3, r2, r3
 8005660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	67bb      	str	r3, [r7, #120]	; 0x78
 800566e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800567c:	4649      	mov	r1, r9
 800567e:	008b      	lsls	r3, r1, #2
 8005680:	4641      	mov	r1, r8
 8005682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005686:	4641      	mov	r1, r8
 8005688:	008a      	lsls	r2, r1, #2
 800568a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800568e:	f7fa fda9 	bl	80001e4 <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <UART_SetConfig+0x4e4>)
 8005698:	fba3 1302 	umull	r1, r3, r3, r2
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	2164      	movs	r1, #100	; 0x64
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	3332      	adds	r3, #50	; 0x32
 80056aa:	4a34      	ldr	r2, [pc, #208]	; (800577c <UART_SetConfig+0x4e4>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b6:	441c      	add	r4, r3
 80056b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056bc:	2200      	movs	r2, #0
 80056be:	673b      	str	r3, [r7, #112]	; 0x70
 80056c0:	677a      	str	r2, [r7, #116]	; 0x74
 80056c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056c6:	4642      	mov	r2, r8
 80056c8:	464b      	mov	r3, r9
 80056ca:	1891      	adds	r1, r2, r2
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	415b      	adcs	r3, r3
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d6:	4641      	mov	r1, r8
 80056d8:	1851      	adds	r1, r2, r1
 80056da:	6039      	str	r1, [r7, #0]
 80056dc:	4649      	mov	r1, r9
 80056de:	414b      	adcs	r3, r1
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ee:	4659      	mov	r1, fp
 80056f0:	00cb      	lsls	r3, r1, #3
 80056f2:	4651      	mov	r1, sl
 80056f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f8:	4651      	mov	r1, sl
 80056fa:	00ca      	lsls	r2, r1, #3
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	4603      	mov	r3, r0
 8005702:	4642      	mov	r2, r8
 8005704:	189b      	adds	r3, r3, r2
 8005706:	66bb      	str	r3, [r7, #104]	; 0x68
 8005708:	464b      	mov	r3, r9
 800570a:	460a      	mov	r2, r1
 800570c:	eb42 0303 	adc.w	r3, r2, r3
 8005710:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	663b      	str	r3, [r7, #96]	; 0x60
 800571c:	667a      	str	r2, [r7, #100]	; 0x64
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800572a:	4649      	mov	r1, r9
 800572c:	008b      	lsls	r3, r1, #2
 800572e:	4641      	mov	r1, r8
 8005730:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005734:	4641      	mov	r1, r8
 8005736:	008a      	lsls	r2, r1, #2
 8005738:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800573c:	f7fa fd52 	bl	80001e4 <__aeabi_uldivmod>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4b0d      	ldr	r3, [pc, #52]	; (800577c <UART_SetConfig+0x4e4>)
 8005746:	fba3 1302 	umull	r1, r3, r3, r2
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2164      	movs	r1, #100	; 0x64
 800574e:	fb01 f303 	mul.w	r3, r1, r3
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	3332      	adds	r3, #50	; 0x32
 8005758:	4a08      	ldr	r2, [pc, #32]	; (800577c <UART_SetConfig+0x4e4>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	f003 020f 	and.w	r2, r3, #15
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4422      	add	r2, r4
 800576c:	609a      	str	r2, [r3, #8]
}
 800576e:	bf00      	nop
 8005770:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005774:	46bd      	mov	sp, r7
 8005776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800577a:	bf00      	nop
 800577c:	51eb851f 	.word	0x51eb851f

08005780 <__cxa_pure_virtual>:
 8005780:	b508      	push	{r3, lr}
 8005782:	f000 f80d 	bl	80057a0 <_ZSt9terminatev>

08005786 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005786:	b508      	push	{r3, lr}
 8005788:	4780      	blx	r0
 800578a:	f000 f80e 	bl	80057aa <abort>
	...

08005790 <_ZSt13get_terminatev>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <_ZSt13get_terminatev+0xc>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	f3bf 8f5b 	dmb	ish
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c

080057a0 <_ZSt9terminatev>:
 80057a0:	b508      	push	{r3, lr}
 80057a2:	f7ff fff5 	bl	8005790 <_ZSt13get_terminatev>
 80057a6:	f7ff ffee 	bl	8005786 <_ZN10__cxxabiv111__terminateEPFvvE>

080057aa <abort>:
 80057aa:	b508      	push	{r3, lr}
 80057ac:	2006      	movs	r0, #6
 80057ae:	f000 f873 	bl	8005898 <raise>
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7fc ff32 	bl	800261c <_exit>

080057b8 <__errno>:
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <__errno+0x8>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	20000010 	.word	0x20000010

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	4d0d      	ldr	r5, [pc, #52]	; (80057fc <__libc_init_array+0x38>)
 80057c8:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	2600      	movs	r6, #0
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	4d0b      	ldr	r5, [pc, #44]	; (8005804 <__libc_init_array+0x40>)
 80057d6:	4c0c      	ldr	r4, [pc, #48]	; (8005808 <__libc_init_array+0x44>)
 80057d8:	f000 f9b0 	bl	8005b3c <_init>
 80057dc:	1b64      	subs	r4, r4, r5
 80057de:	10a4      	asrs	r4, r4, #2
 80057e0:	2600      	movs	r6, #0
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	08005d9c 	.word	0x08005d9c
 8005800:	08005d9c 	.word	0x08005d9c
 8005804:	08005d9c 	.word	0x08005d9c
 8005808:	08005da4 	.word	0x08005da4

0800580c <memcpy>:
 800580c:	440a      	add	r2, r1
 800580e:	4291      	cmp	r1, r2
 8005810:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005814:	d100      	bne.n	8005818 <memcpy+0xc>
 8005816:	4770      	bx	lr
 8005818:	b510      	push	{r4, lr}
 800581a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005822:	4291      	cmp	r1, r2
 8005824:	d1f9      	bne.n	800581a <memcpy+0xe>
 8005826:	bd10      	pop	{r4, pc}

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <realloc>:
 8005838:	4b02      	ldr	r3, [pc, #8]	; (8005844 <realloc+0xc>)
 800583a:	460a      	mov	r2, r1
 800583c:	4601      	mov	r1, r0
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	f000 b8da 	b.w	80059f8 <_realloc_r>
 8005844:	20000010 	.word	0x20000010

08005848 <_raise_r>:
 8005848:	291f      	cmp	r1, #31
 800584a:	b538      	push	{r3, r4, r5, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	d904      	bls.n	800585c <_raise_r+0x14>
 8005852:	2316      	movs	r3, #22
 8005854:	6003      	str	r3, [r0, #0]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800585e:	b112      	cbz	r2, 8005866 <_raise_r+0x1e>
 8005860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005864:	b94b      	cbnz	r3, 800587a <_raise_r+0x32>
 8005866:	4620      	mov	r0, r4
 8005868:	f000 f830 	bl	80058cc <_getpid_r>
 800586c:	462a      	mov	r2, r5
 800586e:	4601      	mov	r1, r0
 8005870:	4620      	mov	r0, r4
 8005872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005876:	f000 b817 	b.w	80058a8 <_kill_r>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d00a      	beq.n	8005894 <_raise_r+0x4c>
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	d103      	bne.n	800588a <_raise_r+0x42>
 8005882:	2316      	movs	r3, #22
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	2001      	movs	r0, #1
 8005888:	e7e7      	b.n	800585a <_raise_r+0x12>
 800588a:	2400      	movs	r4, #0
 800588c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005890:	4628      	mov	r0, r5
 8005892:	4798      	blx	r3
 8005894:	2000      	movs	r0, #0
 8005896:	e7e0      	b.n	800585a <_raise_r+0x12>

08005898 <raise>:
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <raise+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f7ff bfd3 	b.w	8005848 <_raise_r>
 80058a2:	bf00      	nop
 80058a4:	20000010 	.word	0x20000010

080058a8 <_kill_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	; (80058c8 <_kill_r+0x20>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fc fea1 	bl	80025fc <_kill>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_kill_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_kill_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	20000b48 	.word	0x20000b48

080058cc <_getpid_r>:
 80058cc:	f7fc be8e 	b.w	80025ec <_getpid>

080058d0 <sbrk_aligned>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4e0e      	ldr	r6, [pc, #56]	; (800590c <sbrk_aligned+0x3c>)
 80058d4:	460c      	mov	r4, r1
 80058d6:	6831      	ldr	r1, [r6, #0]
 80058d8:	4605      	mov	r5, r0
 80058da:	b911      	cbnz	r1, 80058e2 <sbrk_aligned+0x12>
 80058dc:	f000 f8bc 	bl	8005a58 <_sbrk_r>
 80058e0:	6030      	str	r0, [r6, #0]
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f8b7 	bl	8005a58 <_sbrk_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d00a      	beq.n	8005904 <sbrk_aligned+0x34>
 80058ee:	1cc4      	adds	r4, r0, #3
 80058f0:	f024 0403 	bic.w	r4, r4, #3
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d007      	beq.n	8005908 <sbrk_aligned+0x38>
 80058f8:	1a21      	subs	r1, r4, r0
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 f8ac 	bl	8005a58 <_sbrk_r>
 8005900:	3001      	adds	r0, #1
 8005902:	d101      	bne.n	8005908 <sbrk_aligned+0x38>
 8005904:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005908:	4620      	mov	r0, r4
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	20000b44 	.word	0x20000b44

08005910 <_malloc_r>:
 8005910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005914:	1ccd      	adds	r5, r1, #3
 8005916:	f025 0503 	bic.w	r5, r5, #3
 800591a:	3508      	adds	r5, #8
 800591c:	2d0c      	cmp	r5, #12
 800591e:	bf38      	it	cc
 8005920:	250c      	movcc	r5, #12
 8005922:	2d00      	cmp	r5, #0
 8005924:	4607      	mov	r7, r0
 8005926:	db01      	blt.n	800592c <_malloc_r+0x1c>
 8005928:	42a9      	cmp	r1, r5
 800592a:	d905      	bls.n	8005938 <_malloc_r+0x28>
 800592c:	230c      	movs	r3, #12
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	2600      	movs	r6, #0
 8005932:	4630      	mov	r0, r6
 8005934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005938:	4e2e      	ldr	r6, [pc, #184]	; (80059f4 <_malloc_r+0xe4>)
 800593a:	f000 f89d 	bl	8005a78 <__malloc_lock>
 800593e:	6833      	ldr	r3, [r6, #0]
 8005940:	461c      	mov	r4, r3
 8005942:	bb34      	cbnz	r4, 8005992 <_malloc_r+0x82>
 8005944:	4629      	mov	r1, r5
 8005946:	4638      	mov	r0, r7
 8005948:	f7ff ffc2 	bl	80058d0 <sbrk_aligned>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	4604      	mov	r4, r0
 8005950:	d14d      	bne.n	80059ee <_malloc_r+0xde>
 8005952:	6834      	ldr	r4, [r6, #0]
 8005954:	4626      	mov	r6, r4
 8005956:	2e00      	cmp	r6, #0
 8005958:	d140      	bne.n	80059dc <_malloc_r+0xcc>
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	4631      	mov	r1, r6
 800595e:	4638      	mov	r0, r7
 8005960:	eb04 0803 	add.w	r8, r4, r3
 8005964:	f000 f878 	bl	8005a58 <_sbrk_r>
 8005968:	4580      	cmp	r8, r0
 800596a:	d13a      	bne.n	80059e2 <_malloc_r+0xd2>
 800596c:	6821      	ldr	r1, [r4, #0]
 800596e:	3503      	adds	r5, #3
 8005970:	1a6d      	subs	r5, r5, r1
 8005972:	f025 0503 	bic.w	r5, r5, #3
 8005976:	3508      	adds	r5, #8
 8005978:	2d0c      	cmp	r5, #12
 800597a:	bf38      	it	cc
 800597c:	250c      	movcc	r5, #12
 800597e:	4629      	mov	r1, r5
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff ffa5 	bl	80058d0 <sbrk_aligned>
 8005986:	3001      	adds	r0, #1
 8005988:	d02b      	beq.n	80059e2 <_malloc_r+0xd2>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	442b      	add	r3, r5
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	e00e      	b.n	80059b0 <_malloc_r+0xa0>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	1b52      	subs	r2, r2, r5
 8005996:	d41e      	bmi.n	80059d6 <_malloc_r+0xc6>
 8005998:	2a0b      	cmp	r2, #11
 800599a:	d916      	bls.n	80059ca <_malloc_r+0xba>
 800599c:	1961      	adds	r1, r4, r5
 800599e:	42a3      	cmp	r3, r4
 80059a0:	6025      	str	r5, [r4, #0]
 80059a2:	bf18      	it	ne
 80059a4:	6059      	strne	r1, [r3, #4]
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	bf08      	it	eq
 80059aa:	6031      	streq	r1, [r6, #0]
 80059ac:	5162      	str	r2, [r4, r5]
 80059ae:	604b      	str	r3, [r1, #4]
 80059b0:	4638      	mov	r0, r7
 80059b2:	f104 060b 	add.w	r6, r4, #11
 80059b6:	f000 f865 	bl	8005a84 <__malloc_unlock>
 80059ba:	f026 0607 	bic.w	r6, r6, #7
 80059be:	1d23      	adds	r3, r4, #4
 80059c0:	1af2      	subs	r2, r6, r3
 80059c2:	d0b6      	beq.n	8005932 <_malloc_r+0x22>
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	50a3      	str	r3, [r4, r2]
 80059c8:	e7b3      	b.n	8005932 <_malloc_r+0x22>
 80059ca:	6862      	ldr	r2, [r4, #4]
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	bf0c      	ite	eq
 80059d0:	6032      	streq	r2, [r6, #0]
 80059d2:	605a      	strne	r2, [r3, #4]
 80059d4:	e7ec      	b.n	80059b0 <_malloc_r+0xa0>
 80059d6:	4623      	mov	r3, r4
 80059d8:	6864      	ldr	r4, [r4, #4]
 80059da:	e7b2      	b.n	8005942 <_malloc_r+0x32>
 80059dc:	4634      	mov	r4, r6
 80059de:	6876      	ldr	r6, [r6, #4]
 80059e0:	e7b9      	b.n	8005956 <_malloc_r+0x46>
 80059e2:	230c      	movs	r3, #12
 80059e4:	603b      	str	r3, [r7, #0]
 80059e6:	4638      	mov	r0, r7
 80059e8:	f000 f84c 	bl	8005a84 <__malloc_unlock>
 80059ec:	e7a1      	b.n	8005932 <_malloc_r+0x22>
 80059ee:	6025      	str	r5, [r4, #0]
 80059f0:	e7de      	b.n	80059b0 <_malloc_r+0xa0>
 80059f2:	bf00      	nop
 80059f4:	20000b40 	.word	0x20000b40

080059f8 <_realloc_r>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	4680      	mov	r8, r0
 80059fe:	4614      	mov	r4, r2
 8005a00:	460e      	mov	r6, r1
 8005a02:	b921      	cbnz	r1, 8005a0e <_realloc_r+0x16>
 8005a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a08:	4611      	mov	r1, r2
 8005a0a:	f7ff bf81 	b.w	8005910 <_malloc_r>
 8005a0e:	b92a      	cbnz	r2, 8005a1c <_realloc_r+0x24>
 8005a10:	f000 f83e 	bl	8005a90 <_free_r>
 8005a14:	4625      	mov	r5, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1c:	f000 f884 	bl	8005b28 <_malloc_usable_size_r>
 8005a20:	4284      	cmp	r4, r0
 8005a22:	4607      	mov	r7, r0
 8005a24:	d802      	bhi.n	8005a2c <_realloc_r+0x34>
 8005a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a2a:	d812      	bhi.n	8005a52 <_realloc_r+0x5a>
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4640      	mov	r0, r8
 8005a30:	f7ff ff6e 	bl	8005910 <_malloc_r>
 8005a34:	4605      	mov	r5, r0
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d0ed      	beq.n	8005a16 <_realloc_r+0x1e>
 8005a3a:	42bc      	cmp	r4, r7
 8005a3c:	4622      	mov	r2, r4
 8005a3e:	4631      	mov	r1, r6
 8005a40:	bf28      	it	cs
 8005a42:	463a      	movcs	r2, r7
 8005a44:	f7ff fee2 	bl	800580c <memcpy>
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f000 f820 	bl	8005a90 <_free_r>
 8005a50:	e7e1      	b.n	8005a16 <_realloc_r+0x1e>
 8005a52:	4635      	mov	r5, r6
 8005a54:	e7df      	b.n	8005a16 <_realloc_r+0x1e>
	...

08005a58 <_sbrk_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d06      	ldr	r5, [pc, #24]	; (8005a74 <_sbrk_r+0x1c>)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fc fde4 	bl	8002630 <_sbrk>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_sbrk_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_sbrk_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20000b48 	.word	0x20000b48

08005a78 <__malloc_lock>:
 8005a78:	4801      	ldr	r0, [pc, #4]	; (8005a80 <__malloc_lock+0x8>)
 8005a7a:	f000 b85d 	b.w	8005b38 <__retarget_lock_acquire_recursive>
 8005a7e:	bf00      	nop
 8005a80:	20000b4c 	.word	0x20000b4c

08005a84 <__malloc_unlock>:
 8005a84:	4801      	ldr	r0, [pc, #4]	; (8005a8c <__malloc_unlock+0x8>)
 8005a86:	f000 b858 	b.w	8005b3a <__retarget_lock_release_recursive>
 8005a8a:	bf00      	nop
 8005a8c:	20000b4c 	.word	0x20000b4c

08005a90 <_free_r>:
 8005a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a92:	2900      	cmp	r1, #0
 8005a94:	d044      	beq.n	8005b20 <_free_r+0x90>
 8005a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a9a:	9001      	str	r0, [sp, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005aa2:	bfb8      	it	lt
 8005aa4:	18e4      	addlt	r4, r4, r3
 8005aa6:	f7ff ffe7 	bl	8005a78 <__malloc_lock>
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <_free_r+0x94>)
 8005aac:	9801      	ldr	r0, [sp, #4]
 8005aae:	6813      	ldr	r3, [r2, #0]
 8005ab0:	b933      	cbnz	r3, 8005ac0 <_free_r+0x30>
 8005ab2:	6063      	str	r3, [r4, #4]
 8005ab4:	6014      	str	r4, [r2, #0]
 8005ab6:	b003      	add	sp, #12
 8005ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005abc:	f7ff bfe2 	b.w	8005a84 <__malloc_unlock>
 8005ac0:	42a3      	cmp	r3, r4
 8005ac2:	d908      	bls.n	8005ad6 <_free_r+0x46>
 8005ac4:	6825      	ldr	r5, [r4, #0]
 8005ac6:	1961      	adds	r1, r4, r5
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	bf01      	itttt	eq
 8005acc:	6819      	ldreq	r1, [r3, #0]
 8005ace:	685b      	ldreq	r3, [r3, #4]
 8005ad0:	1949      	addeq	r1, r1, r5
 8005ad2:	6021      	streq	r1, [r4, #0]
 8005ad4:	e7ed      	b.n	8005ab2 <_free_r+0x22>
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	b10b      	cbz	r3, 8005ae0 <_free_r+0x50>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d9fa      	bls.n	8005ad6 <_free_r+0x46>
 8005ae0:	6811      	ldr	r1, [r2, #0]
 8005ae2:	1855      	adds	r5, r2, r1
 8005ae4:	42a5      	cmp	r5, r4
 8005ae6:	d10b      	bne.n	8005b00 <_free_r+0x70>
 8005ae8:	6824      	ldr	r4, [r4, #0]
 8005aea:	4421      	add	r1, r4
 8005aec:	1854      	adds	r4, r2, r1
 8005aee:	42a3      	cmp	r3, r4
 8005af0:	6011      	str	r1, [r2, #0]
 8005af2:	d1e0      	bne.n	8005ab6 <_free_r+0x26>
 8005af4:	681c      	ldr	r4, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	6053      	str	r3, [r2, #4]
 8005afa:	4421      	add	r1, r4
 8005afc:	6011      	str	r1, [r2, #0]
 8005afe:	e7da      	b.n	8005ab6 <_free_r+0x26>
 8005b00:	d902      	bls.n	8005b08 <_free_r+0x78>
 8005b02:	230c      	movs	r3, #12
 8005b04:	6003      	str	r3, [r0, #0]
 8005b06:	e7d6      	b.n	8005ab6 <_free_r+0x26>
 8005b08:	6825      	ldr	r5, [r4, #0]
 8005b0a:	1961      	adds	r1, r4, r5
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	bf04      	itt	eq
 8005b10:	6819      	ldreq	r1, [r3, #0]
 8005b12:	685b      	ldreq	r3, [r3, #4]
 8005b14:	6063      	str	r3, [r4, #4]
 8005b16:	bf04      	itt	eq
 8005b18:	1949      	addeq	r1, r1, r5
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	6054      	str	r4, [r2, #4]
 8005b1e:	e7ca      	b.n	8005ab6 <_free_r+0x26>
 8005b20:	b003      	add	sp, #12
 8005b22:	bd30      	pop	{r4, r5, pc}
 8005b24:	20000b40 	.word	0x20000b40

08005b28 <_malloc_usable_size_r>:
 8005b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b2c:	1f18      	subs	r0, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfbc      	itt	lt
 8005b32:	580b      	ldrlt	r3, [r1, r0]
 8005b34:	18c0      	addlt	r0, r0, r3
 8005b36:	4770      	bx	lr

08005b38 <__retarget_lock_acquire_recursive>:
 8005b38:	4770      	bx	lr

08005b3a <__retarget_lock_release_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
