
ros_serial_twist_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000683c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cbc  08006cbc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc4  08006cc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b44  20000074  08006d44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08006d44  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cb0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296d  00000000  00000000  00035d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000386c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00039668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c7  00000000  00000000  0003a548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d60  00000000  00000000  0005270f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d97  00000000  00000000  0006346f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8206  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004700  00000000  00000000  000f8258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080069b8 	.word	0x080069b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080069b8 	.word	0x080069b8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fc68 	bl	8002e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f952 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f928 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8fc 	bl	8000750 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000558:	f000 f872 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800055c:	f001 fa3e 	bl	80019dc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000560:	f001 fa80 	bl	8001a64 <loop>
  {
 8000564:	e7fc      	b.n	8000560 <main+0x20>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 f894 	bl	80066a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fb72 	bl	8003cdc <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f97d 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fdd4 	bl	80041cc <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f967 	bl	80008fc <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000670:	4b36      	ldr	r3, [pc, #216]	; (800074c <MX_TIM2_Init+0x10c>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_TIM2_Init+0x10c>)
 800067a:	2253      	movs	r2, #83	; 0x53
 800067c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_TIM2_Init+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15150;
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_TIM2_Init+0x10c>)
 8000686:	f643 322e 	movw	r2, #15150	; 0x3b2e
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_TIM2_Init+0x10c>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_TIM2_Init+0x10c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000698:	482c      	ldr	r0, [pc, #176]	; (800074c <MX_TIM2_Init+0x10c>)
 800069a:	f003 ffb7 	bl	800460c <HAL_TIM_Base_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a4:	f000 f92a 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4825      	ldr	r0, [pc, #148]	; (800074c <MX_TIM2_Init+0x10c>)
 80006b6:	f004 f9c3 	bl	8004a40 <HAL_TIM_ConfigClockSource>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006c0:	f000 f91c 	bl	80008fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <MX_TIM2_Init+0x10c>)
 80006c6:	f003 fff0 	bl	80046aa <HAL_TIM_PWM_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006d0:	f000 f914 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4619      	mov	r1, r3
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <MX_TIM2_Init+0x10c>)
 80006e4:	f004 fd40 	bl	8005168 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ee:	f000 f905 	bl	80008fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <MX_TIM2_Init+0x10c>)
 800070a:	f004 f8d7 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000714:	f000 f8f2 	bl	80008fc <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_TIM2_Init+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_TIM2_Init+0x10c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f022 0208 	bic.w	r2, r2, #8
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2204      	movs	r2, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <MX_TIM2_Init+0x10c>)
 8000730:	f004 f8c4 	bl	80048bc <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 800073a:	f000 f8df 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <MX_TIM2_Init+0x10c>)
 8000740:	f002 f9a0 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8000744:	bf00      	nop
 8000746:	3738      	adds	r7, #56	; 0x38
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f004 fd5c 	bl	8005244 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f8b3 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000d8 	.word	0x200000d8
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2010      	movs	r0, #16
 80007cc:	f002 fc95 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007d0:	2010      	movs	r0, #16
 80007d2:	f002 fcae 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2011      	movs	r0, #17
 80007dc:	f002 fc8d 	bl	80030fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007e0:	2011      	movs	r0, #17
 80007e2:	f002 fca6 	bl	8003132 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a36      	ldr	r2, [pc, #216]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b34      	ldr	r3, [pc, #208]	; (80008ec <MX_GPIO_Init+0xf8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_GPIO_Init+0xf8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a28      	ldr	r2, [pc, #160]	; (80008ec <MX_GPIO_Init+0xf8>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_GPIO_Init+0xf8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	21d1      	movs	r1, #209	; 0xd1
 800087e:	481c      	ldr	r0, [pc, #112]	; (80008f0 <MX_GPIO_Init+0xfc>)
 8000880:	f003 f9f8 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <MX_GPIO_Init+0x100>)
 800088a:	f003 f9f3 	bl	8003c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000894:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <MX_GPIO_Init+0x104>)
 80008a6:	f003 f861 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80008aa:	23d1      	movs	r3, #209	; 0xd1
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0xfc>)
 80008c2:	f003 f853 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_GPIO_Init+0x100>)
 80008de:	f003 f845 	bl	800396c <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40020800 	.word	0x40020800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>

08000906 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4618      	mov	r0, r3
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <_ZN3ros3MsgC1Ev+0x1c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	08006c8c 	.word	0x08006c8c

08000948 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
      data()
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffe8 	bl	8000928 <_ZN3ros3MsgC1Ev>
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffcf 	bl	8000906 <_ZN3ros4TimeC1Ev>
    {
    }
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	08006c74 	.word	0x08006c74

08000978 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6859      	ldr	r1, [r3, #4]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	4413      	add	r3, r2
 8000990:	b2ca      	uxtb	r2, r1
 8000992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	0a19      	lsrs	r1, r3, #8
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	683a      	ldr	r2, [r7, #0]
 80009a0:	4413      	add	r3, r2
 80009a2:	b2ca      	uxtb	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	0c19      	lsrs	r1, r3, #16
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3302      	adds	r3, #2
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	b2ca      	uxtb	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	0e19      	lsrs	r1, r3, #24
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3303      	adds	r3, #3
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3304      	adds	r3, #4
 80009ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6899      	ldr	r1, [r3, #8]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4413      	add	r3, r2
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	0a19      	lsrs	r1, r3, #8
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	b2ca      	uxtb	r2, r1
 80009ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	0c19      	lsrs	r1, r3, #16
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3302      	adds	r3, #2
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	0e19      	lsrs	r1, r3, #24
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	3303      	adds	r3, #3
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2ca      	uxtb	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3304      	adds	r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    }
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	440b      	add	r3, r1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3302      	adds	r3, #2
 8000a62:	6839      	ldr	r1, [r7, #0]
 8000a64:	440b      	add	r3, r1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3303      	adds	r3, #3
 8000a78:	6839      	ldr	r1, [r7, #0]
 8000a7a:	440b      	add	r3, r1
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	061b      	lsls	r3, r3, #24
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	6839      	ldr	r1, [r7, #0]
 8000aa4:	440b      	add	r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	6839      	ldr	r1, [r7, #0]
 8000aba:	440b      	add	r3, r1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	041b      	lsls	r3, r3, #16
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3303      	adds	r3, #3
 8000ace:	6839      	ldr	r1, [r7, #0]
 8000ad0:	440b      	add	r3, r1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	061b      	lsls	r3, r3, #24
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	60fb      	str	r3, [r7, #12]
     return offset;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    }
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	080069d0 	.word	0x080069d0

08000b0c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	080069e0 	.word	0x080069e0

08000b28 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fef8 	bl	8000928 <_ZN3ros3MsgC1Ev>
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	809a      	strh	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
    {
    }
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08006c5c 	.word	0x08006c5c
 8000b6c:	08006a04 	.word	0x08006a04

08000b70 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	8899      	ldrh	r1, [r3, #4]
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	b2ca      	uxtb	r2, r1
 8000b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	889b      	ldrh	r3, [r3, #4]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b299      	uxth	r1, r3
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	3301      	adds	r3, #1
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b2ca      	uxtb	r2, r1
 8000b9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb12 	bl	80001d4 <strlen>
 8000bb0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	69b9      	ldr	r1, [r7, #24]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f878 	bl	8001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	18d0      	adds	r0, r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f005 fd58 	bl	8006688 <memcpy>
      offset += length_topic_name;
 8000bd8:	69fa      	ldr	r2, [r7, #28]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4413      	add	r3, r2
 8000bde:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff faf5 	bl	80001d4 <strlen>
 8000bea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	6979      	ldr	r1, [r7, #20]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 f85b 	bl	8001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	18d0      	adds	r0, r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f005 fd3b 	bl	8006688 <memcpy>
      offset += length_message_type;
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4413      	add	r3, r2
 8000c18:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fad8 	bl	80001d4 <strlen>
 8000c24:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	6939      	ldr	r1, [r7, #16]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f83e 	bl	8001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3304      	adds	r3, #4
 8000c38:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	18d0      	adds	r0, r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4619      	mov	r1, r3
 8000c48:	f005 fd1e 	bl	8006688 <memcpy>
      offset += length_md5sum;
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4413      	add	r3, r2
 8000c52:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000c5a:	68f9      	ldr	r1, [r7, #12]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	0a19      	lsrs	r1, r3, #8
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	b2ca      	uxtb	r2, r1
 8000c74:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	0c19      	lsrs	r1, r3, #16
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	4413      	add	r3, r2
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	0e19      	lsrs	r1, r3, #24
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3303      	adds	r3, #3
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	b2ca      	uxtb	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3304      	adds	r3, #4
 8000c9a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000c9c:	69fb      	ldr	r3, [r7, #28]
    }
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b08a      	sub	sp, #40	; 0x28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889b      	ldrh	r3, [r3, #4]
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	6839      	ldr	r1, [r7, #0]
 8000cce:	440b      	add	r3, r1
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	441a      	add	r2, r3
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fffa 	bl	8001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d20c      	bcs.n	8000d28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	441a      	add	r2, r3
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	3b01      	subs	r3, #1
 8000d18:	6839      	ldr	r1, [r7, #0]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	3301      	adds	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
 8000d26:	e7ec      	b.n	8000d02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	441a      	add	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4413      	add	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	441a      	add	r2, r3
 8000d52:	f107 0310 	add.w	r3, r7, #16
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 ffc7 	bl	8001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	3304      	adds	r3, #4
 8000d62:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	6a3a      	ldr	r2, [r7, #32]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d20c      	bcs.n	8000d8e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	6a3b      	ldr	r3, [r7, #32]
 8000d78:	441a      	add	r2, r3
 8000d7a:	6a3b      	ldr	r3, [r7, #32]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	6839      	ldr	r1, [r7, #0]
 8000d80:	440b      	add	r3, r1
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	e7ec      	b.n	8000d68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4413      	add	r3, r2
 8000d94:	3b01      	subs	r3, #1
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	4413      	add	r3, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	441a      	add	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4413      	add	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	441a      	add	r2, r3
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 ff94 	bl	8001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d20c      	bcs.n	8000df4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	441a      	add	r2, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6839      	ldr	r1, [r7, #0]
 8000de6:	440b      	add	r3, r1
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	3301      	adds	r3, #1
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e7ec      	b.n	8000dce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	440a      	add	r2, r1
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	440b      	add	r3, r1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	3302      	adds	r3, #2
 8000e42:	6839      	ldr	r1, [r7, #0]
 8000e44:	440b      	add	r3, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	3303      	adds	r3, #3
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	440b      	add	r3, r1
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	061b      	lsls	r3, r3, #24
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	61bb      	str	r3, [r7, #24]
     return offset;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
    }
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	08006a08 	.word	0x08006a08

08000e94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08006a24 	.word	0x08006a24

08000eb0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd34 	bl	8000928 <_ZN3ros3MsgC1Ev>
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	711a      	strb	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000ed0:	609a      	str	r2, [r3, #8]
    {
    }
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08006c44 	.word	0x08006c44
 8000ee0:	08006a04 	.word	0x08006a04

08000ee4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	7912      	ldrb	r2, [r2, #4]
 8000efc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f963 	bl	80001d4 <strlen>
 8000f0e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4413      	add	r3, r2
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fec9 	bl	8001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	18d0      	adds	r0, r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f005 fba9 	bl	8006688 <memcpy>
      offset += length_msg;
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    }
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	441a      	add	r2, r3
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 feb9 	bl	8001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4413      	add	r3, r2
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d20c      	bcs.n	8000faa <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	441a      	add	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e7ec      	b.n	8000f84 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
     return offset;
 8000fce:	693b      	ldr	r3, [r7, #16]
    }
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	08006a48 	.word	0x08006a48

08000ff4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	08006a5c 	.word	0x08006a5c

08001010 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fc84 	bl	8000928 <_ZN3ros3MsgC1Ev>
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08006c2c 	.word	0x08006c2c

08001058 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6859      	ldr	r1, [r3, #4]
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4413      	add	r3, r2
 8001070:	b2ca      	uxtb	r2, r1
 8001072:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	0a19      	lsrs	r1, r3, #8
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	3301      	adds	r3, #1
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	0c19      	lsrs	r1, r3, #16
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	3302      	adds	r3, #2
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	4413      	add	r3, r2
 8001094:	b2ca      	uxtb	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0e19      	lsrs	r1, r3, #24
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3303      	adds	r3, #3
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3304      	adds	r3, #4
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d22b      	bcs.n	8001116 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80010cc:	6939      	ldr	r1, [r7, #16]
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	b2ca      	uxtb	r2, r1
 80010d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	0a19      	lsrs	r1, r3, #8
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	b2ca      	uxtb	r2, r1
 80010e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	0c19      	lsrs	r1, r3, #16
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3302      	adds	r3, #2
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2ca      	uxtb	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	0e19      	lsrs	r1, r3, #24
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3303      	adds	r3, #3
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	b2ca      	uxtb	r2, r1
 8001106:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	3304      	adds	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	3301      	adds	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
 8001114:	e7ce      	b.n	80010b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6919      	ldr	r1, [r3, #16]
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	4413      	add	r3, r2
 8001120:	b2ca      	uxtb	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	0a19      	lsrs	r1, r3, #8
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	3301      	adds	r3, #1
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	0c19      	lsrs	r1, r3, #16
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	3302      	adds	r3, #2
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	4413      	add	r3, r2
 8001144:	b2ca      	uxtb	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	0e19      	lsrs	r1, r3, #24
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	3303      	adds	r3, #3
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	3304      	adds	r3, #4
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	429a      	cmp	r2, r3
 800116c:	d22b      	bcs.n	80011c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	0a19      	lsrs	r1, r3, #8
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	3301      	adds	r3, #1
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	b2ca      	uxtb	r2, r1
 8001196:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	0c19      	lsrs	r1, r3, #16
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	3302      	adds	r3, #2
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	0e19      	lsrs	r1, r3, #24
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	3303      	adds	r3, #3
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2ca      	uxtb	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	3304      	adds	r3, #4
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	e7ce      	b.n	8001164 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69d9      	ldr	r1, [r3, #28]
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69db      	ldr	r3, [r3, #28]
 80011d8:	0a19      	lsrs	r1, r3, #8
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	3301      	adds	r3, #1
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	0c19      	lsrs	r1, r3, #16
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	3302      	adds	r3, #2
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2ca      	uxtb	r2, r1
 80011f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	0e19      	lsrs	r1, r3, #24
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	3303      	adds	r3, #3
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	b2ca      	uxtb	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	3304      	adds	r3, #4
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	429a      	cmp	r2, r3
 800121c:	d228      	bcs.n	8001270 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7fe ffd2 	bl	80001d4 <strlen>
 8001230:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	4413      	add	r3, r2
 8001238:	6979      	ldr	r1, [r7, #20]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fd38 	bl	8001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	3304      	adds	r3, #4
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	18d0      	adds	r0, r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4619      	mov	r1, r3
 800125c:	f005 fa14 	bl	8006688 <memcpy>
      offset += length_stringsi;
 8001260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4413      	add	r3, r2
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	3301      	adds	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	e7d1      	b.n	8001214 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001272:	4618      	mov	r0, r3
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800127a:	b580      	push	{r7, lr}
 800127c:	b08e      	sub	sp, #56	; 0x38
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001294:	3301      	adds	r3, #1
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	6a3a      	ldr	r2, [r7, #32]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	3302      	adds	r3, #2
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	041b      	lsls	r3, r3, #16
 80012b0:	6a3a      	ldr	r2, [r7, #32]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80012b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b8:	3303      	adds	r3, #3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	061b      	lsls	r3, r3, #24
 80012c2:	6a3a      	ldr	r2, [r7, #32]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80012c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ca:	3304      	adds	r3, #4
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d90a      	bls.n	80012ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f005 f9e6 	bl	80066b4 <realloc>
 80012e8:	4602      	mov	r2, r0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a3a      	ldr	r2, [r7, #32]
 80012f2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	429a      	cmp	r2, r3
 8001300:	d236      	bcs.n	8001370 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	440a      	add	r2, r1
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	4313      	orrs	r3, r2
 8001312:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001318:	3301      	adds	r3, #1
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	440b      	add	r3, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4313      	orrs	r3, r2
 8001324:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132a:	3302      	adds	r3, #2
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	440b      	add	r3, r1
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133c:	3303      	adds	r3, #3
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	440b      	add	r3, r1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	4313      	orrs	r3, r2
 8001348:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	3304      	adds	r3, #4
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	3301      	adds	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
 800136e:	e7c3      	b.n	80012f8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	3301      	adds	r3, #1
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	4313      	orrs	r3, r2
 800138a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	3302      	adds	r3, #2
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	4313      	orrs	r3, r2
 800139c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	3303      	adds	r3, #3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	061b      	lsls	r3, r3, #24
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80013b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b2:	3304      	adds	r3, #4
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d90a      	bls.n	80013d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f005 f972 	bl	80066b4 <realloc>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d236      	bcs.n	8001458 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	440a      	add	r2, r1
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001400:	3301      	adds	r3, #1
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	440b      	add	r3, r1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001412:	3302      	adds	r3, #2
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	440b      	add	r3, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001424:	3303      	adds	r3, #3
 8001426:	6839      	ldr	r1, [r7, #0]
 8001428:	440b      	add	r3, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143a:	3304      	adds	r3, #4
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	3214      	adds	r2, #20
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001452:	3301      	adds	r3, #1
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	e7c3      	b.n	80013e0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001464:	3301      	adds	r3, #1
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001476:	3302      	adds	r3, #2
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	041b      	lsls	r3, r3, #16
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001488:	3303      	adds	r3, #3
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	3304      	adds	r3, #4
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d90a      	bls.n	80014be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4619      	mov	r1, r3
 80014b2:	4610      	mov	r0, r2
 80014b4:	f005 f8fe 	bl	80066b4 <realloc>
 80014b8:	4602      	mov	r2, r0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d23f      	bcs.n	8001552 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80014d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	441a      	add	r2, r3
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fc04 	bl	8001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	3304      	adds	r3, #4
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
 80014ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	441a      	add	r2, r3
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3b01      	subs	r3, #1
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	440b      	add	r3, r1
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3301      	adds	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	e7ec      	b.n	80014ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	3b01      	subs	r3, #1
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	4413      	add	r3, r2
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	3b01      	subs	r3, #1
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	441a      	add	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	3220      	adds	r2, #32
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	3301      	adds	r3, #1
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001550:	e7ba      	b.n	80014c8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001554:	4618      	mov	r0, r3
 8001556:	3738      	adds	r7, #56	; 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08006b68 	.word	0x08006b68

08001578 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	08006a80 	.word	0x08006a80

08001594 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
  }
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <_ZN13STM32HardwareC1Ev+0x34>)
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	200000d8 	.word	0x200000d8

0800160c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f804 	bl	8001622 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001636:	4619      	mov	r1, r3
 8001638:	f003 fed0 	bl	80053dc <HAL_UART_Receive_DMA>
    }
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001650:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ffa7 	bl	80015ac <_ZN13STM32Hardware10getRdmaIndEv>
 800165e:	4603      	mov	r3, r0
 8001660:	429c      	cmp	r4, r3
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d012      	beq.n	8001694 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001674:	1c59      	adds	r1, r3, #1
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800168a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001694:	68fb      	ldr	r3, [r7, #12]
    }
 8001696:	4618      	mov	r0, r3
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
	...

080016a0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d108      	bne.n	80016c8 <_ZN13STM32Hardware5flushEv+0x28>
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <_ZN13STM32Hardware5flushEv+0xb8>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <_ZN13STM32Hardware5flushEv+0x28>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <_ZN13STM32Hardware5flushEv+0x2a>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d03f      	beq.n	800174e <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <_ZN13STM32Hardware5flushEv+0xb8>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d031      	beq.n	8001748 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d20a      	bcs.n	800170a <_ZN13STM32Hardware5flushEv+0x6a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001702:	b29b      	uxth	r3, r3
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b29b      	uxth	r3, r3
 8001708:	e006      	b.n	8001718 <_ZN13STM32Hardware5flushEv+0x78>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001710:	b29b      	uxth	r3, r3
 8001712:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001716:	b29b      	uxth	r3, r3
 8001718:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001724:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	89fa      	ldrh	r2, [r7, #14]
 800172e:	4619      	mov	r1, r3
 8001730:	f003 fdd6 	bl	80052e0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	4413      	add	r3, r2
 800173e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <_ZN13STM32Hardware5flushEv+0xb8>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
      }
    }
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001dc 	.word	0x200001dc

0800175c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
      int n = length;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001772:	bfa8      	it	ge
 8001774:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001778:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001780:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	4293      	cmp	r3, r2
 8001788:	bf28      	it	cs
 800178a:	4613      	movcs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 ff71 	bl	8006688 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4413      	add	r3, r2
 80017b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d00b      	beq.n	80017da <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	18d1      	adds	r1, r2, r3
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	f004 ff57 	bl	8006688 <memcpy>
      }

      flush();
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff ff60 	bl	80016a0 <_ZN13STM32Hardware5flushEv>
    }
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	f001 fb78 	bl	8002ee4 <HAL_GetTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
      data(0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f88c 	bl	8000928 <_ZN3ros3MsgC1Ev>
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
    {
    }
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	08006be8 	.word	0x08006be8

0800182c <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	4413      	add	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	7912      	ldrb	r2, [r2, #4]
 8001844:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      return offset;
 800184c:	68fb      	ldr	r3, [r7, #12]
    }
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	4413      	add	r3, r2
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
     return offset;
 800187a:	68fb      	ldr	r3, [r7, #12]
    }
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	08006aa4 	.word	0x08006aa4

080018a4 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	08006ab4 	.word	0x08006ab4

080018c0 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
      data(0)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f82c 	bl	8000928 <_ZN3ros3MsgC1Ev>
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	711a      	strb	r2, [r3, #4]
    {
    }
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	08006bd0 	.word	0x08006bd0

080018ec <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	7a3a      	ldrb	r2, [r7, #8]
 8001908:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001910:	68fb      	ldr	r3, [r7, #12]
    }
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001930:	7a3a      	ldrb	r2, [r7, #8]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	440b      	add	r3, r1
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8001940:	7a3a      	ldrb	r2, [r7, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
     return offset;
 800194c:	68fb      	ldr	r3, [r7, #12]
    }
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	08006ad8 	.word	0x08006ad8

08001978 <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	08006ae8 	.word	0x08006ae8

08001994 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt8> pwm_l_sub("pwm_l", &pwm_l_cb);
ros::Subscriber<std_msgs::UInt8> pwm_r_sub("pwm_r", &pwm_r_cb);
ros::Subscriber<std_msgs::Bool> dir_l_sub("dir_l", &dir_l_cb);
ros::Subscriber<std_msgs::Bool> dir_r_sub("dir_r", &dir_r_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_UART_TxCpltCallback+0x20>)
 800199e:	f000 fab3 	bl	8001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fe7b 	bl	80016a0 <_ZN13STM32Hardware5flushEv>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200001e0 	.word	0x200001e0

080019b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_UART_RxCpltCallback+0x20>)
 80019c2:	f000 faa1 	bl	8001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe2a 	bl	8001622 <_ZN13STM32Hardware10reset_rbufEv>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001e0 	.word	0x200001e0

080019dc <setup>:

void setup(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  nh.initNode();
 80019e0:	4818      	ldr	r0, [pc, #96]	; (8001a44 <setup+0x68>)
 80019e2:	f000 fa9d 	bl	8001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(pwm_l_sub);
 80019e6:	4918      	ldr	r1, [pc, #96]	; (8001a48 <setup+0x6c>)
 80019e8:	4816      	ldr	r0, [pc, #88]	; (8001a44 <setup+0x68>)
 80019ea:	f000 fab6 	bl	8001f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(pwm_r_sub);
 80019ee:	4917      	ldr	r1, [pc, #92]	; (8001a4c <setup+0x70>)
 80019f0:	4814      	ldr	r0, [pc, #80]	; (8001a44 <setup+0x68>)
 80019f2:	f000 fab2 	bl	8001f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(dir_l_sub);
 80019f6:	4916      	ldr	r1, [pc, #88]	; (8001a50 <setup+0x74>)
 80019f8:	4812      	ldr	r0, [pc, #72]	; (8001a44 <setup+0x68>)
 80019fa:	f000 fad9 	bl	8001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
  nh.subscribe(dir_r_sub);
 80019fe:	4915      	ldr	r1, [pc, #84]	; (8001a54 <setup+0x78>)
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <setup+0x68>)
 8001a02:	f000 fad5 	bl	8001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001a06:	2100      	movs	r1, #0
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <setup+0x7c>)
 8001a0a:	f002 fea7 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a0e:	2104      	movs	r1, #4
 8001a10:	4811      	ldr	r0, [pc, #68]	; (8001a58 <setup+0x7c>)
 8001a12:	f002 fea3 	bl	800475c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2140      	movs	r1, #64	; 0x40
 8001a1a:	4810      	ldr	r0, [pc, #64]	; (8001a5c <setup+0x80>)
 8001a1c:	f002 f92a 	bl	8003c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <setup+0x80>)
 8001a26:	f002 f925 	bl	8003c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	480b      	ldr	r0, [pc, #44]	; (8001a5c <setup+0x80>)
 8001a30:	f002 f920 	bl	8003c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2101      	movs	r1, #1
 8001a38:	4809      	ldr	r0, [pc, #36]	; (8001a60 <setup+0x84>)
 8001a3a:	f002 f91b 	bl	8003c74 <HAL_GPIO_WritePin>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001e0 	.word	0x200001e0
 8001a48:	20000b1c 	.word	0x20000b1c
 8001a4c:	20000b38 	.word	0x20000b38
 8001a50:	20000b54 	.word	0x20000b54
 8001a54:	20000b70 	.word	0x20000b70
 8001a58:	20000090 	.word	0x20000090
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400

08001a64 <loop>:

void loop(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001a68:	2108      	movs	r1, #8
 8001a6a:	4804      	ldr	r0, [pc, #16]	; (8001a7c <loop+0x18>)
 8001a6c:	f002 f91b 	bl	8003ca6 <HAL_GPIO_TogglePin>

  nh.spinOnce();
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <loop+0x1c>)
 8001a72:	f000 fac8 	bl	8002006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

//  HAL_Delay(1000);
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	200001e0 	.word	0x200001e0

08001a84 <_Z8pwm_l_cbRKN8std_msgs5UInt8E>:
int last_pwm_l_g = 0;
int last_pwm_r_g = 0;
bool last_dir_l_g = false;
bool last_dir_r_g = false;

void pwm_l_cb(const std_msgs::UInt8& msg){
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	unsigned char pwm_l = msg.data;//0~255
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	791b      	ldrb	r3, [r3, #4]
 8001a90:	73fb      	strb	r3, [r7, #15]
	int duty_l = pwm_l * (909.0f / 255.0f) + 909.0f;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001ad0 <_Z8pwm_l_cbRKN8std_msgs5UInt8E+0x4c>
 8001aa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001ad4 <_Z8pwm_l_cbRKN8std_msgs5UInt8E+0x50>
 8001aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	60bb      	str	r3, [r7, #8]
	pwm_l_g = pwm_l;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <_Z8pwm_l_cbRKN8std_msgs5UInt8E+0x54>)
 8001aba:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_l);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_Z8pwm_l_cbRKN8std_msgs5UInt8E+0x58>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40642424 	.word	0x40642424
 8001ad4:	44634000 	.word	0x44634000
 8001ad8:	20000b8c 	.word	0x20000b8c
 8001adc:	20000090 	.word	0x20000090

08001ae0 <_Z8pwm_r_cbRKN8std_msgs5UInt8E>:

void pwm_r_cb(const std_msgs::UInt8& msg){
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	unsigned char pwm_r = msg.data;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	791b      	ldrb	r3, [r3, #4]
 8001aec:	73fb      	strb	r3, [r7, #15]
	int duty_r = pwm_r * (909.0f / 255.0f) + 909.0f;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001b2c <_Z8pwm_r_cbRKN8std_msgs5UInt8E+0x4c>
 8001afc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b00:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001b30 <_Z8pwm_r_cbRKN8std_msgs5UInt8E+0x50>
 8001b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b0c:	ee17 3a90 	vmov	r3, s15
 8001b10:	60bb      	str	r3, [r7, #8]
	pwm_r_g = pwm_r;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <_Z8pwm_r_cbRKN8std_msgs5UInt8E+0x54>)
 8001b16:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_r);
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_Z8pwm_r_cbRKN8std_msgs5UInt8E+0x58>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40642424 	.word	0x40642424
 8001b30:	44634000 	.word	0x44634000
 8001b34:	20000b90 	.word	0x20000b90
 8001b38:	20000090 	.word	0x20000090

08001b3c <_Z8dir_l_cbRKN8std_msgs4BoolE>:

void dir_l_cb(const std_msgs::Bool& msg){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	bool dir_l = msg.data;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	791b      	ldrb	r3, [r3, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
	if(!last_dir_l_g&&dir_l){
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xa4>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <_Z8dir_l_cbRKN8std_msgs4BoolE+0x4e>
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <_Z8dir_l_cbRKN8std_msgs4BoolE+0x4e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 909.0f);
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xa8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f240 328d 	movw	r2, #909	; 0x38d
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 8001b68:	20c8      	movs	r0, #200	; 0xc8
 8001b6a:	f001 f9c7 	bl	8002efc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	481d      	ldr	r0, [pc, #116]	; (8001be8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xac>)
 8001b74:	f002 f87e 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	481a      	ldr	r0, [pc, #104]	; (8001be8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xac>)
 8001b7e:	f002 f879 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001b82:	20c8      	movs	r0, #200	; 0xc8
 8001b84:	f001 f9ba 	bl	8002efc <HAL_Delay>
 8001b88:	e01e      	b.n	8001bc8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0x8c>
	}
	else if(last_dir_l_g&&!dir_l){
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xa4>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01a      	beq.n	8001bc8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0x8c>
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d014      	beq.n	8001bc8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0x8c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 909.0f);
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xa8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f240 328d 	movw	r2, #909	; 0x38d
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 8001ba8:	20c8      	movs	r0, #200	; 0xc8
 8001baa:	f001 f9a7 	bl	8002efc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2140      	movs	r1, #64	; 0x40
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xac>)
 8001bb4:	f002 f85e 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2180      	movs	r1, #128	; 0x80
 8001bbc:	480a      	ldr	r0, [pc, #40]	; (8001be8 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xac>)
 8001bbe:	f002 f859 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001bc2:	20c8      	movs	r0, #200	; 0xc8
 8001bc4:	f001 f99a 	bl	8002efc <HAL_Delay>
	}
	last_dir_l_g = dir_l;
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xa4>)
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	7013      	strb	r3, [r2, #0]
	last_pwm_l_g = pwm_l_g;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_Z8dir_l_cbRKN8std_msgs4BoolE+0xb0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <_Z8dir_l_cbRKN8std_msgs4BoolE+0xb4>)
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000b9c 	.word	0x20000b9c
 8001be4:	20000090 	.word	0x20000090
 8001be8:	40020000 	.word	0x40020000
 8001bec:	20000b8c 	.word	0x20000b8c
 8001bf0:	20000b94 	.word	0x20000b94

08001bf4 <_Z8dir_r_cbRKN8std_msgs4BoolE>:

void dir_r_cb(const std_msgs::Bool& msg){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	bool dir_r = msg.data;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	73fb      	strb	r3, [r7, #15]
	if(!last_dir_r_g&&dir_r){
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xa4>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	f083 0301 	eor.w	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x4e>
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x4e>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 909.0f);
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <_Z8dir_r_cbRKN8std_msgs4BoolE+0xa8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f240 328d 	movw	r2, #909	; 0x38d
 8001c1e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(200);
 8001c20:	20c8      	movs	r0, #200	; 0xc8
 8001c22:	f001 f96b 	bl	8002efc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2110      	movs	r1, #16
 8001c2a:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xac>)
 8001c2c:	f002 f822 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2101      	movs	r1, #1
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xb0>)
 8001c36:	f002 f81d 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001c3a:	20c8      	movs	r0, #200	; 0xc8
 8001c3c:	f001 f95e 	bl	8002efc <HAL_Delay>
 8001c40:	e01e      	b.n	8001c80 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x8c>
	}
	else if(last_dir_r_g&&!dir_r){
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xa4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01a      	beq.n	8001c80 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x8c>
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d014      	beq.n	8001c80 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x8c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 909.0f);
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_Z8dir_r_cbRKN8std_msgs4BoolE+0xa8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f240 328d 	movw	r2, #909	; 0x38d
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(200);
 8001c60:	20c8      	movs	r0, #200	; 0xc8
 8001c62:	f001 f94b 	bl	8002efc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2110      	movs	r1, #16
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xac>)
 8001c6c:	f002 f802 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2101      	movs	r1, #1
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xb0>)
 8001c76:	f001 fffd 	bl	8003c74 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8001c7a:	20c8      	movs	r0, #200	; 0xc8
 8001c7c:	f001 f93e 	bl	8002efc <HAL_Delay>
	}
	last_dir_r_g = dir_r;
 8001c80:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xa4>)
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	7013      	strb	r3, [r2, #0]
	last_pwm_r_g = pwm_r_g;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_Z8dir_r_cbRKN8std_msgs4BoolE+0xb4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <_Z8dir_r_cbRKN8std_msgs4BoolE+0xb8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000b9d 	.word	0x20000b9d
 8001c9c:	20000090 	.word	0x20000090
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	20000b90 	.word	0x20000b90
 8001cac:	20000b98 	.word	0x20000b98

08001cb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d80d      	bhi.n	8001ce0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	fa22 f103 	lsr.w	r1, r2, r3
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2ca      	uxtb	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e7ee      	b.n	8001cbe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d811      	bhi.n	8001d2a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	440a      	add	r2, r1
 8001d10:	7812      	ldrb	r2, [r2, #0]
 8001d12:	4611      	mov	r1, r2
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	00d2      	lsls	r2, r2, #3
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e7ea      	b.n	8001d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	08006c18 	.word	0x08006c18

08001d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ffe8 	bl	8001d38 <_ZN3ros15NodeHandleBase_C1Ev>
 8001d68:	4a3a      	ldr	r2, [pc, #232]	; (8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3304      	adds	r3, #4
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fc2e 	bl	80015d4 <_ZN13STM32HardwareC1Ev>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f942 	bl	8001010 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	2b18      	cmp	r3, #24
 8001d94:	d80b      	bhi.n	8001dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3301      	adds	r3, #1
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e7f0      	b.n	8001d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b18      	cmp	r3, #24
 8001db6:	d80a      	bhi.n	8001dce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e7f1      	b.n	8001db2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd8:	d20a      	bcs.n	8001df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e7f0      	b.n	8001dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfa:	d20a      	bcs.n	8001e12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4413      	add	r3, r2
 8001e02:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e7f0      	b.n	8001df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	08006bbc 	.word	0x08006bbc

08001e58 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	08006c00 	.word	0x08006c00

08001e78 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ffe5 	bl	8001e58 <_ZN3ros11Subscriber_C1Ev>
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	330c      	adds	r3, #12
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fcb1 	bl	8001800 <_ZN8std_msgs5UInt8C1Ev>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	609a      	str	r2, [r3, #8]
  };
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	08006ba4 	.word	0x08006ba4

08001ec0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ffc1 	bl	8001e58 <_ZN3ros11Subscriber_C1Ev>
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fced 	bl	80018c0 <_ZN8std_msgs4BoolC1Ev>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	609a      	str	r2, [r3, #8]
  };
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	08006b8c 	.word	0x08006b8c

08001f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3304      	adds	r3, #4
  }
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fb6d 	bl	800160c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b18      	cmp	r3, #24
 8001f6c:	dc19      	bgt.n	8001fa2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	605a      	str	r2, [r3, #4]
        return true;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e004      	b.n	8001fa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e7e2      	b.n	8001f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001fa2:	2300      	movs	r3, #0
  }
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b18      	cmp	r3, #24
 8001fc2:	dc19      	bgt.n	8001ff8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	605a      	str	r2, [r3, #4]
        return true;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e004      	b.n	8001ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e7e2      	b.n	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0xe>
    return false;
 8001ff8:	2300      	movs	r3, #0
  }
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fbe8 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 8002018:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002028:	4293      	cmp	r3, r2
 800202a:	d903      	bls.n	8002034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	429a      	cmp	r2, r3
 8002048:	d903      	bls.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002058:	2b00      	cmp	r3, #0
 800205a:	d014      	beq.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fbc1 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002072:	429a      	cmp	r2, r3
 8002074:	bf8c      	ite	hi
 8002076:	2301      	movhi	r3, #1
 8002078:	2300      	movls	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002080:	f06f 0301 	mvn.w	r3, #1
 8002084:	e194      	b.n	80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fada 	bl	8001644 <_ZN13STM32Hardware4readEv>
 8002090:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f2c0 8174 	blt.w	8002382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020b0:	2b07      	cmp	r3, #7
 80020b2:	d11e      	bne.n	80020f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	b2d1      	uxtb	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	460a      	mov	r2, r1
 80020cc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1b4      	bne.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2208      	movs	r2, #8
 80020ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020f0:	e7af      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d128      	bne.n	800214e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d10d      	bne.n	800211e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f103 0214 	add.w	r2, r3, #20
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800211c:	e799      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb60 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	bf8c      	ite	hi
 8002136:	2301      	movhi	r3, #1
 8002138:	2300      	movls	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d088      	beq.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002148:	f06f 0301 	mvn.w	r3, #1
 800214c:	e130      	b.n	80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002154:	2b01      	cmp	r3, #1
 8002156:	d118      	bne.n	800218a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2bfe      	cmp	r3, #254	; 0xfe
 800215c:	d107      	bne.n	800216e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800216c:	e771      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f af68 	bne.w	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f918 	bl	80023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002188:	e763      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002190:	2b02      	cmp	r3, #2
 8002192:	d113      	bne.n	80021bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80021ba:	e74a      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d110      	bne.n	80021e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	441a      	add	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80021e6:	e734      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d116      	bne.n	8002220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80021f8:	425a      	negs	r2, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	bf58      	it	pl
 8002200:	4253      	negpl	r3, r2
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d107      	bne.n	8002216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002214:	e71d      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800221e:	e718      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002226:	2b05      	cmp	r3, #5
 8002228:	d10f      	bne.n	800224a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002248:	e703      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002250:	2b06      	cmp	r3, #6
 8002252:	d117      	bne.n	8002284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	441a      	add	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2207      	movs	r2, #7
 800226a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aeec 	bne.w	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2208      	movs	r2, #8
 800227e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002282:	e6e6      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800228a:	2b08      	cmp	r3, #8
 800228c:	f47f aee1 	bne.w	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800229e:	425a      	negs	r2, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	bf58      	it	pl
 80022a6:	4253      	negpl	r3, r2
 80022a8:	2bff      	cmp	r3, #255	; 0xff
 80022aa:	f47f aed2 	bne.w	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d110      	bne.n	80022da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f87d 	bl	80023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f898 	bl	80023f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022d8:	e06a      	b.n	80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022e0:	2b0a      	cmp	r3, #10
 80022e2:	d107      	bne.n	80022f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f961 	bl	80025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80022f2:	e6ae      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d10e      	bne.n	800231c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fe ffb4 	bl	800127a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800231a:	e69a      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002322:	2b0b      	cmp	r3, #11
 8002324:	d104      	bne.n	8002330 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800232e:	e690      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002336:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f43f ae84 	beq.w	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002350:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f202 2222 	addw	r2, r2, #546	; 0x222
 800235a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002364:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800237c:	4611      	mov	r1, r2
 800237e:	4798      	blx	r3
    while (true)
 8002380:	e667      	b.n	8002052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8002382:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00f      	beq.n	80023ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800239c:	4293      	cmp	r3, r2
 800239e:	d906      	bls.n	80023ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f809 	bl	80023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80023ae:	2300      	movs	r3, #0
  }
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fabf 	bl	8000948 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f107 020c 	add.w	r2, r7, #12
 80023d4:	210a      	movs	r1, #10
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	4798      	blx	r3
    rt_time = hardware_.time();
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fa02 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80023ec:	bf00      	nop
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fb91 	bl	8000b28 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2b18      	cmp	r3, #24
 800240e:	dc63      	bgt.n	80024d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d056      	beq.n	80024d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	b29b      	uxth	r3, r3
 8002434:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3308      	adds	r3, #8
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4608      	mov	r0, r1
 8002470:	4798      	blx	r3
 8002472:	4603      	mov	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4608      	mov	r0, r1
 800249e:	4798      	blx	r3
 80024a0:	4603      	mov	r3, r0
 80024a2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80024a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a8:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681c      	ldr	r4, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f868 	bl	8001594 <_ZN3ros9Publisher15getEndpointTypeEv>
 80024c4:	4601      	mov	r1, r0
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	461a      	mov	r2, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3301      	adds	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e798      	b.n	800240a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	2b18      	cmp	r3, #24
 80024e0:	dc5f      	bgt.n	80025a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80024ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d053      	beq.n	800259a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80024fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	b29b      	uxth	r3, r3
 8002502:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	f202 2222 	addw	r2, r2, #546	; 0x222
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	f202 2222 	addw	r2, r2, #546	; 0x222
 800251c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002524:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3308      	adds	r3, #8
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4608      	mov	r0, r1
 8002534:	4798      	blx	r3
 8002536:	4603      	mov	r3, r0
 8002538:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002542:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4608      	mov	r0, r1
 800255a:	4798      	blx	r3
 800255c:	4603      	mov	r3, r0
 800255e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002564:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3304      	adds	r3, #4
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4608      	mov	r0, r1
 800258c:	4798      	blx	r3
 800258e:	4601      	mov	r1, r0
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	461a      	mov	r2, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	3301      	adds	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	e79c      	b.n	80024dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80025aa:	bf00      	nop
 80025ac:	372c      	adds	r7, #44	; 0x2c
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
	...

080025b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe f9c0 	bl	8000948 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f90b 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fa1f 	bl	8000a28 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4915      	ldr	r1, [pc, #84]	; (8002644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80025f0:	fba1 1303 	umull	r1, r3, r1, r3
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002600:	fba3 0302 	umull	r0, r3, r3, r2
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260a:	fb00 f303 	mul.w	r3, r0, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	440b      	add	r3, r1
 8002618:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8a6 	bl	8002774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff f8db 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	10624dd3 	.word	0x10624dd3
 8002648:	000f4240 	.word	0x000f4240

0800264c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b63      	cmp	r3, #99	; 0x63
 800265c:	dd09      	ble.n	8002672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800266e:	2300      	movs	r3, #0
 8002670:	e079      	b.n	8002766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800267e:	3207      	adds	r2, #7
 8002680:	4611      	mov	r1, r2
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
 8002686:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	22ff      	movs	r2, #255	; 0xff
 800268c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	22fe      	movs	r2, #254	; 0xfe
 8002694:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80026be:	4413      	add	r3, r2
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	b21b      	sxth	r3, r3
 80026da:	121b      	asrs	r3, r3, #8
 80026dc:	b21b      	sxth	r3, r3
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80026ea:	2305      	movs	r3, #5
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3306      	adds	r3, #6
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dc0d      	bgt.n	8002714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4413      	add	r3, r2
 80026fe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4413      	add	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3301      	adds	r3, #1
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	e7ec      	b.n	80026ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3307      	adds	r3, #7
 8002718:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	425a      	negs	r2, r3
 800271e:	b2db      	uxtb	r3, r3
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	bf58      	it	pl
 8002724:	4253      	negpl	r3, r2
 8002726:	b2da      	uxtb	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1c59      	adds	r1, r3, #1
 800272c:	6179      	str	r1, [r7, #20]
 800272e:	43d2      	mvns	r2, r2
 8002730:	b2d1      	uxtb	r1, r2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4413      	add	r3, r2
 8002736:	460a      	mov	r2, r1
 8002738:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002742:	dc0a      	bgt.n	800275a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1d18      	adds	r0, r3, #4
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4619      	mov	r1, r3
 8002752:	f7ff f803 	bl	800175c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	e005      	b.n	8002766 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800275a:	4905      	ldr	r1, [pc, #20]	; (8002770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f849 	bl	80027f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	08006b0c 	.word	0x08006b0c

08002774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f830 	bl	80017e8 <_ZN13STM32Hardware4timeEv>
 8002788:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4915      	ldr	r1, [pc, #84]	; (80027e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8002792:	fba1 1303 	umull	r1, r3, r1, r3
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80027aa:	fba3 0302 	umull	r0, r3, r3, r2
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027b4:	fb00 f303 	mul.w	r3, r0, r3
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	1aca      	subs	r2, r1, r3
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80027c4:	4413      	add	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7fd fe84 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	10624dd3 	.word	0x10624dd3
 80027ec:	000f4240 	.word	0x000f4240
 80027f0:	3b9aca00 	.word	0x3b9aca00

080027f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	2103      	movs	r1, #3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f804 	bl	8002810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	460b      	mov	r3, r1
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fb44 	bl	8000eb0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f107 0214 	add.w	r2, r7, #20
 800283a:	2107      	movs	r1, #7
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	4798      	blx	r3
  }
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <_Z41__static_initialization_and_destruction_0ii>:
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d11f      	bne.n	8002898 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285e:	4293      	cmp	r3, r2
 8002860:	d11a      	bne.n	8002898 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8002862:	480f      	ldr	r0, [pc, #60]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002864:	f7ff fa78 	bl	8001d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::UInt8> pwm_l_sub("pwm_l", &pwm_l_cb);
 8002868:	2301      	movs	r3, #1
 800286a:	4a0e      	ldr	r2, [pc, #56]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800286c:	490e      	ldr	r1, [pc, #56]	; (80028a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800286e:	480f      	ldr	r0, [pc, #60]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002870:	f7ff fb02 	bl	8001e78 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> pwm_r_sub("pwm_r", &pwm_r_cb);
 8002874:	2301      	movs	r3, #1
 8002876:	4a0e      	ldr	r2, [pc, #56]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800287a:	480f      	ldr	r0, [pc, #60]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800287c:	f7ff fafc 	bl	8001e78 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> dir_l_sub("dir_l", &dir_l_cb);
 8002880:	2301      	movs	r3, #1
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002886:	480f      	ldr	r0, [pc, #60]	; (80028c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002888:	f7ff fb1a 	bl	8001ec0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> dir_r_sub("dir_r", &dir_r_cb);
 800288c:	2301      	movs	r3, #1
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002892:	480f      	ldr	r0, [pc, #60]	; (80028d0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002894:	f7ff fb14 	bl	8001ec0 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	200001e0 	.word	0x200001e0
 80028a4:	08001a85 	.word	0x08001a85
 80028a8:	08006b48 	.word	0x08006b48
 80028ac:	20000b1c 	.word	0x20000b1c
 80028b0:	08001ae1 	.word	0x08001ae1
 80028b4:	08006b50 	.word	0x08006b50
 80028b8:	20000b38 	.word	0x20000b38
 80028bc:	08001b3d 	.word	0x08001b3d
 80028c0:	08006b58 	.word	0x08006b58
 80028c4:	20000b54 	.word	0x20000b54
 80028c8:	08001bf5 	.word	0x08001bf5
 80028cc:	08006b60 	.word	0x08006b60
 80028d0:	20000b70 	.word	0x20000b70

080028d4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	330c      	adds	r3, #12
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff f81a 	bl	800191e <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	320c      	adds	r2, #12
 80028f2:	4610      	mov	r0, r2
 80028f4:	4798      	blx	r3
  }
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
  }
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	330c      	adds	r3, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f81a 	bl	800195c <_ZN8std_msgs4Bool7getTypeEv>
 8002928:	4603      	mov	r3, r0
  }
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	330c      	adds	r3, #12
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f81a 	bl	8001978 <_ZN8std_msgs4Bool6getMD5Ev>
 8002944:	4603      	mov	r3, r0
  }
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	330c      	adds	r3, #12
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe ff7b 	bl	800185a <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	320c      	adds	r2, #12
 800296c:	4610      	mov	r0, r2
 800296e:	4798      	blx	r3
  }
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
  }
 8002984:	4618      	mov	r0, r3
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	330c      	adds	r3, #12
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe ff73 	bl	8001888 <_ZN8std_msgs5UInt87getTypeEv>
 80029a2:	4603      	mov	r3, r0
  }
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	330c      	adds	r3, #12
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe ff73 	bl	80018a4 <_ZN8std_msgs5UInt86getMD5Ev>
 80029be:	4603      	mov	r3, r0
  }
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
    return configured_;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <_GLOBAL__sub_I_nh>:
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff ff2c 	bl	8002848 <_Z41__static_initialization_and_destruction_0ii>
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4a0f      	ldr	r2, [pc, #60]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_MspInit+0x4c>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a32:	2007      	movs	r0, #7
 8002a34:	f000 fb56 	bl	80030e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d10d      	bne.n	8002a72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_TIM_Base_MspInit+0x3c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d11d      	bne.n	8002ae2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_TIM_MspPostInit+0x68>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_TIM_MspPostInit+0x68>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_TIM_MspPostInit+0x68>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002ac2:	2322      	movs	r3, #34	; 0x22
 8002ac4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	4619      	mov	r1, r3
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <HAL_TIM_MspPostInit+0x6c>)
 8002ade:	f000 ff45 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020000 	.word	0x40020000

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	; (8002c44 <HAL_UART_MspInit+0x150>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f040 8091 	bne.w	8002c3a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b4a      	ldr	r3, [pc, #296]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	4a49      	ldr	r2, [pc, #292]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	6413      	str	r3, [r2, #64]	; 0x40
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_UART_MspInit+0x154>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b50:	230c      	movs	r3, #12
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b60:	2307      	movs	r3, #7
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4838      	ldr	r0, [pc, #224]	; (8002c4c <HAL_UART_MspInit+0x158>)
 8002b6c:	f000 fefe 	bl	800396c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b72:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_UART_MspInit+0x160>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b76:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b2d      	ldr	r3, [pc, #180]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bb2:	4827      	ldr	r0, [pc, #156]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bb4:	f000 fad8 	bl	8003168 <HAL_DMA_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002bbe:	f7fd fe9d 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <HAL_UART_MspInit+0x15c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <HAL_UART_MspInit+0x168>)
 8002bd2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002bd4:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bda:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002c0e:	4812      	ldr	r0, [pc, #72]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002c10:	f000 faaa 	bl	8003168 <HAL_DMA_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002c1a:	f7fd fe6f 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34
 8002c24:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_UART_MspInit+0x164>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2026      	movs	r0, #38	; 0x26
 8002c30:	f000 fa63 	bl	80030fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c34:	2026      	movs	r0, #38	; 0x26
 8002c36:	f000 fa7c 	bl	8003132 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	; 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40004400 	.word	0x40004400
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	2000011c 	.word	0x2000011c
 8002c54:	40026088 	.word	0x40026088
 8002c58:	2000017c 	.word	0x2000017c
 8002c5c:	400260a0 	.word	0x400260a0

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <NMI_Handler+0x4>

08002c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler+0x4>

08002c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <MemManage_Handler+0x4>

08002c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <BusFault_Handler+0x4>

08002c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <UsageFault_Handler+0x4>

08002c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cac:	f000 f906 	bl	8002ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <DMA1_Stream5_IRQHandler+0x10>)
 8002cba:	f000 fbed 	bl	8003498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000011c 	.word	0x2000011c

08002cc8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <DMA1_Stream6_IRQHandler+0x10>)
 8002cce:	f000 fbe3 	bl	8003498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000017c 	.word	0x2000017c

08002cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <USART2_IRQHandler+0x10>)
 8002ce2:	f002 fbab 	bl	800543c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200000d8 	.word	0x200000d8

08002cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
	return 1;
 8002cf4:	2301      	movs	r3, #1
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_kill>:

int _kill(int pid, int sig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d0a:	f003 fc93 	bl	8006634 <__errno>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2216      	movs	r2, #22
 8002d12:	601a      	str	r2, [r3, #0]
	return -1;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_exit>:

void _exit (int status)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ffe7 	bl	8002d00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d32:	e7fe      	b.n	8002d32 <_exit+0x12>

08002d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <_sbrk+0x5c>)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <_sbrk+0x60>)
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <_sbrk+0x64>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <_sbrk+0x64>)
 8002d52:	4a12      	ldr	r2, [pc, #72]	; (8002d9c <_sbrk+0x68>)
 8002d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d56:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d207      	bcs.n	8002d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d64:	f003 fc66 	bl	8006634 <__errno>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d72:	e009      	b.n	8002d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <_sbrk+0x64>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <_sbrk+0x64>)
 8002d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d86:	68fb      	ldr	r3, [r7, #12]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20018000 	.word	0x20018000
 8002d94:	00000400 	.word	0x00000400
 8002d98:	20000ba0 	.word	0x20000ba0
 8002d9c:	20000bb8 	.word	0x20000bb8

08002da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <SystemInit+0x20>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <SystemInit+0x20>)
 8002dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc8:	480d      	ldr	r0, [pc, #52]	; (8002e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dca:	490e      	ldr	r1, [pc, #56]	; (8002e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd0:	e002      	b.n	8002dd8 <LoopCopyDataInit>

08002dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd6:	3304      	adds	r3, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ddc:	d3f9      	bcc.n	8002dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002de0:	4c0b      	ldr	r4, [pc, #44]	; (8002e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de4:	e001      	b.n	8002dea <LoopFillZerobss>

08002de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de8:	3204      	adds	r2, #4

08002dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dec:	d3fb      	bcc.n	8002de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dee:	f7ff ffd7 	bl	8002da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df2:	f003 fc25 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002df6:	f7fd fba3 	bl	8000540 <main>
  bx  lr    
 8002dfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002e08:	08006cd0 	.word	0x08006cd0
  ldr r2, =_sbss
 8002e0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002e10:	20000bb8 	.word	0x20000bb8

08002e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e14:	e7fe      	b.n	8002e14 <ADC_IRQHandler>
	...

08002e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_Init+0x40>)
 8002e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_Init+0x40>)
 8002e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_Init+0x40>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_Init+0x40>)
 8002e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e40:	2003      	movs	r0, #3
 8002e42:	f000 f94f 	bl	80030e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f000 f808 	bl	8002e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e4c:	f7ff fdd2 	bl	80029f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00

08002e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_InitTick+0x54>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_InitTick+0x58>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f967 	bl	800314e <HAL_SYSTICK_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00e      	b.n	8002ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d80a      	bhi.n	8002ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e90:	2200      	movs	r2, #0
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e98:	f000 f92f 	bl	80030fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <HAL_InitTick+0x5c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x20>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	20000ba4 	.word	0x20000ba4

08002ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_GetTick+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000ba4 	.word	0x20000ba4

08002efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff ffee 	bl	8002ee4 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f14:	d005      	beq.n	8002f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_Delay+0x44>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f22:	bf00      	nop
 8002f24:	f7ff ffde 	bl	8002ee4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d8f7      	bhi.n	8002f24 <HAL_Delay+0x28>
  {
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000008 	.word	0x20000008

08002f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f60:	4013      	ands	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f76:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <__NVIC_SetPriorityGrouping+0x44>)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	60d3      	str	r3, [r2, #12]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	f003 0307 	and.w	r3, r3, #7
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db0b      	blt.n	8002fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	f003 021f 	and.w	r2, r3, #31
 8002fc0:	4907      	ldr	r1, [pc, #28]	; (8002fe0 <__NVIC_EnableIRQ+0x38>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2001      	movs	r0, #1
 8002fca:	fa00 f202 	lsl.w	r2, r0, r2
 8002fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	; (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	; (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	; 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	; 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
	...

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b0:	d301      	bcc.n	80030b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00f      	b.n	80030d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <SysTick_Config+0x40>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030be:	210f      	movs	r1, #15
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c4:	f7ff ff8e 	bl	8002fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <SysTick_Config+0x40>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <SysTick_Config+0x40>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010

080030e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff29 	bl	8002f44 <__NVIC_SetPriorityGrouping>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800310c:	f7ff ff3e 	bl	8002f8c <__NVIC_GetPriorityGrouping>
 8003110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff8e 	bl	8003038 <NVIC_EncodePriority>
 800311c:	4602      	mov	r2, r0
 800311e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff5d 	bl	8002fe4 <__NVIC_SetPriority>
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff31 	bl	8002fa8 <__NVIC_EnableIRQ>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff ffa2 	bl	80030a0 <SysTick_Config>
 800315c:	4603      	mov	r3, r0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff feb6 	bl	8002ee4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e099      	b.n	80032b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a4:	e00f      	b.n	80031c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a6:	f7ff fe9d 	bl	8002ee4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d908      	bls.n	80031c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e078      	b.n	80032b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e8      	bne.n	80031a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <HAL_DMA_Init+0x158>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b04      	cmp	r3, #4
 800321e:	d107      	bne.n	8003230 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	4313      	orrs	r3, r2
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0307 	bic.w	r3, r3, #7
 8003246:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b04      	cmp	r3, #4
 8003258:	d117      	bne.n	800328a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fb01 	bl	8003874 <DMA_CheckFifoParam>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003286:	2301      	movs	r3, #1
 8003288:	e016      	b.n	80032b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fab8 	bl	8003808 <DMA_CalcBaseAndBitshift>
 8003298:	4603      	mov	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	223f      	movs	r2, #63	; 0x3f
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	f010803f 	.word	0xf010803f

080032c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_DMA_Start_IT+0x26>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e040      	b.n	800336c <HAL_DMA_Start_IT+0xa8>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d12f      	bne.n	800335e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fa4a 	bl	80037ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	223f      	movs	r2, #63	; 0x3f
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0216 	orr.w	r2, r2, #22
 8003332:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e005      	b.n	800336a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003382:	f7ff fdaf 	bl	8002ee4 <HAL_GetTick>
 8003386:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d008      	beq.n	80033a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e052      	b.n	800344c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0216 	bic.w	r2, r2, #22
 80033b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_DMA_Abort+0x62>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f6:	e013      	b.n	8003420 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f8:	f7ff fd74 	bl	8002ee4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b05      	cmp	r3, #5
 8003404:	d90c      	bls.n	8003420 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e015      	b.n	800344c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e4      	bne.n	80033f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	223f      	movs	r2, #63	; 0x3f
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d004      	beq.n	8003472 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e00c      	b.n	800348c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2205      	movs	r2, #5
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034a4:	4b8e      	ldr	r3, [pc, #568]	; (80036e0 <HAL_DMA_IRQHandler+0x248>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a8e      	ldr	r2, [pc, #568]	; (80036e4 <HAL_DMA_IRQHandler+0x24c>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c2:	2208      	movs	r2, #8
 80034c4:	409a      	lsls	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01a      	beq.n	8003504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d013      	beq.n	8003504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0204 	bic.w	r2, r2, #4
 80034ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	2208      	movs	r2, #8
 80034f2:	409a      	lsls	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	2204      	movs	r2, #4
 8003540:	409a      	lsls	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d012      	beq.n	8003570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355c:	2204      	movs	r2, #4
 800355e:	409a      	lsls	r2, r3
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2210      	movs	r2, #16
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d043      	beq.n	8003608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d03c      	beq.n	8003608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003592:	2210      	movs	r2, #16
 8003594:	409a      	lsls	r2, r3
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d018      	beq.n	80035da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d024      	beq.n	8003608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
 80035c6:	e01f      	b.n	8003608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e016      	b.n	8003608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0208 	bic.w	r2, r2, #8
 80035f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	2220      	movs	r2, #32
 800360e:	409a      	lsls	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 808f 	beq.w	8003738 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8087 	beq.w	8003738 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2220      	movs	r2, #32
 8003630:	409a      	lsls	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b05      	cmp	r3, #5
 8003640:	d136      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0216 	bic.w	r2, r2, #22
 8003650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_DMA_IRQHandler+0x1da>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0208 	bic.w	r2, r2, #8
 8003680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	223f      	movs	r2, #63	; 0x3f
 8003688:	409a      	lsls	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d07e      	beq.n	80037a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
        }
        return;
 80036ae:	e079      	b.n	80037a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10d      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
 80036dc:	e02c      	b.n	8003738 <HAL_DMA_IRQHandler+0x2a0>
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000
 80036e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d023      	beq.n	8003738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
 80036f8:	e01e      	b.n	8003738 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10f      	bne.n	8003728 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0210 	bic.w	r2, r2, #16
 8003716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	2b00      	cmp	r3, #0
 800373e:	d032      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d022      	beq.n	8003792 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2205      	movs	r2, #5
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d307      	bcc.n	8003780 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f2      	bne.n	8003764 <HAL_DMA_IRQHandler+0x2cc>
 800377e:	e000      	b.n	8003782 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003780:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
 80037a2:	e000      	b.n	80037a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80037a4:	bf00      	nop
    }
  }
}
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d108      	bne.n	80037ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ea:	e007      	b.n	80037fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	60da      	str	r2, [r3, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	3b10      	subs	r3, #16
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <DMA_CalcBaseAndBitshift+0x64>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <DMA_CalcBaseAndBitshift+0x68>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d909      	bls.n	800384a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
 8003848:	e007      	b.n	800385a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	aaaaaaab 	.word	0xaaaaaaab
 8003870:	08006cb4 	.word	0x08006cb4

08003874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11f      	bne.n	80038ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d856      	bhi.n	8003942 <DMA_CheckFifoParam+0xce>
 8003894:	a201      	add	r2, pc, #4	; (adr r2, 800389c <DMA_CheckFifoParam+0x28>)
 8003896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389a:	bf00      	nop
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	080038bf 	.word	0x080038bf
 80038a4:	080038ad 	.word	0x080038ad
 80038a8:	08003943 	.word	0x08003943
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d046      	beq.n	8003946 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038bc:	e043      	b.n	8003946 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038c6:	d140      	bne.n	800394a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038cc:	e03d      	b.n	800394a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d6:	d121      	bne.n	800391c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d837      	bhi.n	800394e <DMA_CheckFifoParam+0xda>
 80038de:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <DMA_CheckFifoParam+0x70>)
 80038e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e4:	080038f5 	.word	0x080038f5
 80038e8:	080038fb 	.word	0x080038fb
 80038ec:	080038f5 	.word	0x080038f5
 80038f0:	0800390d 	.word	0x0800390d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      break;
 80038f8:	e030      	b.n	800395c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d025      	beq.n	8003952 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390a:	e022      	b.n	8003952 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003914:	d11f      	bne.n	8003956 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800391a:	e01c      	b.n	8003956 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d903      	bls.n	800392a <DMA_CheckFifoParam+0xb6>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d003      	beq.n	8003930 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003928:	e018      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
      break;
 800392e:	e015      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      break;
 8003940:	e00b      	b.n	800395a <DMA_CheckFifoParam+0xe6>
      break;
 8003942:	bf00      	nop
 8003944:	e00a      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
 8003948:	e008      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800394a:	bf00      	nop
 800394c:	e006      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
 8003950:	e004      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;   
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <DMA_CheckFifoParam+0xe8>
      break;
 800395a:	bf00      	nop
    }
  } 
  
  return status; 
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	; 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	e159      	b.n	8003c3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f040 8148 	bne.w	8003c36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d005      	beq.n	80039be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d130      	bne.n	8003a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	2203      	movs	r2, #3
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f4:	2201      	movs	r2, #1
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 0201 	and.w	r2, r3, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d017      	beq.n	8003a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4013      	ands	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d123      	bne.n	8003ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	08da      	lsrs	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3208      	adds	r2, #8
 8003a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	220f      	movs	r2, #15
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	08da      	lsrs	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3208      	adds	r2, #8
 8003aaa:	69b9      	ldr	r1, [r7, #24]
 8003aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a2 	beq.w	8003c36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	4b57      	ldr	r3, [pc, #348]	; (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	4a56      	ldr	r2, [pc, #344]	; (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b00:	6453      	str	r3, [r2, #68]	; 0x44
 8003b02:	4b54      	ldr	r3, [pc, #336]	; (8003c54 <HAL_GPIO_Init+0x2e8>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b0e:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_GPIO_Init+0x2ec>)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	3302      	adds	r3, #2
 8003b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a49      	ldr	r2, [pc, #292]	; (8003c5c <HAL_GPIO_Init+0x2f0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d019      	beq.n	8003b6e <HAL_GPIO_Init+0x202>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a48      	ldr	r2, [pc, #288]	; (8003c60 <HAL_GPIO_Init+0x2f4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0x1fe>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a47      	ldr	r2, [pc, #284]	; (8003c64 <HAL_GPIO_Init+0x2f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00d      	beq.n	8003b66 <HAL_GPIO_Init+0x1fa>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a46      	ldr	r2, [pc, #280]	; (8003c68 <HAL_GPIO_Init+0x2fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d007      	beq.n	8003b62 <HAL_GPIO_Init+0x1f6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a45      	ldr	r2, [pc, #276]	; (8003c6c <HAL_GPIO_Init+0x300>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_GPIO_Init+0x1f2>
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	e008      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b5e:	2307      	movs	r3, #7
 8003b60:	e006      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b62:	2303      	movs	r3, #3
 8003b64:	e004      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e002      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	f002 0203 	and.w	r2, r2, #3
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	4093      	lsls	r3, r2
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b80:	4935      	ldr	r1, [pc, #212]	; (8003c58 <HAL_GPIO_Init+0x2ec>)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	3302      	adds	r3, #2
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b8e:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb2:	4a2f      	ldr	r2, [pc, #188]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bdc:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c06:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c30:	4a0f      	ldr	r2, [pc, #60]	; (8003c70 <HAL_GPIO_Init+0x304>)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b0f      	cmp	r3, #15
 8003c40:	f67f aea2 	bls.w	8003988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40013800 	.word	0x40013800
 8003c5c:	40020000 	.word	0x40020000
 8003c60:	40020400 	.word	0x40020400
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020c00 	.word	0x40020c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c84:	787b      	ldrb	r3, [r7, #1]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c90:	e003      	b.n	8003c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	041a      	lsls	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	619a      	str	r2, [r3, #24]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cb8:	887a      	ldrh	r2, [r7, #2]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	041a      	lsls	r2, r3, #16
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	43d9      	mvns	r1, r3
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e267      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e242      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6f      	ldr	r2, [pc, #444]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6c      	ldr	r2, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b69      	ldr	r3, [pc, #420]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7ff f8a6 	bl	8002ee4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7ff f8a2 	bl	8002ee4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e207      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7ff f892 	bl	8002ee4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7ff f88e 	bl	8002ee4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1f3      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c7      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7ff f847 	bl	8002ee4 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7ff f843 	bl	8002ee4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a8      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7ff f826 	bl	8002ee4 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7ff f822 	bl	8002ee4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e187      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7ff f806 	bl	8002ee4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003edc:	f7ff f802 	bl	8002ee4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e167      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe ffef 	bl	8002ee4 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe ffeb 	bl	8002ee4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e150      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe ffab 	bl	8002ee4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fe ffa7 	bl	8002ee4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e10c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x30c>
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a54      	ldr	r2, [pc, #336]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fe ff6c 	bl	8002ee4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fe ff68 	bl	8002ee4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0cb      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b49      	ldr	r3, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x334>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fe ff56 	bl	8002ee4 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe ff52 	bl	8002ee4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0b5      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d05c      	beq.n	8004140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d141      	bne.n	8004112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe ff26 	bl	8002ee4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe ff22 	bl	8002ee4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e087      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fefb 	bl	8002ee4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fef7 	bl	8002ee4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x416>
 8004110:	e054      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe fee4 	bl	8002ee4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fe fee0 	bl	8002ee4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e045      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x444>
 800413e:	e03d      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e038      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d028      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d121      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90c      	bls.n	8004208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800422a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d044      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e067      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4934      	ldr	r1, [pc, #208]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fe fe12 	bl	8002ee4 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fe fe0e 	bl	8002ee4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d20c      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fd72 	bl	8002e5c <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00
 8004388:	40023800 	.word	0x40023800
 800438c:	08006c9c 	.word	0x08006c9c
 8004390:	20000000 	.word	0x20000000
 8004394:	20000004 	.word	0x20000004

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b094      	sub	sp, #80	; 0x50
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	2300      	movs	r3, #0
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	2300      	movs	r3, #0
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b0:	4b79      	ldr	r3, [pc, #484]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 80e1 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x34>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ca:	e0db      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b73      	ldr	r3, [pc, #460]	; (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043d0:	e0db      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b73      	ldr	r3, [pc, #460]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d6:	e0d8      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	2200      	movs	r2, #0
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
 8004406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	0159      	lsls	r1, r3, #5
 8004418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800441c:	0150      	lsls	r0, r2, #5
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4621      	mov	r1, r4
 8004424:	1a51      	subs	r1, r2, r1
 8004426:	6139      	str	r1, [r7, #16]
 8004428:	4629      	mov	r1, r5
 800442a:	eb63 0301 	sbc.w	r3, r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	018b      	lsls	r3, r1, #6
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004446:	4651      	mov	r1, sl
 8004448:	018a      	lsls	r2, r1, #6
 800444a:	4651      	mov	r1, sl
 800444c:	ebb2 0801 	subs.w	r8, r2, r1
 8004450:	4659      	mov	r1, fp
 8004452:	eb63 0901 	sbc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	462b      	mov	r3, r5
 8004478:	eb49 0303 	adc.w	r3, r9, r3
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800448a:	4629      	mov	r1, r5
 800448c:	024b      	lsls	r3, r1, #9
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004494:	4621      	mov	r1, r4
 8004496:	024a      	lsls	r2, r1, #9
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044a8:	f7fb fe9c 	bl	80001e4 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	e058      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	2200      	movs	r2, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	4611      	mov	r1, r2
 80044c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0159      	lsls	r1, r3, #5
 80044de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e2:	0150      	lsls	r0, r2, #5
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4641      	mov	r1, r8
 80044ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ee:	4649      	mov	r1, r9
 80044f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004508:	ebb2 040a 	subs.w	r4, r2, sl
 800450c:	eb63 050b 	sbc.w	r5, r3, fp
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	464b      	mov	r3, r9
 800452c:	eb45 0303 	adc.w	r3, r5, r3
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800453e:	4629      	mov	r1, r5
 8004540:	028b      	lsls	r3, r1, #10
 8004542:	4621      	mov	r1, r4
 8004544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004548:	4621      	mov	r1, r4
 800454a:	028a      	lsls	r2, r1, #10
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004552:	2200      	movs	r2, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455c:	f7fb fe42 	bl	80001e4 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800457a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800458c:	4618      	mov	r0, r3
 800458e:	3750      	adds	r7, #80	; 0x50
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000000 	.word	0x20000000

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045c0:	f7ff fff0 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	0a9b      	lsrs	r3, r3, #10
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	; (80045e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08006cac 	.word	0x08006cac

080045e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045e8:	f7ff ffdc 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0b5b      	lsrs	r3, r3, #13
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08006cac 	.word	0x08006cac

0800460c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e041      	b.n	80046a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fe fa06 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4619      	mov	r1, r3
 800464a:	4610      	mov	r0, r2
 800464c:	f000 fac0 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e041      	b.n	8004740 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f839 	bl	8004748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3304      	adds	r3, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	4610      	mov	r0, r2
 80046ea:	f000 fa71 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x24>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e022      	b.n	80047c6 <HAL_TIM_PWM_Start+0x6a>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b04      	cmp	r3, #4
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x3e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e015      	b.n	80047c6 <HAL_TIM_PWM_Start+0x6a>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x58>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_TIM_PWM_Start+0x6a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e068      	b.n	80048a0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0x82>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	e013      	b.n	8004806 <HAL_TIM_PWM_Start+0xaa>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0x92>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_PWM_Start+0xaa>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xa2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fc:	e003      	b.n	8004806 <HAL_TIM_PWM_Start+0xaa>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc84 	bl	800511c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a23      	ldr	r2, [pc, #140]	; (80048a8 <HAL_TIM_PWM_Start+0x14c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d107      	bne.n	800482e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <HAL_TIM_PWM_Start+0x14c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_TIM_PWM_Start+0x10e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d013      	beq.n	800486a <HAL_TIM_PWM_Start+0x10e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a19      	ldr	r2, [pc, #100]	; (80048ac <HAL_TIM_PWM_Start+0x150>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_TIM_PWM_Start+0x10e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <HAL_TIM_PWM_Start+0x154>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_TIM_PWM_Start+0x10e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIM_PWM_Start+0x158>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_TIM_PWM_Start+0x10e>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIM_PWM_Start+0x15c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d111      	bne.n	800488e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d010      	beq.n	800489e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	e007      	b.n	800489e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40010000 	.word	0x40010000
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40000c00 	.word	0x40000c00
 80048b8:	40014000 	.word	0x40014000

080048bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d101      	bne.n	80048da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0ae      	b.n	8004a38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	f200 809f 	bhi.w	8004a28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004a29 	.word	0x08004a29
 80048f8:	08004a29 	.word	0x08004a29
 80048fc:	08004a29 	.word	0x08004a29
 8004900:	08004965 	.word	0x08004965
 8004904:	08004a29 	.word	0x08004a29
 8004908:	08004a29 	.word	0x08004a29
 800490c:	08004a29 	.word	0x08004a29
 8004910:	080049a7 	.word	0x080049a7
 8004914:	08004a29 	.word	0x08004a29
 8004918:	08004a29 	.word	0x08004a29
 800491c:	08004a29 	.word	0x08004a29
 8004920:	080049e7 	.word	0x080049e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f9d0 	bl	8004cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0208 	orr.w	r2, r2, #8
 800493e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0204 	bic.w	r2, r2, #4
 800494e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6999      	ldr	r1, [r3, #24]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	619a      	str	r2, [r3, #24]
      break;
 8004962:	e064      	b.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fa16 	bl	8004d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	021a      	lsls	r2, r3, #8
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
      break;
 80049a4:	e043      	b.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fa61 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0208 	orr.w	r2, r2, #8
 80049c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0204 	bic.w	r2, r2, #4
 80049d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69d9      	ldr	r1, [r3, #28]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	61da      	str	r2, [r3, #28]
      break;
 80049e4:	e023      	b.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 faab 	bl	8004f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69d9      	ldr	r1, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	61da      	str	r2, [r3, #28]
      break;
 8004a26:	e002      	b.n	8004a2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_TIM_ConfigClockSource+0x1c>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e0b4      	b.n	8004bc6 <HAL_TIM_ConfigClockSource+0x186>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a94:	d03e      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0xd4>
 8004a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9a:	f200 8087 	bhi.w	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	f000 8086 	beq.w	8004bb2 <HAL_TIM_ConfigClockSource+0x172>
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d87f      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b70      	cmp	r3, #112	; 0x70
 8004aae:	d01a      	beq.n	8004ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ab0:	2b70      	cmp	r3, #112	; 0x70
 8004ab2:	d87b      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d050      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x11a>
 8004ab8:	2b60      	cmp	r3, #96	; 0x60
 8004aba:	d877      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b50      	cmp	r3, #80	; 0x50
 8004abe:	d03c      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0xfa>
 8004ac0:	2b50      	cmp	r3, #80	; 0x50
 8004ac2:	d873      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d058      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x13a>
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d86f      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b30      	cmp	r3, #48	; 0x30
 8004ace:	d064      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ad0:	2b30      	cmp	r3, #48	; 0x30
 8004ad2:	d86b      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d060      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d867      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d05c      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d05a      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x15a>
 8004ae4:	e062      	b.n	8004bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6899      	ldr	r1, [r3, #8]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f000 faf1 	bl	80050dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	609a      	str	r2, [r3, #8]
      break;
 8004b12:	e04f      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	6899      	ldr	r1, [r3, #8]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f000 fada 	bl	80050dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b36:	609a      	str	r2, [r3, #8]
      break;
 8004b38:	e03c      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f000 fa4e 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2150      	movs	r1, #80	; 0x50
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 faa7 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b58:	e02c      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	461a      	mov	r2, r3
 8004b68:	f000 fa6d 	bl	8005046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2160      	movs	r1, #96	; 0x60
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa97 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b78:	e01c      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f000 fa2e 	bl	8004fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2140      	movs	r1, #64	; 0x40
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fa87 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004b98:	e00c      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f000 fa7e 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004baa:	e003      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb0:	e000      	b.n	8004bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a34      	ldr	r2, [pc, #208]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a31      	ldr	r2, [pc, #196]	; (8004cb8 <TIM_Base_SetConfig+0xe8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a30      	ldr	r2, [pc, #192]	; (8004cbc <TIM_Base_SetConfig+0xec>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x38>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a2f      	ldr	r2, [pc, #188]	; (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d017      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <TIM_Base_SetConfig+0xe8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <TIM_Base_SetConfig+0xec>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d00f      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a20      	ldr	r2, [pc, #128]	; (8004cc0 <TIM_Base_SetConfig+0xf0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00b      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d007      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d003      	beq.n	8004c5a <TIM_Base_SetConfig+0x8a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d108      	bne.n	8004c6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <TIM_Base_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d103      	bne.n	8004ca0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	615a      	str	r2, [r3, #20]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800

08004cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0201 	bic.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 0302 	bic.w	r3, r3, #2
 8004d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <TIM_OC1_SetConfig+0xc8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10c      	bne.n	8004d46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0308 	bic.w	r3, r3, #8
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <TIM_OC1_SetConfig+0xc8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d111      	bne.n	8004d72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40010000 	.word	0x40010000

08004d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f023 0210 	bic.w	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0320 	bic.w	r3, r3, #32
 8004de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <TIM_OC2_SetConfig+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10d      	bne.n	8004e18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <TIM_OC2_SetConfig+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40010000 	.word	0x40010000

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <TIM_OC3_SetConfig+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	021b      	lsls	r3, r3, #8
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <TIM_OC3_SetConfig+0xd0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d113      	bne.n	8004f1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40010000 	.word	0x40010000

08004f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_OC4_SetConfig+0x9c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000

08004fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f023 0201 	bic.w	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f023 030a 	bic.w	r3, r3, #10
 8005024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0210 	bic.w	r2, r3, #16
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	031b      	lsls	r3, r3, #12
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f043 0307 	orr.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	431a      	orrs	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4313      	orrs	r3, r2
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	609a      	str	r2, [r3, #8]
}
 8005110:	bf00      	nop
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2201      	movs	r2, #1
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	43db      	mvns	r3, r3
 800513e:	401a      	ands	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800517c:	2302      	movs	r3, #2
 800517e:	e050      	b.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d013      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10c      	bne.n	8005210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40014000 	.word	0x40014000

08005244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e03f      	b.n	80052d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fd fc42 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2224      	movs	r2, #36	; 0x24
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 ff43 	bl	8006114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800529c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	; 0x30
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d165      	bne.n	80053c6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_UART_Transmit_DMA+0x26>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e05e      	b.n	80053c8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_UART_Transmit_DMA+0x38>
 8005314:	2302      	movs	r3, #2
 8005316:	e057      	b.n	80053c8 <HAL_UART_Transmit_DMA+0xe8>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	88fa      	ldrh	r2, [r7, #6]
 8005330:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2221      	movs	r2, #33	; 0x21
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <HAL_UART_Transmit_DMA+0xf0>)
 8005346:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	4a21      	ldr	r2, [pc, #132]	; (80053d4 <HAL_UART_Transmit_DMA+0xf4>)
 800534e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	4a20      	ldr	r2, [pc, #128]	; (80053d8 <HAL_UART_Transmit_DMA+0xf8>)
 8005356:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	6819      	ldr	r1, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3304      	adds	r3, #4
 8005374:	461a      	mov	r2, r3
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	f7fd ffa4 	bl	80032c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3314      	adds	r3, #20
 8005394:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	617b      	str	r3, [r7, #20]
   return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ae:	627a      	str	r2, [r7, #36]	; 0x24
 80053b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6a39      	ldr	r1, [r7, #32]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3730      	adds	r7, #48	; 0x30
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	080059ad 	.word	0x080059ad
 80053d4:	08005a47 	.word	0x08005a47
 80053d8:	08005bbf 	.word	0x08005bbf

080053dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d11d      	bne.n	8005432 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_UART_Receive_DMA+0x26>
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e016      	b.n	8005434 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_UART_Receive_DMA+0x38>
 8005410:	2302      	movs	r3, #2
 8005412:	e00f      	b.n	8005434 <HAL_UART_Receive_DMA+0x58>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	461a      	mov	r2, r3
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fc13 	bl	8005c54 <UART_Start_Receive_DMA>
 800542e:	4603      	mov	r3, r0
 8005430:	e000      	b.n	8005434 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005432:	2302      	movs	r3, #2
  }
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b0ba      	sub	sp, #232	; 0xe8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800547a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_UART_IRQHandler+0x66>
 800548e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fd7f 	bl	8005f9e <UART_Receive_IT>
      return;
 80054a0:	e256      	b.n	8005950 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80de 	beq.w	8005668 <HAL_UART_IRQHandler+0x22c>
 80054ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d106      	bne.n	80054c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 80d1 	beq.w	8005668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_UART_IRQHandler+0xae>
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0201 	orr.w	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_UART_IRQHandler+0xd2>
 80054f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_UART_IRQHandler+0xf6>
 800551a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f043 0204 	orr.w	r2, r3, #4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <HAL_UART_IRQHandler+0x126>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800554a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f043 0208 	orr.w	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 81ed 	beq.w	8005946 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_UART_IRQHandler+0x14e>
 8005578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fd0a 	bl	8005f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <HAL_UART_IRQHandler+0x17a>
 80055ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04f      	beq.n	8005656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc12 	bl	8005de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d141      	bne.n	800564e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	3314      	adds	r3, #20
 80055d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800560e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1d9      	bne.n	80055ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	2b00      	cmp	r3, #0
 800561c:	d013      	beq.n	8005646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	4a7d      	ldr	r2, [pc, #500]	; (8005818 <HAL_UART_IRQHandler+0x3dc>)
 8005624:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd ff12 	bl	8003454 <HAL_DMA_Abort_IT>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d016      	beq.n	8005664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e00e      	b.n	8005664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f99a 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800564c:	e00a      	b.n	8005664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f996 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e006      	b.n	8005664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f992 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005662:	e170      	b.n	8005946 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	bf00      	nop
    return;
 8005666:	e16e      	b.n	8005946 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	2b01      	cmp	r3, #1
 800566e:	f040 814a 	bne.w	8005906 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 8143 	beq.w	8005906 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 813c 	beq.w	8005906 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	f040 80b4 	bne.w	800581c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8140 	beq.w	800594a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056d2:	429a      	cmp	r2, r3
 80056d4:	f080 8139 	bcs.w	800594a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ea:	f000 8088 	beq.w	80057fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800570c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800571a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800571e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005726:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1d9      	bne.n	80056ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800574a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800575e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005762:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005766:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e1      	bne.n	800573a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005780:	e853 3f00 	ldrex	r3, [r3]
 8005784:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800578c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800579a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800579c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e3      	bne.n	8005776 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ce:	f023 0310 	bic.w	r3, r3, #16
 80057d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80057e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e3      	bne.n	80057bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fd fdbb 	bl	8003374 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005806:	b29b      	uxth	r3, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	b29b      	uxth	r3, r3
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8c0 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005814:	e099      	b.n	800594a <HAL_UART_IRQHandler+0x50e>
 8005816:	bf00      	nop
 8005818:	08005ea7 	.word	0x08005ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 808b 	beq.w	800594e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 8086 	beq.w	800594e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005866:	647a      	str	r2, [r7, #68]	; 0x44
 8005868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e3      	bne.n	8005842 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800589e:	633a      	str	r2, [r7, #48]	; 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0310 	bic.w	r3, r3, #16
 80058d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69b9      	ldr	r1, [r7, #24]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	617b      	str	r3, [r7, #20]
   return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e3      	bne.n	80058c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f848 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005904:	e023      	b.n	800594e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_UART_IRQHandler+0x4ea>
 8005912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fad5 	bl	8005ece <UART_Transmit_IT>
    return;
 8005924:	e014      	b.n	8005950 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00e      	beq.n	8005950 <HAL_UART_IRQHandler+0x514>
 8005932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb15 	bl	8005f6e <UART_EndTransmit_IT>
    return;
 8005944:	e004      	b.n	8005950 <HAL_UART_IRQHandler+0x514>
    return;
 8005946:	bf00      	nop
 8005948:	e002      	b.n	8005950 <HAL_UART_IRQHandler+0x514>
      return;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_UART_IRQHandler+0x514>
      return;
 800594e:	bf00      	nop
  }
}
 8005950:	37e8      	adds	r7, #232	; 0xe8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b090      	sub	sp, #64	; 0x40
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d137      	bne.n	8005a38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2200      	movs	r2, #0
 80059cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	623b      	str	r3, [r7, #32]
   return(result);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80059e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	633a      	str	r2, [r7, #48]	; 0x30
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e5      	bne.n	80059ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a22:	61fa      	str	r2, [r7, #28]
 8005a24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a36:	e002      	b.n	8005a3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005a3a:	f7fb ffab 	bl	8001994 <HAL_UART_TxCpltCallback>
}
 8005a3e:	bf00      	nop
 8005a40:	3740      	adds	r7, #64	; 0x40
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f7ff ff7f 	bl	8005958 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b09c      	sub	sp, #112	; 0x70
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d172      	bne.n	8005b64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a80:	2200      	movs	r2, #0
 8005a82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aac:	e841 2300 	strex	r3, r2, [r1]
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1e5      	bne.n	8005a84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3314      	adds	r3, #20
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	667b      	str	r3, [r7, #100]	; 0x64
 8005ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3314      	adds	r3, #20
 8005ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ad8:	647a      	str	r2, [r7, #68]	; 0x44
 8005ada:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e5      	bne.n	8005ab8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	623b      	str	r3, [r7, #32]
   return(result);
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b02:	663b      	str	r3, [r7, #96]	; 0x60
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3314      	adds	r3, #20
 8005b0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d119      	bne.n	8005b64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	330c      	adds	r3, #12
 8005b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0310 	bic.w	r3, r3, #16
 8005b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b50:	61fa      	str	r2, [r7, #28]
 8005b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	69b9      	ldr	r1, [r7, #24]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d106      	bne.n	8005b7a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b70:	4619      	mov	r1, r3
 8005b72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b74:	f7ff ff0e 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b78:	e002      	b.n	8005b80 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005b7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005b7c:	f7fb ff1c 	bl	80019b8 <HAL_UART_RxCpltCallback>
}
 8005b80:	bf00      	nop
 8005b82:	3770      	adds	r7, #112	; 0x70
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d108      	bne.n	8005bb0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff fef3 	bl	8005994 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bae:	e002      	b.n	8005bb6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fedb 	bl	800596c <HAL_UART_RxHalfCpltCallback>
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	bf0c      	ite	eq
 8005bde:	2301      	moveq	r3, #1
 8005be0:	2300      	movne	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b21      	cmp	r3, #33	; 0x21
 8005bf0:	d108      	bne.n	8005c04 <UART_DMAError+0x46>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005bfe:	68b8      	ldr	r0, [r7, #8]
 8005c00:	f000 f8c6 	bl	8005d90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b22      	cmp	r3, #34	; 0x22
 8005c24:	d108      	bne.n	8005c38 <UART_DMAError+0x7a>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c32:	68b8      	ldr	r0, [r7, #8]
 8005c34:	f000 f8d4 	bl	8005de0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	f043 0210 	orr.w	r2, r3, #16
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c44:	68b8      	ldr	r0, [r7, #8]
 8005c46:	f7ff fe9b 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b098      	sub	sp, #96	; 0x60
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2222      	movs	r2, #34	; 0x22
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	4a40      	ldr	r2, [pc, #256]	; (8005d84 <UART_Start_Receive_DMA+0x130>)
 8005c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	4a3f      	ldr	r2, [pc, #252]	; (8005d88 <UART_Start_Receive_DMA+0x134>)
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	4a3e      	ldr	r2, [pc, #248]	; (8005d8c <UART_Start_Receive_DMA+0x138>)
 8005c92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005c9c:	f107 0308 	add.w	r3, r7, #8
 8005ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	f7fd fb06 	bl	80032c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d019      	beq.n	8005d12 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	330c      	adds	r3, #12
 8005cfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cfe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e5      	bne.n	8005cde <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3314      	adds	r3, #20
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	657b      	str	r3, [r7, #84]	; 0x54
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d32:	63ba      	str	r2, [r7, #56]	; 0x38
 8005d34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e5      	bne.n	8005d12 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	617b      	str	r3, [r7, #20]
   return(result);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d66:	627a      	str	r2, [r7, #36]	; 0x24
 8005d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6a39      	ldr	r1, [r7, #32]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3760      	adds	r7, #96	; 0x60
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08005a63 	.word	0x08005a63
 8005d88:	08005b89 	.word	0x08005b89
 8005d8c:	08005bbf 	.word	0x08005bbf

08005d90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b089      	sub	sp, #36	; 0x24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	61ba      	str	r2, [r7, #24]
 8005dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005dd4:	bf00      	nop
 8005dd6:	3724      	adds	r7, #36	; 0x24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b095      	sub	sp, #84	; 0x54
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	330c      	adds	r3, #12
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	e853 3f00 	ldrex	r3, [r3]
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e08:	643a      	str	r2, [r7, #64]	; 0x40
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e5      	bne.n	8005de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e5      	bne.n	8005e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d119      	bne.n	8005e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	330c      	adds	r3, #12
 8005e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f023 0310 	bic.w	r3, r3, #16
 8005e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	330c      	adds	r3, #12
 8005e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e78:	61ba      	str	r2, [r7, #24]
 8005e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	e841 2300 	strex	r3, r2, [r1]
 8005e84:	613b      	str	r3, [r7, #16]
   return(result);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e5      	bne.n	8005e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e9a:	bf00      	nop
 8005e9c:	3754      	adds	r7, #84	; 0x54
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fd5d 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b21      	cmp	r3, #33	; 0x21
 8005ee0:	d13e      	bne.n	8005f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d114      	bne.n	8005f16 <UART_Transmit_IT+0x48>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d110      	bne.n	8005f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	1c9a      	adds	r2, r3, #2
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	621a      	str	r2, [r3, #32]
 8005f14:	e008      	b.n	8005f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6211      	str	r1, [r2, #32]
 8005f20:	781a      	ldrb	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4619      	mov	r1, r3
 8005f36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10f      	bne.n	8005f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb fd00 	bl	8001994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08c      	sub	sp, #48	; 0x30
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b22      	cmp	r3, #34	; 0x22
 8005fb0:	f040 80ab 	bne.w	800610a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fbc:	d117      	bne.n	8005fee <UART_Receive_IT+0x50>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d113      	bne.n	8005fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	1c9a      	adds	r2, r3, #2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
 8005fec:	e026      	b.n	800603c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006000:	d007      	beq.n	8006012 <UART_Receive_IT+0x74>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <UART_Receive_IT+0x82>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	e008      	b.n	8006032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29b      	uxth	r3, r3
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4619      	mov	r1, r3
 800604a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800604c:	2b00      	cmp	r3, #0
 800604e:	d15a      	bne.n	8006106 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0220 	bic.w	r2, r2, #32
 800605e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800606e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	2b01      	cmp	r3, #1
 800608e:	d135      	bne.n	80060fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	613b      	str	r3, [r7, #16]
   return(result);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b6:	623a      	str	r2, [r7, #32]
 80060b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69f9      	ldr	r1, [r7, #28]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e5      	bne.n	8006096 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d10a      	bne.n	80060ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fc4d 	bl	8005994 <HAL_UARTEx_RxEventCallback>
 80060fa:	e002      	b.n	8006102 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fb fc5b 	bl	80019b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	e002      	b.n	800610c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	; 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b0c0      	sub	sp, #256	; 0x100
 800611a:	af00      	add	r7, sp, #0
 800611c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006130:	68d9      	ldr	r1, [r3, #12]
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	ea40 0301 	orr.w	r3, r0, r1
 800613c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800613e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	431a      	orrs	r2, r3
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	431a      	orrs	r2, r3
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800616c:	f021 010c 	bic.w	r1, r1, #12
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800617a:	430b      	orrs	r3, r1
 800617c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	6999      	ldr	r1, [r3, #24]
 8006190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	ea40 0301 	orr.w	r3, r0, r1
 800619a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b8f      	ldr	r3, [pc, #572]	; (80063e0 <UART_SetConfig+0x2cc>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d005      	beq.n	80061b4 <UART_SetConfig+0xa0>
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b8d      	ldr	r3, [pc, #564]	; (80063e4 <UART_SetConfig+0x2d0>)
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d104      	bne.n	80061be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061b4:	f7fe fa16 	bl	80045e4 <HAL_RCC_GetPCLK2Freq>
 80061b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061bc:	e003      	b.n	80061c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fe f9fd 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80061c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	69db      	ldr	r3, [r3, #28]
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d0:	f040 810c 	bne.w	80063ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80061de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80061e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	1891      	adds	r1, r2, r2
 80061ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80061ee:	415b      	adcs	r3, r3
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061f6:	4621      	mov	r1, r4
 80061f8:	eb12 0801 	adds.w	r8, r2, r1
 80061fc:	4629      	mov	r1, r5
 80061fe:	eb43 0901 	adc.w	r9, r3, r1
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006216:	4690      	mov	r8, r2
 8006218:	4699      	mov	r9, r3
 800621a:	4623      	mov	r3, r4
 800621c:	eb18 0303 	adds.w	r3, r8, r3
 8006220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006224:	462b      	mov	r3, r5
 8006226:	eb49 0303 	adc.w	r3, r9, r3
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800623a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800623e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006242:	460b      	mov	r3, r1
 8006244:	18db      	adds	r3, r3, r3
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
 8006248:	4613      	mov	r3, r2
 800624a:	eb42 0303 	adc.w	r3, r2, r3
 800624e:	657b      	str	r3, [r7, #84]	; 0x54
 8006250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006258:	f7f9 ffc4 	bl	80001e4 <__aeabi_uldivmod>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4b61      	ldr	r3, [pc, #388]	; (80063e8 <UART_SetConfig+0x2d4>)
 8006262:	fba3 2302 	umull	r2, r3, r3, r2
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	011c      	lsls	r4, r3, #4
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	1891      	adds	r1, r2, r2
 8006282:	64b9      	str	r1, [r7, #72]	; 0x48
 8006284:	415b      	adcs	r3, r3
 8006286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800628c:	4641      	mov	r1, r8
 800628e:	eb12 0a01 	adds.w	sl, r2, r1
 8006292:	4649      	mov	r1, r9
 8006294:	eb43 0b01 	adc.w	fp, r3, r1
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ac:	4692      	mov	sl, r2
 80062ae:	469b      	mov	fp, r3
 80062b0:	4643      	mov	r3, r8
 80062b2:	eb1a 0303 	adds.w	r3, sl, r3
 80062b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062ba:	464b      	mov	r3, r9
 80062bc:	eb4b 0303 	adc.w	r3, fp, r3
 80062c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80062d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062d8:	460b      	mov	r3, r1
 80062da:	18db      	adds	r3, r3, r3
 80062dc:	643b      	str	r3, [r7, #64]	; 0x40
 80062de:	4613      	mov	r3, r2
 80062e0:	eb42 0303 	adc.w	r3, r2, r3
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80062ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80062ee:	f7f9 ff79 	bl	80001e4 <__aeabi_uldivmod>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4611      	mov	r1, r2
 80062f8:	4b3b      	ldr	r3, [pc, #236]	; (80063e8 <UART_SetConfig+0x2d4>)
 80062fa:	fba3 2301 	umull	r2, r3, r3, r1
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	2264      	movs	r2, #100	; 0x64
 8006302:	fb02 f303 	mul.w	r3, r2, r3
 8006306:	1acb      	subs	r3, r1, r3
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800630e:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <UART_SetConfig+0x2d4>)
 8006310:	fba3 2302 	umull	r2, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800631c:	441c      	add	r4, r3
 800631e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800632c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	1891      	adds	r1, r2, r2
 8006336:	63b9      	str	r1, [r7, #56]	; 0x38
 8006338:	415b      	adcs	r3, r3
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006340:	4641      	mov	r1, r8
 8006342:	1851      	adds	r1, r2, r1
 8006344:	6339      	str	r1, [r7, #48]	; 0x30
 8006346:	4649      	mov	r1, r9
 8006348:	414b      	adcs	r3, r1
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006358:	4659      	mov	r1, fp
 800635a:	00cb      	lsls	r3, r1, #3
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006362:	4651      	mov	r1, sl
 8006364:	00ca      	lsls	r2, r1, #3
 8006366:	4610      	mov	r0, r2
 8006368:	4619      	mov	r1, r3
 800636a:	4603      	mov	r3, r0
 800636c:	4642      	mov	r2, r8
 800636e:	189b      	adds	r3, r3, r2
 8006370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006374:	464b      	mov	r3, r9
 8006376:	460a      	mov	r2, r1
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800638c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006394:	460b      	mov	r3, r1
 8006396:	18db      	adds	r3, r3, r3
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
 800639a:	4613      	mov	r3, r2
 800639c:	eb42 0303 	adc.w	r3, r2, r3
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063aa:	f7f9 ff1b 	bl	80001e4 <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <UART_SetConfig+0x2d4>)
 80063b4:	fba3 1302 	umull	r1, r3, r3, r2
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	2164      	movs	r1, #100	; 0x64
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	3332      	adds	r3, #50	; 0x32
 80063c6:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <UART_SetConfig+0x2d4>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	f003 0207 	and.w	r2, r3, #7
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4422      	add	r2, r4
 80063da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063dc:	e105      	b.n	80065ea <UART_SetConfig+0x4d6>
 80063de:	bf00      	nop
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40011400 	.word	0x40011400
 80063e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063fe:	4642      	mov	r2, r8
 8006400:	464b      	mov	r3, r9
 8006402:	1891      	adds	r1, r2, r2
 8006404:	6239      	str	r1, [r7, #32]
 8006406:	415b      	adcs	r3, r3
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800640e:	4641      	mov	r1, r8
 8006410:	1854      	adds	r4, r2, r1
 8006412:	4649      	mov	r1, r9
 8006414:	eb43 0501 	adc.w	r5, r3, r1
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	00eb      	lsls	r3, r5, #3
 8006422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006426:	00e2      	lsls	r2, r4, #3
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	4643      	mov	r3, r8
 800642e:	18e3      	adds	r3, r4, r3
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006434:	464b      	mov	r3, r9
 8006436:	eb45 0303 	adc.w	r3, r5, r3
 800643a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800644a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800645a:	4629      	mov	r1, r5
 800645c:	008b      	lsls	r3, r1, #2
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006464:	4621      	mov	r1, r4
 8006466:	008a      	lsls	r2, r1, #2
 8006468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800646c:	f7f9 feba 	bl	80001e4 <__aeabi_uldivmod>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4b60      	ldr	r3, [pc, #384]	; (80065f8 <UART_SetConfig+0x4e4>)
 8006476:	fba3 2302 	umull	r2, r3, r3, r2
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	011c      	lsls	r4, r3, #4
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800648c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	61b9      	str	r1, [r7, #24]
 8006498:	415b      	adcs	r3, r3
 800649a:	61fb      	str	r3, [r7, #28]
 800649c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a0:	4641      	mov	r1, r8
 80064a2:	1851      	adds	r1, r2, r1
 80064a4:	6139      	str	r1, [r7, #16]
 80064a6:	4649      	mov	r1, r9
 80064a8:	414b      	adcs	r3, r1
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064b8:	4659      	mov	r1, fp
 80064ba:	00cb      	lsls	r3, r1, #3
 80064bc:	4651      	mov	r1, sl
 80064be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c2:	4651      	mov	r1, sl
 80064c4:	00ca      	lsls	r2, r1, #3
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	4642      	mov	r2, r8
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064d4:	464b      	mov	r3, r9
 80064d6:	460a      	mov	r2, r1
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80064ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064f8:	4649      	mov	r1, r9
 80064fa:	008b      	lsls	r3, r1, #2
 80064fc:	4641      	mov	r1, r8
 80064fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006502:	4641      	mov	r1, r8
 8006504:	008a      	lsls	r2, r1, #2
 8006506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800650a:	f7f9 fe6b 	bl	80001e4 <__aeabi_uldivmod>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <UART_SetConfig+0x4e4>)
 8006514:	fba3 1302 	umull	r1, r3, r3, r2
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	2164      	movs	r1, #100	; 0x64
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	3332      	adds	r3, #50	; 0x32
 8006526:	4a34      	ldr	r2, [pc, #208]	; (80065f8 <UART_SetConfig+0x4e4>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006532:	441c      	add	r4, r3
 8006534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006538:	2200      	movs	r2, #0
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	677a      	str	r2, [r7, #116]	; 0x74
 800653e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006542:	4642      	mov	r2, r8
 8006544:	464b      	mov	r3, r9
 8006546:	1891      	adds	r1, r2, r2
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	415b      	adcs	r3, r3
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006552:	4641      	mov	r1, r8
 8006554:	1851      	adds	r1, r2, r1
 8006556:	6039      	str	r1, [r7, #0]
 8006558:	4649      	mov	r1, r9
 800655a:	414b      	adcs	r3, r1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800656a:	4659      	mov	r1, fp
 800656c:	00cb      	lsls	r3, r1, #3
 800656e:	4651      	mov	r1, sl
 8006570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006574:	4651      	mov	r1, sl
 8006576:	00ca      	lsls	r2, r1, #3
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	4603      	mov	r3, r0
 800657e:	4642      	mov	r2, r8
 8006580:	189b      	adds	r3, r3, r2
 8006582:	66bb      	str	r3, [r7, #104]	; 0x68
 8006584:	464b      	mov	r3, r9
 8006586:	460a      	mov	r2, r1
 8006588:	eb42 0303 	adc.w	r3, r2, r3
 800658c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	663b      	str	r3, [r7, #96]	; 0x60
 8006598:	667a      	str	r2, [r7, #100]	; 0x64
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065a6:	4649      	mov	r1, r9
 80065a8:	008b      	lsls	r3, r1, #2
 80065aa:	4641      	mov	r1, r8
 80065ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b0:	4641      	mov	r1, r8
 80065b2:	008a      	lsls	r2, r1, #2
 80065b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065b8:	f7f9 fe14 	bl	80001e4 <__aeabi_uldivmod>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <UART_SetConfig+0x4e4>)
 80065c2:	fba3 1302 	umull	r1, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	2164      	movs	r1, #100	; 0x64
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	3332      	adds	r3, #50	; 0x32
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <UART_SetConfig+0x4e4>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4422      	add	r2, r4
 80065e8:	609a      	str	r2, [r3, #8]
}
 80065ea:	bf00      	nop
 80065ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80065f0:	46bd      	mov	sp, r7
 80065f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065f6:	bf00      	nop
 80065f8:	51eb851f 	.word	0x51eb851f

080065fc <__cxa_pure_virtual>:
 80065fc:	b508      	push	{r3, lr}
 80065fe:	f000 f80d 	bl	800661c <_ZSt9terminatev>

08006602 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006602:	b508      	push	{r3, lr}
 8006604:	4780      	blx	r0
 8006606:	f000 f80e 	bl	8006626 <abort>
	...

0800660c <_ZSt13get_terminatev>:
 800660c:	4b02      	ldr	r3, [pc, #8]	; (8006618 <_ZSt13get_terminatev+0xc>)
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	f3bf 8f5b 	dmb	ish
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	2000000c 	.word	0x2000000c

0800661c <_ZSt9terminatev>:
 800661c:	b508      	push	{r3, lr}
 800661e:	f7ff fff5 	bl	800660c <_ZSt13get_terminatev>
 8006622:	f7ff ffee 	bl	8006602 <_ZN10__cxxabiv111__terminateEPFvvE>

08006626 <abort>:
 8006626:	b508      	push	{r3, lr}
 8006628:	2006      	movs	r0, #6
 800662a:	f000 f873 	bl	8006714 <raise>
 800662e:	2001      	movs	r0, #1
 8006630:	f7fc fb76 	bl	8002d20 <_exit>

08006634 <__errno>:
 8006634:	4b01      	ldr	r3, [pc, #4]	; (800663c <__errno+0x8>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	4d0d      	ldr	r5, [pc, #52]	; (8006678 <__libc_init_array+0x38>)
 8006644:	4c0d      	ldr	r4, [pc, #52]	; (800667c <__libc_init_array+0x3c>)
 8006646:	1b64      	subs	r4, r4, r5
 8006648:	10a4      	asrs	r4, r4, #2
 800664a:	2600      	movs	r6, #0
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	4d0b      	ldr	r5, [pc, #44]	; (8006680 <__libc_init_array+0x40>)
 8006652:	4c0c      	ldr	r4, [pc, #48]	; (8006684 <__libc_init_array+0x44>)
 8006654:	f000 f9b0 	bl	80069b8 <_init>
 8006658:	1b64      	subs	r4, r4, r5
 800665a:	10a4      	asrs	r4, r4, #2
 800665c:	2600      	movs	r6, #0
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f855 3b04 	ldr.w	r3, [r5], #4
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	08006cc4 	.word	0x08006cc4
 800667c:	08006cc4 	.word	0x08006cc4
 8006680:	08006cc4 	.word	0x08006cc4
 8006684:	08006ccc 	.word	0x08006ccc

08006688 <memcpy>:
 8006688:	440a      	add	r2, r1
 800668a:	4291      	cmp	r1, r2
 800668c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006690:	d100      	bne.n	8006694 <memcpy+0xc>
 8006692:	4770      	bx	lr
 8006694:	b510      	push	{r4, lr}
 8006696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669e:	4291      	cmp	r1, r2
 80066a0:	d1f9      	bne.n	8006696 <memcpy+0xe>
 80066a2:	bd10      	pop	{r4, pc}

080066a4 <memset>:
 80066a4:	4402      	add	r2, r0
 80066a6:	4603      	mov	r3, r0
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d100      	bne.n	80066ae <memset+0xa>
 80066ac:	4770      	bx	lr
 80066ae:	f803 1b01 	strb.w	r1, [r3], #1
 80066b2:	e7f9      	b.n	80066a8 <memset+0x4>

080066b4 <realloc>:
 80066b4:	4b02      	ldr	r3, [pc, #8]	; (80066c0 <realloc+0xc>)
 80066b6:	460a      	mov	r2, r1
 80066b8:	4601      	mov	r1, r0
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	f000 b8da 	b.w	8006874 <_realloc_r>
 80066c0:	20000010 	.word	0x20000010

080066c4 <_raise_r>:
 80066c4:	291f      	cmp	r1, #31
 80066c6:	b538      	push	{r3, r4, r5, lr}
 80066c8:	4604      	mov	r4, r0
 80066ca:	460d      	mov	r5, r1
 80066cc:	d904      	bls.n	80066d8 <_raise_r+0x14>
 80066ce:	2316      	movs	r3, #22
 80066d0:	6003      	str	r3, [r0, #0]
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066da:	b112      	cbz	r2, 80066e2 <_raise_r+0x1e>
 80066dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80066e0:	b94b      	cbnz	r3, 80066f6 <_raise_r+0x32>
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 f830 	bl	8006748 <_getpid_r>
 80066e8:	462a      	mov	r2, r5
 80066ea:	4601      	mov	r1, r0
 80066ec:	4620      	mov	r0, r4
 80066ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f2:	f000 b817 	b.w	8006724 <_kill_r>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d00a      	beq.n	8006710 <_raise_r+0x4c>
 80066fa:	1c59      	adds	r1, r3, #1
 80066fc:	d103      	bne.n	8006706 <_raise_r+0x42>
 80066fe:	2316      	movs	r3, #22
 8006700:	6003      	str	r3, [r0, #0]
 8006702:	2001      	movs	r0, #1
 8006704:	e7e7      	b.n	80066d6 <_raise_r+0x12>
 8006706:	2400      	movs	r4, #0
 8006708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800670c:	4628      	mov	r0, r5
 800670e:	4798      	blx	r3
 8006710:	2000      	movs	r0, #0
 8006712:	e7e0      	b.n	80066d6 <_raise_r+0x12>

08006714 <raise>:
 8006714:	4b02      	ldr	r3, [pc, #8]	; (8006720 <raise+0xc>)
 8006716:	4601      	mov	r1, r0
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f7ff bfd3 	b.w	80066c4 <_raise_r>
 800671e:	bf00      	nop
 8006720:	20000010 	.word	0x20000010

08006724 <_kill_r>:
 8006724:	b538      	push	{r3, r4, r5, lr}
 8006726:	4d07      	ldr	r5, [pc, #28]	; (8006744 <_kill_r+0x20>)
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f7fc fae5 	bl	8002d00 <_kill>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d102      	bne.n	8006740 <_kill_r+0x1c>
 800673a:	682b      	ldr	r3, [r5, #0]
 800673c:	b103      	cbz	r3, 8006740 <_kill_r+0x1c>
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	bd38      	pop	{r3, r4, r5, pc}
 8006742:	bf00      	nop
 8006744:	20000bb0 	.word	0x20000bb0

08006748 <_getpid_r>:
 8006748:	f7fc bad2 	b.w	8002cf0 <_getpid>

0800674c <sbrk_aligned>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4e0e      	ldr	r6, [pc, #56]	; (8006788 <sbrk_aligned+0x3c>)
 8006750:	460c      	mov	r4, r1
 8006752:	6831      	ldr	r1, [r6, #0]
 8006754:	4605      	mov	r5, r0
 8006756:	b911      	cbnz	r1, 800675e <sbrk_aligned+0x12>
 8006758:	f000 f8bc 	bl	80068d4 <_sbrk_r>
 800675c:	6030      	str	r0, [r6, #0]
 800675e:	4621      	mov	r1, r4
 8006760:	4628      	mov	r0, r5
 8006762:	f000 f8b7 	bl	80068d4 <_sbrk_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d00a      	beq.n	8006780 <sbrk_aligned+0x34>
 800676a:	1cc4      	adds	r4, r0, #3
 800676c:	f024 0403 	bic.w	r4, r4, #3
 8006770:	42a0      	cmp	r0, r4
 8006772:	d007      	beq.n	8006784 <sbrk_aligned+0x38>
 8006774:	1a21      	subs	r1, r4, r0
 8006776:	4628      	mov	r0, r5
 8006778:	f000 f8ac 	bl	80068d4 <_sbrk_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d101      	bne.n	8006784 <sbrk_aligned+0x38>
 8006780:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006784:	4620      	mov	r0, r4
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	20000bac 	.word	0x20000bac

0800678c <_malloc_r>:
 800678c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006790:	1ccd      	adds	r5, r1, #3
 8006792:	f025 0503 	bic.w	r5, r5, #3
 8006796:	3508      	adds	r5, #8
 8006798:	2d0c      	cmp	r5, #12
 800679a:	bf38      	it	cc
 800679c:	250c      	movcc	r5, #12
 800679e:	2d00      	cmp	r5, #0
 80067a0:	4607      	mov	r7, r0
 80067a2:	db01      	blt.n	80067a8 <_malloc_r+0x1c>
 80067a4:	42a9      	cmp	r1, r5
 80067a6:	d905      	bls.n	80067b4 <_malloc_r+0x28>
 80067a8:	230c      	movs	r3, #12
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	2600      	movs	r6, #0
 80067ae:	4630      	mov	r0, r6
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	4e2e      	ldr	r6, [pc, #184]	; (8006870 <_malloc_r+0xe4>)
 80067b6:	f000 f89d 	bl	80068f4 <__malloc_lock>
 80067ba:	6833      	ldr	r3, [r6, #0]
 80067bc:	461c      	mov	r4, r3
 80067be:	bb34      	cbnz	r4, 800680e <_malloc_r+0x82>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4638      	mov	r0, r7
 80067c4:	f7ff ffc2 	bl	800674c <sbrk_aligned>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	4604      	mov	r4, r0
 80067cc:	d14d      	bne.n	800686a <_malloc_r+0xde>
 80067ce:	6834      	ldr	r4, [r6, #0]
 80067d0:	4626      	mov	r6, r4
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d140      	bne.n	8006858 <_malloc_r+0xcc>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	4631      	mov	r1, r6
 80067da:	4638      	mov	r0, r7
 80067dc:	eb04 0803 	add.w	r8, r4, r3
 80067e0:	f000 f878 	bl	80068d4 <_sbrk_r>
 80067e4:	4580      	cmp	r8, r0
 80067e6:	d13a      	bne.n	800685e <_malloc_r+0xd2>
 80067e8:	6821      	ldr	r1, [r4, #0]
 80067ea:	3503      	adds	r5, #3
 80067ec:	1a6d      	subs	r5, r5, r1
 80067ee:	f025 0503 	bic.w	r5, r5, #3
 80067f2:	3508      	adds	r5, #8
 80067f4:	2d0c      	cmp	r5, #12
 80067f6:	bf38      	it	cc
 80067f8:	250c      	movcc	r5, #12
 80067fa:	4629      	mov	r1, r5
 80067fc:	4638      	mov	r0, r7
 80067fe:	f7ff ffa5 	bl	800674c <sbrk_aligned>
 8006802:	3001      	adds	r0, #1
 8006804:	d02b      	beq.n	800685e <_malloc_r+0xd2>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	442b      	add	r3, r5
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	e00e      	b.n	800682c <_malloc_r+0xa0>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	1b52      	subs	r2, r2, r5
 8006812:	d41e      	bmi.n	8006852 <_malloc_r+0xc6>
 8006814:	2a0b      	cmp	r2, #11
 8006816:	d916      	bls.n	8006846 <_malloc_r+0xba>
 8006818:	1961      	adds	r1, r4, r5
 800681a:	42a3      	cmp	r3, r4
 800681c:	6025      	str	r5, [r4, #0]
 800681e:	bf18      	it	ne
 8006820:	6059      	strne	r1, [r3, #4]
 8006822:	6863      	ldr	r3, [r4, #4]
 8006824:	bf08      	it	eq
 8006826:	6031      	streq	r1, [r6, #0]
 8006828:	5162      	str	r2, [r4, r5]
 800682a:	604b      	str	r3, [r1, #4]
 800682c:	4638      	mov	r0, r7
 800682e:	f104 060b 	add.w	r6, r4, #11
 8006832:	f000 f865 	bl	8006900 <__malloc_unlock>
 8006836:	f026 0607 	bic.w	r6, r6, #7
 800683a:	1d23      	adds	r3, r4, #4
 800683c:	1af2      	subs	r2, r6, r3
 800683e:	d0b6      	beq.n	80067ae <_malloc_r+0x22>
 8006840:	1b9b      	subs	r3, r3, r6
 8006842:	50a3      	str	r3, [r4, r2]
 8006844:	e7b3      	b.n	80067ae <_malloc_r+0x22>
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	42a3      	cmp	r3, r4
 800684a:	bf0c      	ite	eq
 800684c:	6032      	streq	r2, [r6, #0]
 800684e:	605a      	strne	r2, [r3, #4]
 8006850:	e7ec      	b.n	800682c <_malloc_r+0xa0>
 8006852:	4623      	mov	r3, r4
 8006854:	6864      	ldr	r4, [r4, #4]
 8006856:	e7b2      	b.n	80067be <_malloc_r+0x32>
 8006858:	4634      	mov	r4, r6
 800685a:	6876      	ldr	r6, [r6, #4]
 800685c:	e7b9      	b.n	80067d2 <_malloc_r+0x46>
 800685e:	230c      	movs	r3, #12
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	4638      	mov	r0, r7
 8006864:	f000 f84c 	bl	8006900 <__malloc_unlock>
 8006868:	e7a1      	b.n	80067ae <_malloc_r+0x22>
 800686a:	6025      	str	r5, [r4, #0]
 800686c:	e7de      	b.n	800682c <_malloc_r+0xa0>
 800686e:	bf00      	nop
 8006870:	20000ba8 	.word	0x20000ba8

08006874 <_realloc_r>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	4680      	mov	r8, r0
 800687a:	4614      	mov	r4, r2
 800687c:	460e      	mov	r6, r1
 800687e:	b921      	cbnz	r1, 800688a <_realloc_r+0x16>
 8006880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	4611      	mov	r1, r2
 8006886:	f7ff bf81 	b.w	800678c <_malloc_r>
 800688a:	b92a      	cbnz	r2, 8006898 <_realloc_r+0x24>
 800688c:	f000 f83e 	bl	800690c <_free_r>
 8006890:	4625      	mov	r5, r4
 8006892:	4628      	mov	r0, r5
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	f000 f884 	bl	80069a4 <_malloc_usable_size_r>
 800689c:	4284      	cmp	r4, r0
 800689e:	4607      	mov	r7, r0
 80068a0:	d802      	bhi.n	80068a8 <_realloc_r+0x34>
 80068a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068a6:	d812      	bhi.n	80068ce <_realloc_r+0x5a>
 80068a8:	4621      	mov	r1, r4
 80068aa:	4640      	mov	r0, r8
 80068ac:	f7ff ff6e 	bl	800678c <_malloc_r>
 80068b0:	4605      	mov	r5, r0
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0ed      	beq.n	8006892 <_realloc_r+0x1e>
 80068b6:	42bc      	cmp	r4, r7
 80068b8:	4622      	mov	r2, r4
 80068ba:	4631      	mov	r1, r6
 80068bc:	bf28      	it	cs
 80068be:	463a      	movcs	r2, r7
 80068c0:	f7ff fee2 	bl	8006688 <memcpy>
 80068c4:	4631      	mov	r1, r6
 80068c6:	4640      	mov	r0, r8
 80068c8:	f000 f820 	bl	800690c <_free_r>
 80068cc:	e7e1      	b.n	8006892 <_realloc_r+0x1e>
 80068ce:	4635      	mov	r5, r6
 80068d0:	e7df      	b.n	8006892 <_realloc_r+0x1e>
	...

080068d4 <_sbrk_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4d06      	ldr	r5, [pc, #24]	; (80068f0 <_sbrk_r+0x1c>)
 80068d8:	2300      	movs	r3, #0
 80068da:	4604      	mov	r4, r0
 80068dc:	4608      	mov	r0, r1
 80068de:	602b      	str	r3, [r5, #0]
 80068e0:	f7fc fa28 	bl	8002d34 <_sbrk>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d102      	bne.n	80068ee <_sbrk_r+0x1a>
 80068e8:	682b      	ldr	r3, [r5, #0]
 80068ea:	b103      	cbz	r3, 80068ee <_sbrk_r+0x1a>
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	20000bb0 	.word	0x20000bb0

080068f4 <__malloc_lock>:
 80068f4:	4801      	ldr	r0, [pc, #4]	; (80068fc <__malloc_lock+0x8>)
 80068f6:	f000 b85d 	b.w	80069b4 <__retarget_lock_acquire_recursive>
 80068fa:	bf00      	nop
 80068fc:	20000bb4 	.word	0x20000bb4

08006900 <__malloc_unlock>:
 8006900:	4801      	ldr	r0, [pc, #4]	; (8006908 <__malloc_unlock+0x8>)
 8006902:	f000 b858 	b.w	80069b6 <__retarget_lock_release_recursive>
 8006906:	bf00      	nop
 8006908:	20000bb4 	.word	0x20000bb4

0800690c <_free_r>:
 800690c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800690e:	2900      	cmp	r1, #0
 8006910:	d044      	beq.n	800699c <_free_r+0x90>
 8006912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006916:	9001      	str	r0, [sp, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	f1a1 0404 	sub.w	r4, r1, #4
 800691e:	bfb8      	it	lt
 8006920:	18e4      	addlt	r4, r4, r3
 8006922:	f7ff ffe7 	bl	80068f4 <__malloc_lock>
 8006926:	4a1e      	ldr	r2, [pc, #120]	; (80069a0 <_free_r+0x94>)
 8006928:	9801      	ldr	r0, [sp, #4]
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	b933      	cbnz	r3, 800693c <_free_r+0x30>
 800692e:	6063      	str	r3, [r4, #4]
 8006930:	6014      	str	r4, [r2, #0]
 8006932:	b003      	add	sp, #12
 8006934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006938:	f7ff bfe2 	b.w	8006900 <__malloc_unlock>
 800693c:	42a3      	cmp	r3, r4
 800693e:	d908      	bls.n	8006952 <_free_r+0x46>
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	1961      	adds	r1, r4, r5
 8006944:	428b      	cmp	r3, r1
 8006946:	bf01      	itttt	eq
 8006948:	6819      	ldreq	r1, [r3, #0]
 800694a:	685b      	ldreq	r3, [r3, #4]
 800694c:	1949      	addeq	r1, r1, r5
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	e7ed      	b.n	800692e <_free_r+0x22>
 8006952:	461a      	mov	r2, r3
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	b10b      	cbz	r3, 800695c <_free_r+0x50>
 8006958:	42a3      	cmp	r3, r4
 800695a:	d9fa      	bls.n	8006952 <_free_r+0x46>
 800695c:	6811      	ldr	r1, [r2, #0]
 800695e:	1855      	adds	r5, r2, r1
 8006960:	42a5      	cmp	r5, r4
 8006962:	d10b      	bne.n	800697c <_free_r+0x70>
 8006964:	6824      	ldr	r4, [r4, #0]
 8006966:	4421      	add	r1, r4
 8006968:	1854      	adds	r4, r2, r1
 800696a:	42a3      	cmp	r3, r4
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	d1e0      	bne.n	8006932 <_free_r+0x26>
 8006970:	681c      	ldr	r4, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	6053      	str	r3, [r2, #4]
 8006976:	4421      	add	r1, r4
 8006978:	6011      	str	r1, [r2, #0]
 800697a:	e7da      	b.n	8006932 <_free_r+0x26>
 800697c:	d902      	bls.n	8006984 <_free_r+0x78>
 800697e:	230c      	movs	r3, #12
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	e7d6      	b.n	8006932 <_free_r+0x26>
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	1961      	adds	r1, r4, r5
 8006988:	428b      	cmp	r3, r1
 800698a:	bf04      	itt	eq
 800698c:	6819      	ldreq	r1, [r3, #0]
 800698e:	685b      	ldreq	r3, [r3, #4]
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	bf04      	itt	eq
 8006994:	1949      	addeq	r1, r1, r5
 8006996:	6021      	streq	r1, [r4, #0]
 8006998:	6054      	str	r4, [r2, #4]
 800699a:	e7ca      	b.n	8006932 <_free_r+0x26>
 800699c:	b003      	add	sp, #12
 800699e:	bd30      	pop	{r4, r5, pc}
 80069a0:	20000ba8 	.word	0x20000ba8

080069a4 <_malloc_usable_size_r>:
 80069a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a8:	1f18      	subs	r0, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfbc      	itt	lt
 80069ae:	580b      	ldrlt	r3, [r1, r0]
 80069b0:	18c0      	addlt	r0, r0, r3
 80069b2:	4770      	bx	lr

080069b4 <__retarget_lock_acquire_recursive>:
 80069b4:	4770      	bx	lr

080069b6 <__retarget_lock_release_recursive>:
 80069b6:	4770      	bx	lr

080069b8 <_init>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	bf00      	nop
 80069bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069be:	bc08      	pop	{r3}
 80069c0:	469e      	mov	lr, r3
 80069c2:	4770      	bx	lr

080069c4 <_fini>:
 80069c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c6:	bf00      	nop
 80069c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ca:	bc08      	pop	{r3}
 80069cc:	469e      	mov	lr, r3
 80069ce:	4770      	bx	lr
