
ros_serial_twist_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aac  08006aac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ab4  08006ab4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000074  08006b34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  08006b34  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c14  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296d  00000000  00000000  00035cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00038628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c7  00000000  00000000  0003a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cd8  00000000  00000000  0005266f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d55  00000000  00000000  00063347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f809c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004700  00000000  00000000  000f80ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080067a8 	.word	0x080067a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080067a8 	.word	0x080067a8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fb84 	bl	8002c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f952 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f928 	bl	80007a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8fc 	bl	8000750 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000558:	f000 f872 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800055c:	f001 fa28 	bl	80019b0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000560:	f001 fa52 	bl	8001a08 <loop>
  {
 8000564:	e7fc      	b.n	8000560 <main+0x20>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 ff8c 	bl	8006494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa6a 	bl	8003acc <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f967 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fccc 	bl	8003fbc <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f951 	bl	80008d0 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000670:	4b36      	ldr	r3, [pc, #216]	; (800074c <MX_TIM2_Init+0x10c>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000678:	4b34      	ldr	r3, [pc, #208]	; (800074c <MX_TIM2_Init+0x10c>)
 800067a:	2253      	movs	r2, #83	; 0x53
 800067c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b33      	ldr	r3, [pc, #204]	; (800074c <MX_TIM2_Init+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 8000684:	4b31      	ldr	r3, [pc, #196]	; (800074c <MX_TIM2_Init+0x10c>)
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_TIM2_Init+0x10c>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_TIM2_Init+0x10c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000698:	482c      	ldr	r0, [pc, #176]	; (800074c <MX_TIM2_Init+0x10c>)
 800069a:	f003 feaf 	bl	80043fc <HAL_TIM_Base_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a4:	f000 f914 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4825      	ldr	r0, [pc, #148]	; (800074c <MX_TIM2_Init+0x10c>)
 80006b6:	f004 f8bb 	bl	8004830 <HAL_TIM_ConfigClockSource>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006c0:	f000 f906 	bl	80008d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <MX_TIM2_Init+0x10c>)
 80006c6:	f003 fee8 	bl	800449a <HAL_TIM_PWM_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006d0:	f000 f8fe 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4619      	mov	r1, r3
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <MX_TIM2_Init+0x10c>)
 80006e4:	f004 fc38 	bl	8004f58 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ee:	f000 f8ef 	bl	80008d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4810      	ldr	r0, [pc, #64]	; (800074c <MX_TIM2_Init+0x10c>)
 800070a:	f003 ffcf 	bl	80046ac <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000714:	f000 f8dc 	bl	80008d0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_TIM2_Init+0x10c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_TIM2_Init+0x10c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f022 0208 	bic.w	r2, r2, #8
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2204      	movs	r2, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <MX_TIM2_Init+0x10c>)
 8000730:	f003 ffbc 	bl	80046ac <HAL_TIM_PWM_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 800073a:	f000 f8c9 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <MX_TIM2_Init+0x10c>)
 8000740:	f002 f8bc 	bl	80028bc <HAL_TIM_MspPostInit>

}
 8000744:	bf00      	nop
 8000746:	3738      	adds	r7, #56	; 0x38
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000090 	.word	0x20000090

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f004 fc54 	bl	8005034 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f89d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000d8 	.word	0x200000d8
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_DMA_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2010      	movs	r0, #16
 80007cc:	f002 fb8d 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007d0:	2010      	movs	r0, #16
 80007d2:	f002 fba6 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2011      	movs	r0, #17
 80007dc:	f002 fb85 	bl	8002eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007e0:	2011      	movs	r0, #17
 80007e2:	f002 fb9e 	bl	8002f22 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2141      	movs	r1, #65	; 0x41
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	f003 f8f0 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_GPIO_Init+0xd8>)
 800089c:	f002 ff5e 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 80008a0:	2341      	movs	r3, #65	; 0x41
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xd4>)
 80008b8:	f002 ff50 	bl	800375c <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>

080008da <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <_ZN3ros3MsgC1Ev+0x1c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08006a7c 	.word	0x08006a7c

0800091c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
      data()
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ffe8 	bl	80008fc <_ZN3ros3MsgC1Ev>
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3304      	adds	r3, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ffcf 	bl	80008da <_ZN3ros4TimeC1Ev>
    {
    }
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	08006a64 	.word	0x08006a64

0800094c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6859      	ldr	r1, [r3, #4]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	4413      	add	r3, r2
 8000964:	b2ca      	uxtb	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	0a19      	lsrs	r1, r3, #8
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	0c19      	lsrs	r1, r3, #16
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3302      	adds	r3, #2
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	4413      	add	r3, r2
 8000988:	b2ca      	uxtb	r2, r1
 800098a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	0e19      	lsrs	r1, r3, #24
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3303      	adds	r3, #3
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	3304      	adds	r3, #4
 80009a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6899      	ldr	r1, [r3, #8]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	0a19      	lsrs	r1, r3, #8
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3301      	adds	r3, #1
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	b2ca      	uxtb	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	0c19      	lsrs	r1, r3, #16
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3302      	adds	r3, #2
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	0e19      	lsrs	r1, r3, #24
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3303      	adds	r3, #3
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	b2ca      	uxtb	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3304      	adds	r3, #4
 80009ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80009ee:	68fb      	ldr	r3, [r7, #12]
    }
 80009f0:	4618      	mov	r0, r3
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	6839      	ldr	r1, [r7, #0]
 8000a22:	440b      	add	r3, r1
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3302      	adds	r3, #2
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	440b      	add	r3, r1
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	041b      	lsls	r3, r3, #16
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3303      	adds	r3, #3
 8000a4c:	6839      	ldr	r1, [r7, #0]
 8000a4e:	440b      	add	r3, r1
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	061b      	lsls	r3, r3, #24
 8000a54:	431a      	orrs	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	683a      	ldr	r2, [r7, #0]
 8000a64:	4413      	add	r3, r2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	6839      	ldr	r1, [r7, #0]
 8000a78:	440b      	add	r3, r1
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	6839      	ldr	r1, [r7, #0]
 8000a8e:	440b      	add	r3, r1
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	041b      	lsls	r3, r3, #16
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3303      	adds	r3, #3
 8000aa2:	6839      	ldr	r1, [r7, #0]
 8000aa4:	440b      	add	r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	061b      	lsls	r3, r3, #24
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3304      	adds	r3, #4
 8000ab4:	60fb      	str	r3, [r7, #12]
     return offset;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	080067c0 	.word	0x080067c0

08000ae0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	080067d0 	.word	0x080067d0

08000afc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fef8 	bl	80008fc <_ZN3ros3MsgC1Ev>
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	809a      	strh	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a09      	ldr	r2, [pc, #36]	; (8000b40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    {
    }
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	08006a4c 	.word	0x08006a4c
 8000b40:	080067f4 	.word	0x080067f4

08000b44 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	8899      	ldrh	r1, [r3, #4]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b299      	uxth	r1, r3
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b2ca      	uxtb	r2, r1
 8000b72:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	3302      	adds	r3, #2
 8000b78:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb28 	bl	80001d4 <strlen>
 8000b84:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	69b9      	ldr	r1, [r7, #24]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 ffaa 	bl	8001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	3304      	adds	r3, #4
 8000b98:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	18d0      	adds	r0, r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f005 fc66 	bl	8006478 <memcpy>
      offset += length_topic_name;
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fb0b 	bl	80001d4 <strlen>
 8000bbe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 ff8d 	bl	8001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	18d0      	adds	r0, r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f005 fc49 	bl	8006478 <memcpy>
      offset += length_message_type;
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	4413      	add	r3, r2
 8000bec:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff faee 	bl	80001d4 <strlen>
 8000bf8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 ff70 	bl	8001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	18d0      	adds	r0, r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f005 fc2c 	bl	8006478 <memcpy>
      offset += length_md5sum;
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000c2e:	68f9      	ldr	r1, [r7, #12]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	b2ca      	uxtb	r2, r1
 8000c38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	0a19      	lsrs	r1, r3, #8
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3301      	adds	r3, #1
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	0c19      	lsrs	r1, r3, #16
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3302      	adds	r3, #2
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	0e19      	lsrs	r1, r3, #24
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3303      	adds	r3, #3
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	61fb      	str	r3, [r7, #28]
      return offset;
 8000c70:	69fb      	ldr	r3, [r7, #28]
    }
 8000c72:	4618      	mov	r0, r3
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b08a      	sub	sp, #40	; 0x28
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	6839      	ldr	r1, [r7, #0]
 8000ca2:	440b      	add	r3, r1
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	021b      	lsls	r3, r3, #8
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	441a      	add	r2, r3
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff2c 	bl	8001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	4413      	add	r3, r2
 8000cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d20c      	bcs.n	8000cfc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	441a      	add	r2, r3
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	440b      	add	r3, r1
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	e7ec      	b.n	8000cd6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4413      	add	r3, r2
 8000d02:	3b01      	subs	r3, #1
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	441a      	add	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	441a      	add	r2, r3
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fef9 	bl	8001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	3304      	adds	r3, #4
 8000d36:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4413      	add	r3, r2
 8000d42:	6a3a      	ldr	r2, [r7, #32]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d20c      	bcs.n	8000d62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	440b      	add	r3, r1
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	e7ec      	b.n	8000d3c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4413      	add	r3, r2
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	441a      	add	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4413      	add	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	441a      	add	r2, r3
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fec6 	bl	8001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d20c      	bcs.n	8000dc8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	441a      	add	r2, r3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	440b      	add	r3, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e7ec      	b.n	8000da2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4413      	add	r3, r2
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	441a      	add	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	440a      	add	r2, r1
 8000df8:	7812      	ldrb	r2, [r2, #0]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	3301      	adds	r3, #1
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	440b      	add	r3, r1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	3302      	adds	r3, #2
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	440b      	add	r3, r1
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	041b      	lsls	r3, r3, #16
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	3303      	adds	r3, #3
 8000e28:	6839      	ldr	r1, [r7, #0]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	061b      	lsls	r3, r3, #24
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	61bb      	str	r3, [r7, #24]
     return offset;
 8000e40:	69bb      	ldr	r3, [r7, #24]
    }
 8000e42:	4618      	mov	r0, r3
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	080067f8 	.word	0x080067f8

08000e68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	08006814 	.word	0x08006814

08000e84 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fd34 	bl	80008fc <_ZN3ros3MsgC1Ev>
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	711a      	strb	r2, [r3, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000ea4:	609a      	str	r2, [r3, #8]
    {
    }
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	08006a34 	.word	0x08006a34
 8000eb4:	080067f4 	.word	0x080067f4

08000eb8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	7912      	ldrb	r2, [r2, #4]
 8000ed0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f979 	bl	80001d4 <strlen>
 8000ee2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	4413      	add	r3, r2
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fdfb 	bl	8001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	18d0      	adds	r0, r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f005 fab7 	bl	8006478 <memcpy>
      offset += length_msg;
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
      return offset;
 8000f12:	68fb      	ldr	r3, [r7, #12]
    }
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	441a      	add	r2, r3
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 fdeb 	bl	8001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	3304      	adds	r3, #4
 8000f52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d20c      	bcs.n	8000f7e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000f64:	683a      	ldr	r2, [r7, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	441a      	add	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	440b      	add	r3, r1
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e7ec      	b.n	8000f58 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	3b01      	subs	r3, #1
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	441a      	add	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
     return offset;
 8000fa2:	693b      	ldr	r3, [r7, #16]
    }
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	08006838 	.word	0x08006838

08000fc8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	0800684c 	.word	0x0800684c

08000fe4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc84 	bl	80008fc <_ZN3ros3MsgC1Ev>
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08006a1c 	.word	0x08006a1c

0800102c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	b2ca      	uxtb	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	0a19      	lsrs	r1, r3, #8
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	0c19      	lsrs	r1, r3, #16
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	3302      	adds	r3, #2
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	b2ca      	uxtb	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	0e19      	lsrs	r1, r3, #24
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	3303      	adds	r3, #3
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	4413      	add	r3, r2
 800107a:	b2ca      	uxtb	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	3304      	adds	r3, #4
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	6a3a      	ldr	r2, [r7, #32]
 800108e:	429a      	cmp	r2, r3
 8001090:	d22b      	bcs.n	80010ea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80010a0:	6939      	ldr	r1, [r7, #16]
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	0a19      	lsrs	r1, r3, #8
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	3301      	adds	r3, #1
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	b2ca      	uxtb	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	0c19      	lsrs	r1, r3, #16
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	3302      	adds	r3, #2
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	b2ca      	uxtb	r2, r1
 80010ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	0e19      	lsrs	r1, r3, #24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3303      	adds	r3, #3
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	3304      	adds	r3, #4
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	3301      	adds	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	e7ce      	b.n	8001088 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6919      	ldr	r1, [r3, #16]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	b2ca      	uxtb	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	0a19      	lsrs	r1, r3, #8
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	3301      	adds	r3, #1
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4413      	add	r3, r2
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	0c19      	lsrs	r1, r3, #16
 8001110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001112:	3302      	adds	r3, #2
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	0e19      	lsrs	r1, r3, #24
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	3303      	adds	r3, #3
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	4413      	add	r3, r2
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	3304      	adds	r3, #4
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	429a      	cmp	r2, r3
 8001140:	d22b      	bcs.n	800119a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001150:	68f9      	ldr	r1, [r7, #12]
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b2ca      	uxtb	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	0a19      	lsrs	r1, r3, #8
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	3301      	adds	r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	0c19      	lsrs	r1, r3, #16
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	3302      	adds	r3, #2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	b2ca      	uxtb	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	0e19      	lsrs	r1, r3, #24
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3303      	adds	r3, #3
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	3304      	adds	r3, #4
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	e7ce      	b.n	8001138 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69d9      	ldr	r1, [r3, #28]
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	0a19      	lsrs	r1, r3, #8
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	3301      	adds	r3, #1
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	0c19      	lsrs	r1, r3, #16
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	3302      	adds	r3, #2
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	0e19      	lsrs	r1, r3, #24
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	3303      	adds	r3, #3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3304      	adds	r3, #4
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d228      	bcs.n	8001244 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7fe ffe8 	bl	80001d4 <strlen>
 8001204:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc6a 	bl	8001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	3304      	adds	r3, #4
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	18d0      	adds	r0, r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4619      	mov	r1, r3
 8001230:	f005 f922 	bl	8006478 <memcpy>
      offset += length_stringsi;
 8001234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	4413      	add	r3, r2
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	3301      	adds	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	e7d1      	b.n	80011e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001246:	4618      	mov	r0, r3
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800124e:	b580      	push	{r7, lr}
 8001250:	b08e      	sub	sp, #56	; 0x38
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	3301      	adds	r3, #1
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	6a3a      	ldr	r2, [r7, #32]
 8001274:	4313      	orrs	r3, r2
 8001276:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127a:	3302      	adds	r3, #2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	6a3a      	ldr	r2, [r7, #32]
 8001286:	4313      	orrs	r3, r2
 8001288:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800128a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128c:	3303      	adds	r3, #3
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	4313      	orrs	r3, r2
 800129a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800129e:	3304      	adds	r3, #4
 80012a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	6a3a      	ldr	r2, [r7, #32]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d90a      	bls.n	80012c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f005 f8f4 	bl	80064a4 <realloc>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a3a      	ldr	r2, [r7, #32]
 80012c6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d236      	bcs.n	8001344 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440a      	add	r2, r1
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	3301      	adds	r3, #1
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	440b      	add	r3, r1
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	3302      	adds	r3, #2
 8001300:	6839      	ldr	r1, [r7, #0]
 8001302:	440b      	add	r3, r1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	041b      	lsls	r3, r3, #16
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	3303      	adds	r3, #3
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	440b      	add	r3, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	4313      	orrs	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	3304      	adds	r3, #4
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133e:	3301      	adds	r3, #1
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
 8001342:	e7c3      	b.n	80012cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001350:	3301      	adds	r3, #1
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4313      	orrs	r3, r2
 800135e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001362:	3302      	adds	r3, #2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	041b      	lsls	r3, r3, #16
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	4313      	orrs	r3, r2
 8001370:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001374:	3303      	adds	r3, #3
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4313      	orrs	r3, r2
 8001382:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001386:	3304      	adds	r3, #4
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	429a      	cmp	r2, r3
 8001392:	d90a      	bls.n	80013aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699a      	ldr	r2, [r3, #24]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4619      	mov	r1, r3
 800139e:	4610      	mov	r0, r2
 80013a0:	f005 f880 	bl	80064a4 <realloc>
 80013a4:	4602      	mov	r2, r0
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d236      	bcs.n	800142c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	440a      	add	r2, r1
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d4:	3301      	adds	r3, #1
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	440b      	add	r3, r1
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013e6:	3302      	adds	r3, #2
 80013e8:	6839      	ldr	r1, [r7, #0]
 80013ea:	440b      	add	r3, r1
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f8:	3303      	adds	r3, #3
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	061b      	lsls	r3, r3, #24
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	3304      	adds	r3, #4
 8001410:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	3214      	adds	r2, #20
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	3301      	adds	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	e7c3      	b.n	80013b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	3301      	adds	r3, #1
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	3302      	adds	r3, #2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	3303      	adds	r3, #3
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	061b      	lsls	r3, r3, #24
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	3304      	adds	r3, #4
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	429a      	cmp	r2, r3
 800147a:	d90a      	bls.n	8001492 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4619      	mov	r1, r3
 8001486:	4610      	mov	r0, r2
 8001488:	f005 f80c 	bl	80064a4 <realloc>
 800148c:	4602      	mov	r2, r0
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d23f      	bcs.n	8001526 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	441a      	add	r2, r3
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fb36 	bl	8001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ba:	3304      	adds	r3, #4
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	441a      	add	r2, r3
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	440b      	add	r3, r1
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	3301      	adds	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	e7ec      	b.n	80014c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80014e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	3b01      	subs	r3, #1
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80014f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fa:	3b01      	subs	r3, #1
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	441a      	add	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	3220      	adds	r2, #32
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	3301      	adds	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
 8001524:	e7ba      	b.n	800149c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001528:	4618      	mov	r0, r3
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	08006958 	.word	0x08006958

0800154c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	08006870 	.word	0x08006870

08001568 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
  }
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <_ZN13STM32HardwareC1Ev+0x34>)
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200000d8 	.word	0x200000d8

080015e0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f804 	bl	80015f6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160a:	4619      	mov	r1, r3
 800160c:	f003 fdde 	bl	80051cc <HAL_UART_Receive_DMA>
    }
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001624:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffa7 	bl	8001580 <_ZN13STM32Hardware10getRdmaIndEv>
 8001632:	4603      	mov	r3, r0
 8001634:	429c      	cmp	r4, r3
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d012      	beq.n	8001668 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001648:	1c59      	adds	r1, r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	791b      	ldrb	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800165e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001668:	68fb      	ldr	r3, [r7, #12]
    }
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
	...

08001674 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b20      	cmp	r3, #32
 8001688:	d108      	bne.n	800169c <_ZN13STM32Hardware5flushEv+0x28>
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <_ZN13STM32Hardware5flushEv+0xb8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_ZN13STM32Hardware5flushEv+0x28>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <_ZN13STM32Hardware5flushEv+0x2a>
 800169c:	2300      	movs	r3, #0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03f      	beq.n	8001722 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <_ZN13STM32Hardware5flushEv+0xb8>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d031      	beq.n	800171c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d20a      	bcs.n	80016de <_ZN13STM32Hardware5flushEv+0x6a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	e006      	b.n	80016ec <_ZN13STM32Hardware5flushEv+0x78>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	89fa      	ldrh	r2, [r7, #14]
 8001702:	4619      	mov	r1, r3
 8001704:	f003 fce4 	bl	80050d0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	4413      	add	r3, r2
 8001712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <_ZN13STM32Hardware5flushEv+0xb8>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
      }
    }
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001dc 	.word	0x200001dc

08001730 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
      int n = length;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001746:	bfa8      	it	ge
 8001748:	f44f 7300 	movge.w	r3, #512	; 0x200
 800174c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001754:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4293      	cmp	r3, r2
 800175c:	bf28      	it	cs
 800175e:	4613      	movcs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001768:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f004 fe7f 	bl	8006478 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	4413      	add	r3, r2
 8001784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	429a      	cmp	r2, r3
 8001794:	d00b      	beq.n	80017ae <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	18d1      	adds	r1, r2, r3
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	f004 fe65 	bl	8006478 <memcpy>
      }

      flush();
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7ff ff60 	bl	8001674 <_ZN13STM32Hardware5flushEv>
    }
 80017b4:	bf00      	nop
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	f001 faaa 	bl	8002d1c <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
      data(0)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f88c 	bl	80008fc <_ZN3ros3MsgC1Ev>
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_ZN8std_msgs5UInt8C1Ev+0x28>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	711a      	strb	r2, [r3, #4]
    {
    }
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080069d8 	.word	0x080069d8

08001800 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	7912      	ldrb	r2, [r2, #4]
 8001818:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
      return offset;
 8001820:	68fb      	ldr	r3, [r7, #12]
    }
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	3301      	adds	r3, #1
 800184c:	60fb      	str	r3, [r7, #12]
     return offset;
 800184e:	68fb      	ldr	r3, [r7, #12]
    }
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	08006894 	.word	0x08006894

08001878 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	080068a4 	.word	0x080068a4

08001894 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
      data(0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f82c 	bl	80008fc <_ZN3ros3MsgC1Ev>
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_ZN8std_msgs4BoolC1Ev+0x28>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	711a      	strb	r2, [r3, #4]
    {
    }
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	080069c0 	.word	0x080069c0

080018c0 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	7a3a      	ldrb	r2, [r7, #8]
 80018dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
      return offset;
 80018e4:	68fb      	ldr	r3, [r7, #12]
    }
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001904:	7a3a      	ldrb	r2, [r7, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	440b      	add	r3, r1
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8001914:	7a3a      	ldrb	r2, [r7, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
     return offset;
 8001920:	68fb      	ldr	r3, [r7, #12]
    }
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_ZN8std_msgs4Bool7getTypeEv>:

    const char * getType(){ return "std_msgs/Bool"; };
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	080068c8 	.word	0x080068c8

0800194c <_ZN8std_msgs4Bool6getMD5Ev>:
    const char * getMD5(){ return "8b94c1b53db61fb6aed406028ad6332a"; };
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	080068d8 	.word	0x080068d8

08001968 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt8> pwm_l_sub("pwm_l", &pwm_l_cb);
ros::Subscriber<std_msgs::UInt8> pwm_r_sub("pwm_r", &pwm_r_cb);
ros::Subscriber<std_msgs::Bool> dir_l_sub("dir_l", &dir_l_cb);
ros::Subscriber<std_msgs::Bool> dir_r_sub("dir_r", &dir_r_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_UART_TxCpltCallback+0x20>)
 8001972:	f000 f9e5 	bl	8001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001976:	4603      	mov	r3, r0
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe7b 	bl	8001674 <_ZN13STM32Hardware5flushEv>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200001e0 	.word	0x200001e0

0800198c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_UART_RxCpltCallback+0x20>)
 8001996:	f000 f9d3 	bl	8001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800199a:	4603      	mov	r3, r0
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe2a 	bl	80015f6 <_ZN13STM32Hardware10reset_rbufEv>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200001e0 	.word	0x200001e0

080019b0 <setup>:

void setup(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  nh.initNode();
 80019b4:	480e      	ldr	r0, [pc, #56]	; (80019f0 <setup+0x40>)
 80019b6:	f000 f9cf 	bl	8001d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(pwm_l_sub);
 80019ba:	490e      	ldr	r1, [pc, #56]	; (80019f4 <setup+0x44>)
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <setup+0x40>)
 80019be:	f000 f9e8 	bl	8001d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(pwm_r_sub);
 80019c2:	490d      	ldr	r1, [pc, #52]	; (80019f8 <setup+0x48>)
 80019c4:	480a      	ldr	r0, [pc, #40]	; (80019f0 <setup+0x40>)
 80019c6:	f000 f9e4 	bl	8001d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(dir_l_sub);
 80019ca:	490c      	ldr	r1, [pc, #48]	; (80019fc <setup+0x4c>)
 80019cc:	4808      	ldr	r0, [pc, #32]	; (80019f0 <setup+0x40>)
 80019ce:	f000 fa0b 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
  nh.subscribe(dir_r_sub);
 80019d2:	490b      	ldr	r1, [pc, #44]	; (8001a00 <setup+0x50>)
 80019d4:	4806      	ldr	r0, [pc, #24]	; (80019f0 <setup+0x40>)
 80019d6:	f000 fa07 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019da:	2100      	movs	r1, #0
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <setup+0x54>)
 80019de:	f002 fdb5 	bl	800454c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80019e2:	2104      	movs	r1, #4
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <setup+0x54>)
 80019e6:	f002 fdb1 	bl	800454c <HAL_TIM_PWM_Start>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200001e0 	.word	0x200001e0
 80019f4:	20000b1c 	.word	0x20000b1c
 80019f8:	20000b38 	.word	0x20000b38
 80019fc:	20000b54 	.word	0x20000b54
 8001a00:	20000b70 	.word	0x20000b70
 8001a04:	20000090 	.word	0x20000090

08001a08 <loop>:

void loop(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4804      	ldr	r0, [pc, #16]	; (8001a20 <loop+0x18>)
 8001a10:	f002 f841 	bl	8003a96 <HAL_GPIO_TogglePin>

  nh.spinOnce();
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <loop+0x1c>)
 8001a16:	f000 fa12 	bl	8001e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

//  HAL_Delay(1000);
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020400 	.word	0x40020400
 8001a24:	200001e0 	.word	0x200001e0

08001a28 <_Z8pwm_l_cbRKN8std_msgs5UInt8E>:

void pwm_l_cb(const std_msgs::UInt8& msg){
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	unsigned char pwm_l = msg.data;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_l);
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_Z8pwm_l_cbRKN8std_msgs5UInt8E+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000090 	.word	0x20000090

08001a50 <_Z8pwm_r_cbRKN8std_msgs5UInt8E>:

void pwm_r_cb(const std_msgs::UInt8& msg){
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	unsigned char pwm_r = msg.data;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	73fb      	strb	r3, [r7, #15]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_r);
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <_Z8pwm_r_cbRKN8std_msgs5UInt8E+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000090 	.word	0x20000090

08001a78 <_Z8dir_l_cbRKN8std_msgs4BoolE>:

void dir_l_cb(const std_msgs::Bool& msg){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	bool dir_l = msg.data;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	73fb      	strb	r3, [r7, #15]
	if(dir_l) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <_Z8dir_l_cbRKN8std_msgs4BoolE+0x20>
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2140      	movs	r1, #64	; 0x40
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <_Z8dir_l_cbRKN8std_msgs4BoolE+0x34>)
 8001a92:	f001 ffe7 	bl	8003a64 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
}
 8001a96:	e004      	b.n	8001aa2 <_Z8dir_l_cbRKN8std_msgs4BoolE+0x2a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2140      	movs	r1, #64	; 0x40
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <_Z8dir_l_cbRKN8std_msgs4BoolE+0x34>)
 8001a9e:	f001 ffe1 	bl	8003a64 <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020000 	.word	0x40020000

08001ab0 <_Z8dir_r_cbRKN8std_msgs4BoolE>:

void dir_r_cb(const std_msgs::Bool& msg){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	bool dir_r = msg.data;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	73fb      	strb	r3, [r7, #15]
	if(dir_r) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x20>
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x34>)
 8001aca:	f001 ffcb 	bl	8003a64 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
}
 8001ace:	e004      	b.n	8001ada <_Z8dir_r_cbRKN8std_msgs4BoolE+0x2a>
	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <_Z8dir_r_cbRKN8std_msgs4BoolE+0x34>)
 8001ad6:	f001 ffc5 	bl	8003a64 <HAL_GPIO_WritePin>
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d80d      	bhi.n	8001b18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	fa22 f103 	lsr.w	r1, r2, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e7ee      	b.n	8001af6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d811      	bhi.n	8001b62 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6839      	ldr	r1, [r7, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	440a      	add	r2, r1
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	00d2      	lsls	r2, r2, #3
 8001b50:	fa01 f202 	lsl.w	r2, r1, r2
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	e7ea      	b.n	8001b38 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	08006a08 	.word	0x08006a08

08001b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ffe8 	bl	8001b70 <_ZN3ros15NodeHandleBase_C1Ev>
 8001ba0:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fcfc 	bl	80015a8 <_ZN13STM32HardwareC1Ev>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa10 	bl	8000fe4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	d80b      	bhi.n	8001be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e7f0      	b.n	8001bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b18      	cmp	r3, #24
 8001bee:	d80a      	bhi.n	8001c06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	e7f1      	b.n	8001bea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c10:	d20a      	bcs.n	8001c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e7f0      	b.n	8001c0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c32:	d20a      	bcs.n	8001c4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	3301      	adds	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	e7f0      	b.n	8001c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	080069ac 	.word	0x080069ac

08001c90 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	080069f0 	.word	0x080069f0

08001cb0 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ffe5 	bl	8001c90 <_ZN3ros11Subscriber_C1Ev>
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	330c      	adds	r3, #12
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fd7f 	bl	80017d4 <_ZN8std_msgs5UInt8C1Ev>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	615a      	str	r2, [r3, #20]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	609a      	str	r2, [r3, #8]
  };
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08006994 	.word	0x08006994

08001cf8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffc1 	bl	8001c90 <_ZN3ros11Subscriber_C1Ev>
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	330c      	adds	r3, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdbb 	bl	8001894 <_ZN8std_msgs4BoolC1Ev>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	609a      	str	r2, [r3, #8]
  };
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	0800697c 	.word	0x0800697c

08001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
  }
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fc3b 	bl	80015e0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b18      	cmp	r3, #24
 8001da4:	dc19      	bgt.n	8001dda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10d      	bne.n	8001dd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
        return true;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e004      	b.n	8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e7e2      	b.n	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001dda:	2300      	movs	r3, #0
  }
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b18      	cmp	r3, #24
 8001dfa:	dc19      	bgt.n	8001e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001e0c:	6839      	ldr	r1, [r7, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	605a      	str	r2, [r3, #4]
        return true;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e004      	b.n	8001e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e7e2      	b.n	8001df6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs4BoolEvEEEEbRT_+0xe>
    return false;
 8001e30:	2300      	movs	r3, #0
  }
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fcb6 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 8001e50:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d903      	bls.n	8001e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d903      	bls.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d014      	beq.n	8001ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3304      	adds	r3, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fc8f 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	bf8c      	ite	hi
 8001eae:	2301      	movhi	r3, #1
 8001eb0:	2300      	movls	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001eb8:	f06f 0301 	mvn.w	r3, #1
 8001ebc:	e194      	b.n	80021e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fba8 	bl	8001618 <_ZN13STM32Hardware4readEv>
 8001ec8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f2c0 8174 	blt.w	80021ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	441a      	add	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ee8:	2b07      	cmp	r3, #7
 8001eea:	d11e      	bne.n	8001f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	b2d1      	uxtb	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	460a      	mov	r2, r1
 8001f04:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1b4      	bne.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2208      	movs	r2, #8
 8001f24:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f28:	e7af      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d128      	bne.n	8001f86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d10d      	bne.n	8001f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f103 0214 	add.w	r2, r3, #20
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001f54:	e799      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fc2e 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	bf8c      	ite	hi
 8001f6e:	2301      	movhi	r3, #1
 8001f70:	2300      	movls	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d088      	beq.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001f80:	f06f 0301 	mvn.w	r3, #1
 8001f84:	e130      	b.n	80021e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d118      	bne.n	8001fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2bfe      	cmp	r3, #254	; 0xfe
 8001f94:	d107      	bne.n	8001fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001fa4:	e771      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f af68 	bne.w	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f918 	bl	80021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001fc0:	e763      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d113      	bne.n	8001ff4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001ff2:	e74a      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d110      	bne.n	8002020 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	441a      	add	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800201e:	e734      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002026:	2b04      	cmp	r3, #4
 8002028:	d116      	bne.n	8002058 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002030:	425a      	negs	r2, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	bf58      	it	pl
 8002038:	4253      	negpl	r3, r2
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d107      	bne.n	800204e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800204c:	e71d      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002056:	e718      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10f      	bne.n	8002082 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002080:	e703      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002088:	2b06      	cmp	r3, #6
 800208a:	d117      	bne.n	80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	441a      	add	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2207      	movs	r2, #7
 80020a2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f aeec 	bne.w	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2208      	movs	r2, #8
 80020b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020ba:	e6e6      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	f47f aee1 	bne.w	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80020d6:	425a      	negs	r2, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	bf58      	it	pl
 80020de:	4253      	negpl	r3, r2
 80020e0:	2bff      	cmp	r3, #255	; 0xff
 80020e2:	f47f aed2 	bne.w	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d110      	bne.n	8002112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f87d 	bl	80021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f898 	bl	800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002110:	e06a      	b.n	80021e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002118:	2b0a      	cmp	r3, #10
 800211a:	d107      	bne.n	800212c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f961 	bl	80023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800212a:	e6ae      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d10e      	bne.n	8002154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f7ff f882 	bl	800124e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002152:	e69a      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800215a:	2b0b      	cmp	r3, #11
 800215c:	d104      	bne.n	8002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002166:	e690      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800216e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f43f ae84 	beq.w	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002188:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002192:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800219c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80021b4:	4611      	mov	r1, r2
 80021b6:	4798      	blx	r3
    while (true)
 80021b8:	e667      	b.n	8001e8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80021ba:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00f      	beq.n	80021e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d906      	bls.n	80021e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f809 	bl	80021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80021e6:	2300      	movs	r3, #0
  }
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fb8d 	bl	800091c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	210a      	movs	r1, #10
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
    rt_time = hardware_.time();
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fad0 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 800221c:	4602      	mov	r2, r0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800222c:	b590      	push	{r4, r7, lr}
 800222e:	b08b      	sub	sp, #44	; 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fc5f 	bl	8000afc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	2b18      	cmp	r3, #24
 8002246:	dc63      	bgt.n	8002310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d056      	beq.n	8002308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	b29b      	uxth	r3, r3
 800226c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3308      	adds	r3, #8
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4608      	mov	r0, r1
 80022a8:	4798      	blx	r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	6859      	ldr	r1, [r3, #4]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	330c      	adds	r3, #12
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4798      	blx	r3
 80022d8:	4603      	mov	r3, r0
 80022da:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80022dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681c      	ldr	r4, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff f936 	bl	8001568 <_ZN3ros9Publisher15getEndpointTypeEv>
 80022fc:	4601      	mov	r1, r0
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	461a      	mov	r2, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
 800230e:	e798      	b.n	8002242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	2b18      	cmp	r3, #24
 8002318:	dc5f      	bgt.n	80023da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d053      	beq.n	80023d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	b29b      	uxth	r3, r3
 800233a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002340:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002350:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3308      	adds	r3, #8
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4608      	mov	r0, r1
 800236c:	4798      	blx	r3
 800236e:	4603      	mov	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	f202 2222 	addw	r2, r2, #546	; 0x222
 800237a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	330c      	adds	r3, #12
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4608      	mov	r0, r1
 8002392:	4798      	blx	r3
 8002394:	4603      	mov	r3, r0
 8002396:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681c      	ldr	r4, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3304      	adds	r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4608      	mov	r0, r1
 80023c4:	4798      	blx	r3
 80023c6:	4601      	mov	r1, r0
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	461a      	mov	r2, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3301      	adds	r3, #1
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	e79c      	b.n	8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80023e2:	bf00      	nop
 80023e4:	372c      	adds	r7, #44	; 0x2c
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
	...

080023ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80023f6:	f107 0308 	add.w	r3, r7, #8
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fa8e 	bl	800091c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3304      	adds	r3, #4
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f9d9 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 800240a:	4602      	mov	r2, r0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe faed 	bl	80009fc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	4915      	ldr	r1, [pc, #84]	; (800247c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002428:	fba1 1303 	umull	r1, r3, r1, r3
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002432:	6939      	ldr	r1, [r7, #16]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002438:	fba3 0302 	umull	r0, r3, r3, r2
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002442:	fb00 f303 	mul.w	r3, r0, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	440b      	add	r3, r1
 8002450:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8a6 	bl	80025ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9a9 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	10624dd3 	.word	0x10624dd3
 8002480:	000f4240 	.word	0x000f4240

08002484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b63      	cmp	r3, #99	; 0x63
 8002494:	dd09      	ble.n	80024aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e079      	b.n	800259e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80024b6:	3207      	adds	r2, #7
 80024b8:	4611      	mov	r1, r2
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	22ff      	movs	r2, #255	; 0xff
 80024c4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	22fe      	movs	r2, #254	; 0xfe
 80024cc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80024f6:	4413      	add	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	b21b      	sxth	r3, r3
 8002512:	121b      	asrs	r3, r3, #8
 8002514:	b21b      	sxth	r3, r3
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002522:	2305      	movs	r3, #5
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3306      	adds	r3, #6
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	429a      	cmp	r2, r3
 800252e:	dc0d      	bgt.n	800254c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	4413      	add	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3301      	adds	r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e7ec      	b.n	8002526 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3307      	adds	r3, #7
 8002550:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	425a      	negs	r2, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	bf58      	it	pl
 800255c:	4253      	negpl	r3, r2
 800255e:	b2da      	uxtb	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	6179      	str	r1, [r7, #20]
 8002566:	43d2      	mvns	r2, r2
 8002568:	b2d1      	uxtb	r1, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	460a      	mov	r2, r1
 8002570:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257a:	dc0a      	bgt.n	8002592 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1d18      	adds	r0, r3, #4
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4619      	mov	r1, r3
 800258a:	f7ff f8d1 	bl	8001730 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	e005      	b.n	800259e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002592:	4905      	ldr	r1, [pc, #20]	; (80025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f849 	bl	800262c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	080068fc 	.word	0x080068fc

080025ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f8fe 	bl	80017bc <_ZN13STM32Hardware4timeEv>
 80025c0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4915      	ldr	r1, [pc, #84]	; (8002620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80025ca:	fba1 1303 	umull	r1, r3, r1, r3
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80025e2:	fba3 0302 	umull	r0, r3, r3, r2
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ec:	fb00 f303 	mul.w	r3, r0, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	1aca      	subs	r2, r1, r3
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80025fc:	4413      	add	r3, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f7fd ff68 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	10624dd3 	.word	0x10624dd3
 8002624:	000f4240 	.word	0x000f4240
 8002628:	3b9aca00 	.word	0x3b9aca00

0800262c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	2103      	movs	r1, #3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f804 	bl	8002648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	460b      	mov	r3, r1
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fc12 	bl	8000e84 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f107 0214 	add.w	r2, r7, #20
 8002672:	2107      	movs	r1, #7
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	4798      	blx	r3
  }
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_Z41__static_initialization_and_destruction_0ii>:
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11f      	bne.n	80026d0 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	4293      	cmp	r3, r2
 8002698:	d11a      	bne.n	80026d0 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 800269a:	480f      	ldr	r0, [pc, #60]	; (80026d8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800269c:	f7ff fa78 	bl	8001b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::UInt8> pwm_l_sub("pwm_l", &pwm_l_cb);
 80026a0:	2301      	movs	r3, #1
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026a6:	480f      	ldr	r0, [pc, #60]	; (80026e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026a8:	f7ff fb02 	bl	8001cb0 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> pwm_r_sub("pwm_r", &pwm_r_cb);
 80026ac:	2301      	movs	r3, #1
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026b2:	480f      	ldr	r0, [pc, #60]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026b4:	f7ff fafc 	bl	8001cb0 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> dir_l_sub("dir_l", &dir_l_cb);
 80026b8:	2301      	movs	r3, #1
 80026ba:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80026bc:	490e      	ldr	r1, [pc, #56]	; (80026f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80026be:	480f      	ldr	r0, [pc, #60]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80026c0:	f7ff fb1a 	bl	8001cf8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> dir_r_sub("dir_r", &dir_r_cb);
 80026c4:	2301      	movs	r3, #1
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80026c8:	490e      	ldr	r1, [pc, #56]	; (8002704 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80026ca:	480f      	ldr	r0, [pc, #60]	; (8002708 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80026cc:	f7ff fb14 	bl	8001cf8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200001e0 	.word	0x200001e0
 80026dc:	08001a29 	.word	0x08001a29
 80026e0:	08006938 	.word	0x08006938
 80026e4:	20000b1c 	.word	0x20000b1c
 80026e8:	08001a51 	.word	0x08001a51
 80026ec:	08006940 	.word	0x08006940
 80026f0:	20000b38 	.word	0x20000b38
 80026f4:	08001a79 	.word	0x08001a79
 80026f8:	08006948 	.word	0x08006948
 80026fc:	20000b54 	.word	0x20000b54
 8002700:	08001ab1 	.word	0x08001ab1
 8002704:	08006950 	.word	0x08006950
 8002708:	20000b70 	.word	0x20000b70

0800270c <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	330c      	adds	r3, #12
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f8e8 	bl	80018f2 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	320c      	adds	r2, #12
 800272a:	4610      	mov	r0, r2
 800272c:	4798      	blx	r3
  }
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
  }
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	330c      	adds	r3, #12
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f8e8 	bl	8001930 <_ZN8std_msgs4Bool7getTypeEv>
 8002760:	4603      	mov	r3, r0
  }
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	330c      	adds	r3, #12
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f8e8 	bl	800194c <_ZN8std_msgs4Bool6getMD5Ev>
 800277c:	4603      	mov	r3, r0
  }
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	330c      	adds	r3, #12
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f849 	bl	800182e <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	320c      	adds	r2, #12
 80027a4:	4610      	mov	r0, r2
 80027a6:	4798      	blx	r3
  }
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
    return endpoint_;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
  }
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	330c      	adds	r3, #12
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f841 	bl	800185c <_ZN8std_msgs5UInt87getTypeEv>
 80027da:	4603      	mov	r3, r0
  }
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	330c      	adds	r3, #12
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f841 	bl	8001878 <_ZN8std_msgs5UInt86getMD5Ev>
 80027f6:	4603      	mov	r3, r0
  }
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    return configured_;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_GLOBAL__sub_I_nh>:
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
 800281e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002822:	2001      	movs	r0, #1
 8002824:	f7ff ff2c 	bl	8002680 <_Z41__static_initialization_and_destruction_0ii>
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_MspInit+0x4c>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_MspInit+0x4c>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_MspInit+0x4c>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_MspInit+0x4c>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800286a:	2007      	movs	r0, #7
 800286c:	f000 fb32 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d10d      	bne.n	80028aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_TIM_Base_MspInit+0x3c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d11d      	bne.n	800291a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_TIM_MspPostInit+0x68>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80028fa:	2322      	movs	r3, #34	; 0x22
 80028fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <HAL_TIM_MspPostInit+0x6c>)
 8002916:	f000 ff21 	bl	800375c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800291a:	bf00      	nop
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000

0800292c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a4c      	ldr	r2, [pc, #304]	; (8002a7c <HAL_UART_MspInit+0x150>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f040 8091 	bne.w	8002a72 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_UART_MspInit+0x154>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a49      	ldr	r2, [pc, #292]	; (8002a80 <HAL_UART_MspInit+0x154>)
 800295a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_UART_MspInit+0x154>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_UART_MspInit+0x154>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4a42      	ldr	r2, [pc, #264]	; (8002a80 <HAL_UART_MspInit+0x154>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6313      	str	r3, [r2, #48]	; 0x30
 800297c:	4b40      	ldr	r3, [pc, #256]	; (8002a80 <HAL_UART_MspInit+0x154>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002988:	230c      	movs	r3, #12
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002998:	2307      	movs	r3, #7
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	4838      	ldr	r0, [pc, #224]	; (8002a84 <HAL_UART_MspInit+0x158>)
 80029a4:	f000 feda 	bl	800375c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029aa:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_UART_MspInit+0x160>)
 80029ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029ae:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b6:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029bc:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80029d6:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80029ea:	4827      	ldr	r0, [pc, #156]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029ec:	f000 fab4 	bl	8002f58 <HAL_DMA_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80029f6:	f7fd ff6b 	bl	80008d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <HAL_UART_MspInit+0x15c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a08:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_UART_MspInit+0x168>)
 8002a0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a12:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a26:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a34:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002a46:	4812      	ldr	r0, [pc, #72]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a48:	f000 fa86 	bl	8002f58 <HAL_DMA_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002a52:	f7fd ff3d 	bl	80008d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_UART_MspInit+0x164>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2026      	movs	r0, #38	; 0x26
 8002a68:	f000 fa3f 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a6c:	2026      	movs	r0, #38	; 0x26
 8002a6e:	f000 fa58 	bl	8002f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	2000011c 	.word	0x2000011c
 8002a8c:	40026088 	.word	0x40026088
 8002a90:	2000017c 	.word	0x2000017c
 8002a94:	400260a0 	.word	0x400260a0

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <NMI_Handler+0x4>

08002a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <HardFault_Handler+0x4>

08002aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <MemManage_Handler+0x4>

08002aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aae:	e7fe      	b.n	8002aae <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae4:	f000 f906 	bl	8002cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <DMA1_Stream5_IRQHandler+0x10>)
 8002af2:	f000 fbc9 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000011c 	.word	0x2000011c

08002b00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <DMA1_Stream6_IRQHandler+0x10>)
 8002b06:	f000 fbbf 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000017c 	.word	0x2000017c

08002b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <USART2_IRQHandler+0x10>)
 8002b1a:	f002 fb87 	bl	800522c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	200000d8 	.word	0x200000d8

08002b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
	return 1;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_kill>:

int _kill(int pid, int sig)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b42:	f003 fc6f 	bl	8006424 <__errno>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2216      	movs	r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_exit>:

void _exit (int status)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ffe7 	bl	8002b38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b6a:	e7fe      	b.n	8002b6a <_exit+0x12>

08002b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b74:	4a14      	ldr	r2, [pc, #80]	; (8002bc8 <_sbrk+0x5c>)
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <_sbrk+0x60>)
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b80:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <_sbrk+0x64>)
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <_sbrk+0x68>)
 8002b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <_sbrk+0x64>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d207      	bcs.n	8002bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b9c:	f003 fc42 	bl	8006424 <__errno>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002baa:	e009      	b.n	8002bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <_sbrk+0x64>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <_sbrk+0x64>)
 8002bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20018000 	.word	0x20018000
 8002bcc:	00000400 	.word	0x00000400
 8002bd0:	20000b8c 	.word	0x20000b8c
 8002bd4:	20000ba8 	.word	0x20000ba8

08002bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <SystemInit+0x20>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <SystemInit+0x20>)
 8002be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480d      	ldr	r0, [pc, #52]	; (8002c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c18:	4c0b      	ldr	r4, [pc, #44]	; (8002c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c26:	f7ff ffd7 	bl	8002bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f003 fc01 	bl	8006430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2e:	f7fd fc87 	bl	8000540 <main>
  bx  lr    
 8002c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c40:	08006ac0 	.word	0x08006ac0
  ldr r2, =_sbss
 8002c44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c48:	20000ba4 	.word	0x20000ba4

08002c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC_IRQHandler>
	...

08002c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_Init+0x40>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_Init+0x40>)
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_Init+0x40>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_Init+0x40>)
 8002c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_Init+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <HAL_Init+0x40>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c78:	2003      	movs	r0, #3
 8002c7a:	f000 f92b 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f000 f808 	bl	8002c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c84:	f7ff fdd2 	bl	800282c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40023c00 	.word	0x40023c00

08002c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_InitTick+0x54>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_InitTick+0x58>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f943 	bl	8002f3e <HAL_SYSTICK_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e00e      	b.n	8002ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d80a      	bhi.n	8002cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cd0:	f000 f90b 	bl	8002eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <HAL_InitTick+0x5c>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e000      	b.n	8002ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000000 	.word	0x20000000
 8002cec:	20000008 	.word	0x20000008
 8002cf0:	20000004 	.word	0x20000004

08002cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf8:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_IncTick+0x20>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_IncTick+0x24>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4413      	add	r3, r2
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_IncTick+0x24>)
 8002d06:	6013      	str	r3, [r2, #0]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000008 	.word	0x20000008
 8002d18:	20000b90 	.word	0x20000b90

08002d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <HAL_GetTick+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20000b90 	.word	0x20000b90

08002d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d50:	4013      	ands	r3, r2
 8002d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <__NVIC_SetPriorityGrouping+0x44>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	60d3      	str	r3, [r2, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__NVIC_GetPriorityGrouping+0x18>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0307 	and.w	r3, r3, #7
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	db0b      	blt.n	8002dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <__NVIC_EnableIRQ+0x38>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2001      	movs	r0, #1
 8002dba:	fa00 f202 	lsl.w	r2, r0, r2
 8002dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000e100 	.word	0xe000e100

08002dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	6039      	str	r1, [r7, #0]
 8002dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	db0a      	blt.n	8002dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	490c      	ldr	r1, [pc, #48]	; (8002e20 <__NVIC_SetPriority+0x4c>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	0112      	lsls	r2, r2, #4
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dfc:	e00a      	b.n	8002e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4908      	ldr	r1, [pc, #32]	; (8002e24 <__NVIC_SetPriority+0x50>)
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	3b04      	subs	r3, #4
 8002e0c:	0112      	lsls	r2, r2, #4
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	440b      	add	r3, r1
 8002e12:	761a      	strb	r2, [r3, #24]
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000e100 	.word	0xe000e100
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf28      	it	cs
 8002e46:	2304      	movcs	r3, #4
 8002e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d902      	bls.n	8002e58 <NVIC_EncodePriority+0x30>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3b03      	subs	r3, #3
 8002e56:	e000      	b.n	8002e5a <NVIC_EncodePriority+0x32>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	4313      	orrs	r3, r2
         );
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3724      	adds	r7, #36	; 0x24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea0:	d301      	bcc.n	8002ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00f      	b.n	8002ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <SysTick_Config+0x40>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eae:	210f      	movs	r1, #15
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb4:	f7ff ff8e 	bl	8002dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <SysTick_Config+0x40>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <SysTick_Config+0x40>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	e000e010 	.word	0xe000e010

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff29 	bl	8002d34 <__NVIC_SetPriorityGrouping>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002efc:	f7ff ff3e 	bl	8002d7c <__NVIC_GetPriorityGrouping>
 8002f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ff8e 	bl	8002e28 <NVIC_EncodePriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff5d 	bl	8002dd4 <__NVIC_SetPriority>
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff31 	bl	8002d98 <__NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ffa2 	bl	8002e90 <SysTick_Config>
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff feda 	bl	8002d1c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e099      	b.n	80030a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f94:	e00f      	b.n	8002fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f96:	f7ff fec1 	bl	8002d1c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d908      	bls.n	8002fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2203      	movs	r2, #3
 8002fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e078      	b.n	80030a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e8      	bne.n	8002f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_DMA_Init+0x158>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b04      	cmp	r3, #4
 800300e:	d107      	bne.n	8003020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	4313      	orrs	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b04      	cmp	r3, #4
 8003048:	d117      	bne.n	800307a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00e      	beq.n	800307a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fb01 	bl	8003664 <DMA_CheckFifoParam>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003076:	2301      	movs	r3, #1
 8003078:	e016      	b.n	80030a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fab8 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 8003088:	4603      	mov	r3, r0
 800308a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	223f      	movs	r2, #63	; 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	f010803f 	.word	0xf010803f

080030b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Start_IT+0x26>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e040      	b.n	800315c <HAL_DMA_Start_IT+0xa8>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d12f      	bne.n	800314e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2202      	movs	r2, #2
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fa4a 	bl	800359c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	223f      	movs	r2, #63	; 0x3f
 800310e:	409a      	lsls	r2, r3
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0216 	orr.w	r2, r2, #22
 8003122:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0208 	orr.w	r2, r2, #8
 800313a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e005      	b.n	800315a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7ff fdd3 	bl	8002d1c <HAL_GetTick>
 8003176:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d008      	beq.n	8003196 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e052      	b.n	800323c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0216 	bic.w	r2, r2, #22
 80031a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d103      	bne.n	80031c6 <HAL_DMA_Abort+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0208 	bic.w	r2, r2, #8
 80031d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e6:	e013      	b.n	8003210 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e8:	f7ff fd98 	bl	8002d1c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b05      	cmp	r3, #5
 80031f4:	d90c      	bls.n	8003210 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e015      	b.n	800323c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e4      	bne.n	80031e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	223f      	movs	r2, #63	; 0x3f
 8003224:	409a      	lsls	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00c      	b.n	800327c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <HAL_DMA_IRQHandler+0x248>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a8e      	ldr	r2, [pc, #568]	; (80034d4 <HAL_DMA_IRQHandler+0x24c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2210      	movs	r2, #16
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e01f      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e016      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2220      	movs	r2, #32
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808f 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	2220      	movs	r2, #32
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d136      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_IRQHandler+0x1da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	223f      	movs	r2, #63	; 0x3f
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	2b00      	cmp	r3, #0
 8003494:	d07e      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
        }
        return;
 800349e:	e079      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e02c      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01e      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0210 	bic.w	r2, r2, #16
 8003506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d032      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2205      	movs	r2, #5
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3301      	adds	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f2      	bne.n	8003554 <HAL_DMA_IRQHandler+0x2cc>
 800356e:	e000      	b.n	8003572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e000      	b.n	8003596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003594:	bf00      	nop
    }
  }
}
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d108      	bne.n	80035dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035da:	e007      	b.n	80035ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3b10      	subs	r3, #16
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <DMA_CalcBaseAndBitshift+0x64>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d909      	bls.n	800363a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
 8003638:	e007      	b.n	800364a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	aaaaaaab 	.word	0xaaaaaaab
 8003660:	08006aa4 	.word	0x08006aa4

08003664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d856      	bhi.n	8003732 <DMA_CheckFifoParam+0xce>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <DMA_CheckFifoParam+0x28>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036af 	.word	0x080036af
 8003694:	0800369d 	.word	0x0800369d
 8003698:	08003733 	.word	0x08003733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d046      	beq.n	8003736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e043      	b.n	8003736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b6:	d140      	bne.n	800373a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e03d      	b.n	800373a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d121      	bne.n	800370c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d837      	bhi.n	800373e <DMA_CheckFifoParam+0xda>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <DMA_CheckFifoParam+0x70>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036eb 	.word	0x080036eb
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	080036fd 	.word	0x080036fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e030      	b.n	800374c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d025      	beq.n	8003742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fa:	e022      	b.n	8003742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003704:	d11f      	bne.n	8003746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370a:	e01c      	b.n	8003746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d903      	bls.n	800371a <DMA_CheckFifoParam+0xb6>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d003      	beq.n	8003720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003718:	e018      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      break;
 800371e:	e015      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e00b      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003732:	bf00      	nop
 8003734:	e00a      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e008      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e006      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e004      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;   
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
    }
  } 
  
  return status; 
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e159      	b.n	8003a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8148 	bne.w	8003a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d005      	beq.n	80037ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d130      	bne.n	8003810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e4:	2201      	movs	r2, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0201 	and.w	r2, r3, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d017      	beq.n	800384c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d123      	bne.n	80038a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3208      	adds	r2, #8
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0203 	and.w	r2, r3, #3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a2 	beq.w	8003a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b54      	ldr	r3, [pc, #336]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fe:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a49      	ldr	r2, [pc, #292]	; (8003a4c <HAL_GPIO_Init+0x2f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d019      	beq.n	800395e <HAL_GPIO_Init+0x202>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a48      	ldr	r2, [pc, #288]	; (8003a50 <HAL_GPIO_Init+0x2f4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_GPIO_Init+0x1fe>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a47      	ldr	r2, [pc, #284]	; (8003a54 <HAL_GPIO_Init+0x2f8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00d      	beq.n	8003956 <HAL_GPIO_Init+0x1fa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a46      	ldr	r2, [pc, #280]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_GPIO_Init+0x1f6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a45      	ldr	r2, [pc, #276]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_GPIO_Init+0x1f2>
 800394a:	2304      	movs	r3, #4
 800394c:	e008      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800394e:	2307      	movs	r3, #7
 8003950:	e006      	b.n	8003960 <HAL_GPIO_Init+0x204>
 8003952:	2303      	movs	r3, #3
 8003954:	e004      	b.n	8003960 <HAL_GPIO_Init+0x204>
 8003956:	2302      	movs	r3, #2
 8003958:	e002      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_GPIO_Init+0x204>
 800395e:	2300      	movs	r3, #0
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	f002 0203 	and.w	r2, r2, #3
 8003966:	0092      	lsls	r2, r2, #2
 8003968:	4093      	lsls	r3, r2
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003970:	4935      	ldr	r1, [pc, #212]	; (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	3302      	adds	r3, #2
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <HAL_GPIO_Init+0x304>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039a2:	4a2f      	ldr	r2, [pc, #188]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a8:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039fc:	4b18      	ldr	r3, [pc, #96]	; (8003a60 <HAL_GPIO_Init+0x304>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a20:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <HAL_GPIO_Init+0x304>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	f67f aea2 	bls.w	8003778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	40020400 	.word	0x40020400
 8003a54:	40020800 	.word	0x40020800
 8003a58:	40020c00 	.word	0x40020c00
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	041a      	lsls	r2, r3, #16
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	619a      	str	r2, [r3, #24]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e267      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d075      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aea:	4b88      	ldr	r3, [pc, #544]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d00c      	beq.n	8003b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003af6:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d112      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b02:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b0e:	d10b      	bne.n	8003b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	4b7e      	ldr	r3, [pc, #504]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d05b      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x108>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d157      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e242      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d106      	bne.n	8003b40 <HAL_RCC_OscConfig+0x74>
 8003b32:	4b76      	ldr	r3, [pc, #472]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a75      	ldr	r2, [pc, #468]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e01d      	b.n	8003b7c <HAL_RCC_OscConfig+0xb0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x98>
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6f      	ldr	r2, [pc, #444]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6c      	ldr	r2, [pc, #432]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e00b      	b.n	8003b7c <HAL_RCC_OscConfig+0xb0>
 8003b64:	4b69      	ldr	r3, [pc, #420]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d013      	beq.n	8003bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff f8ca 	bl	8002d1c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7ff f8c6 	bl	8002d1c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e207      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003baa:	e014      	b.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7ff f8b6 	bl	8002d1c <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7ff f8b2 	bl	8002d1c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1f3      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xe8>
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be2:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bee:	4b47      	ldr	r3, [pc, #284]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d11c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfa:	4b44      	ldr	r3, [pc, #272]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c06:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_RCC_OscConfig+0x152>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d001      	beq.n	8003c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1c7      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4937      	ldr	r1, [pc, #220]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e03a      	b.n	8003caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3c:	4b34      	ldr	r3, [pc, #208]	; (8003d10 <HAL_RCC_OscConfig+0x244>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7ff f86b 	bl	8002d1c <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7ff f867 	bl	8002d1c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e1a8      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4925      	ldr	r1, [pc, #148]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_RCC_OscConfig+0x244>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7ff f84a 	bl	8002d1c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7ff f846 	bl	8002d1c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e187      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9e:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d036      	beq.n	8003d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d016      	beq.n	8003cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_RCC_OscConfig+0x248>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7ff f82a 	bl	8002d1c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ccc:	f7ff f826 	bl	8002d1c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e167      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0x200>
 8003cea:	e01b      	b.n	8003d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_OscConfig+0x248>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf2:	f7ff f813 	bl	8002d1c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf8:	e00e      	b.n	8003d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfa:	f7ff f80f 	bl	8002d1c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d907      	bls.n	8003d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e150      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	42470000 	.word	0x42470000
 8003d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b88      	ldr	r3, [pc, #544]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ea      	bne.n	8003cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8097 	beq.w	8003e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b81      	ldr	r3, [pc, #516]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b7d      	ldr	r3, [pc, #500]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b7a      	ldr	r3, [pc, #488]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b77      	ldr	r3, [pc, #476]	; (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b74      	ldr	r3, [pc, #464]	; (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a73      	ldr	r2, [pc, #460]	; (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe ffcf 	bl	8002d1c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe ffcb 	bl	8002d1c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e10c      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_RCC_OscConfig+0x474>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2ea>
 8003da8:	4b64      	ldr	r3, [pc, #400]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a63      	ldr	r2, [pc, #396]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	e01c      	b.n	8003df0 <HAL_RCC_OscConfig+0x324>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x30c>
 8003dbe:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a5e      	ldr	r2, [pc, #376]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dc4:	f043 0304 	orr.w	r3, r3, #4
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	4b5c      	ldr	r3, [pc, #368]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a5b      	ldr	r2, [pc, #364]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCC_OscConfig+0x324>
 8003dd8:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	; 0x70
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	4a54      	ldr	r2, [pc, #336]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003dea:	f023 0304 	bic.w	r3, r3, #4
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fe ff90 	bl	8002d1c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe ff8c 	bl	8002d1c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0cb      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0ee      	beq.n	8003e00 <HAL_RCC_OscConfig+0x334>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e24:	f7fe ff7a 	bl	8002d1c <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fe ff76 	bl	8002d1c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e0b5      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e42:	4b3e      	ldr	r3, [pc, #248]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ee      	bne.n	8003e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b39      	ldr	r3, [pc, #228]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a38      	ldr	r2, [pc, #224]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a1 	beq.w	8003fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d05c      	beq.n	8003f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d141      	bne.n	8003f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe ff4a 	bl	8002d1c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8c:	f7fe ff46 	bl	8002d1c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e087      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9e:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	019b      	lsls	r3, r3, #6
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	491b      	ldr	r1, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe ff1f 	bl	8002d1c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fe ff1b 	bl	8002d1c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e05c      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x416>
 8003f00:	e054      	b.n	8003fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_RCC_OscConfig+0x478>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fe ff08 	bl	8002d1c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe ff04 	bl	8002d1c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e045      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x470>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x444>
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e038      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_RCC_OscConfig+0x4ec>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d028      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d121      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d11a      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0cc      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d90c      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe6:	4b63      	ldr	r3, [pc, #396]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0b8      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d020      	beq.n	8004046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a58      	ldr	r2, [pc, #352]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800401a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004028:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004034:	4b50      	ldr	r3, [pc, #320]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	494d      	ldr	r1, [pc, #308]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d044      	beq.n	80040dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d107      	bne.n	800406a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d119      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d003      	beq.n	800407a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004076:	2b03      	cmp	r3, #3
 8004078:	d107      	bne.n	800408a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	4b3f      	ldr	r3, [pc, #252]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e067      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409a:	4b37      	ldr	r3, [pc, #220]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f023 0203 	bic.w	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4934      	ldr	r1, [pc, #208]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ac:	f7fe fe36 	bl	8002d1c <HAL_GetTick>
 80040b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b4:	f7fe fe32 	bl	8002d1c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e04f      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	4b2b      	ldr	r3, [pc, #172]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 020c 	and.w	r2, r3, #12
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	429a      	cmp	r2, r3
 80040da:	d1eb      	bne.n	80040b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d20c      	bcs.n	8004104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b20      	ldr	r3, [pc, #128]	; (8004174 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e032      	b.n	800416a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4916      	ldr	r1, [pc, #88]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412e:	4b12      	ldr	r3, [pc, #72]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004142:	f000 f821 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490a      	ldr	r1, [pc, #40]	; (800417c <HAL_RCC_ClockConfig+0x1c0>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	fa22 f303 	lsr.w	r3, r2, r3
 800415a:	4a09      	ldr	r2, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c4>)
 800415c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415e:	4b09      	ldr	r3, [pc, #36]	; (8004184 <HAL_RCC_ClockConfig+0x1c8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fd96 	bl	8002c94 <HAL_InitTick>

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40023c00 	.word	0x40023c00
 8004178:	40023800 	.word	0x40023800
 800417c:	08006a8c 	.word	0x08006a8c
 8004180:	20000000 	.word	0x20000000
 8004184:	20000004 	.word	0x20000004

08004188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b094      	sub	sp, #80	; 0x50
 800418e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
 8004194:	2300      	movs	r3, #0
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004198:	2300      	movs	r3, #0
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041a0:	4b79      	ldr	r3, [pc, #484]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d00d      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x40>
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	f200 80e1 	bhi.w	8004374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x34>
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ba:	e0db      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041bc:	4b73      	ldr	r3, [pc, #460]	; (800438c <HAL_RCC_GetSysClockFreq+0x204>)
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041c0:	e0db      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041c2:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCC_GetSysClockFreq+0x208>)
 80041c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041c6:	e0d8      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c8:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041d2:	4b6d      	ldr	r3, [pc, #436]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041de:	4b6a      	ldr	r3, [pc, #424]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	2200      	movs	r2, #0
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80041e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
 80041f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	f04f 0000 	mov.w	r0, #0
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800420c:	0150      	lsls	r0, r2, #5
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4621      	mov	r1, r4
 8004214:	1a51      	subs	r1, r2, r1
 8004216:	6139      	str	r1, [r7, #16]
 8004218:	4629      	mov	r1, r5
 800421a:	eb63 0301 	sbc.w	r3, r3, r1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800422c:	4659      	mov	r1, fp
 800422e:	018b      	lsls	r3, r1, #6
 8004230:	4651      	mov	r1, sl
 8004232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004236:	4651      	mov	r1, sl
 8004238:	018a      	lsls	r2, r1, #6
 800423a:	4651      	mov	r1, sl
 800423c:	ebb2 0801 	subs.w	r8, r2, r1
 8004240:	4659      	mov	r1, fp
 8004242:	eb63 0901 	sbc.w	r9, r3, r1
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800425a:	4690      	mov	r8, r2
 800425c:	4699      	mov	r9, r3
 800425e:	4623      	mov	r3, r4
 8004260:	eb18 0303 	adds.w	r3, r8, r3
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	462b      	mov	r3, r5
 8004268:	eb49 0303 	adc.w	r3, r9, r3
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800427a:	4629      	mov	r1, r5
 800427c:	024b      	lsls	r3, r1, #9
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004284:	4621      	mov	r1, r4
 8004286:	024a      	lsls	r2, r1, #9
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428e:	2200      	movs	r2, #0
 8004290:	62bb      	str	r3, [r7, #40]	; 0x28
 8004292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004298:	f7fb ffa4 	bl	80001e4 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	e058      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b38      	ldr	r3, [pc, #224]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	4611      	mov	r1, r2
 80042b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
 80042bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042c0:	4642      	mov	r2, r8
 80042c2:	464b      	mov	r3, r9
 80042c4:	f04f 0000 	mov.w	r0, #0
 80042c8:	f04f 0100 	mov.w	r1, #0
 80042cc:	0159      	lsls	r1, r3, #5
 80042ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d2:	0150      	lsls	r0, r2, #5
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4641      	mov	r1, r8
 80042da:	ebb2 0a01 	subs.w	sl, r2, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042f8:	ebb2 040a 	subs.w	r4, r2, sl
 80042fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	00eb      	lsls	r3, r5, #3
 800430a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800430e:	00e2      	lsls	r2, r4, #3
 8004310:	4614      	mov	r4, r2
 8004312:	461d      	mov	r5, r3
 8004314:	4643      	mov	r3, r8
 8004316:	18e3      	adds	r3, r4, r3
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	464b      	mov	r3, r9
 800431c:	eb45 0303 	adc.w	r3, r5, r3
 8004320:	607b      	str	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800432e:	4629      	mov	r1, r5
 8004330:	028b      	lsls	r3, r1, #10
 8004332:	4621      	mov	r1, r4
 8004334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004338:	4621      	mov	r1, r4
 800433a:	028a      	lsls	r2, r1, #10
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004342:	2200      	movs	r2, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	61fa      	str	r2, [r7, #28]
 8004348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434c:	f7fb ff4a 	bl	80001e4 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0c1b      	lsrs	r3, r3, #16
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004372:	e002      	b.n	800437a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_RCC_GetSysClockFreq+0x204>)
 8004376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800437c:	4618      	mov	r0, r3
 800437e:	3750      	adds	r7, #80	; 0x50
 8004380:	46bd      	mov	sp, r7
 8004382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	00f42400 	.word	0x00f42400
 8004390:	007a1200 	.word	0x007a1200

08004394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000000 	.word	0x20000000

080043ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043b0:	f7ff fff0 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0a9b      	lsrs	r3, r3, #10
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08006a9c 	.word	0x08006a9c

080043d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d8:	f7ff ffdc 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0b5b      	lsrs	r3, r3, #13
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08006a9c 	.word	0x08006a9c

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e041      	b.n	8004492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fe fa2a 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 fac0 	bl	80049c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e041      	b.n	8004530 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f839 	bl	8004538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	4619      	mov	r1, r3
 80044d8:	4610      	mov	r0, r2
 80044da:	f000 fa71 	bl	80049c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_TIM_PWM_Start+0x24>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e022      	b.n	80045b6 <HAL_TIM_PWM_Start+0x6a>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b04      	cmp	r3, #4
 8004574:	d109      	bne.n	800458a <HAL_TIM_PWM_Start+0x3e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e015      	b.n	80045b6 <HAL_TIM_PWM_Start+0x6a>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x58>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e008      	b.n	80045b6 <HAL_TIM_PWM_Start+0x6a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	bf14      	ite	ne
 80045b0:	2301      	movne	r3, #1
 80045b2:	2300      	moveq	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e068      	b.n	8004690 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_TIM_PWM_Start+0x82>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045cc:	e013      	b.n	80045f6 <HAL_TIM_PWM_Start+0xaa>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d104      	bne.n	80045de <HAL_TIM_PWM_Start+0x92>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	e00b      	b.n	80045f6 <HAL_TIM_PWM_Start+0xaa>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0xa2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ec:	e003      	b.n	80045f6 <HAL_TIM_PWM_Start+0xaa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fc84 	bl	8004f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a23      	ldr	r2, [pc, #140]	; (8004698 <HAL_TIM_PWM_Start+0x14c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d107      	bne.n	800461e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <HAL_TIM_PWM_Start+0x14c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <HAL_TIM_PWM_Start+0x10e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d013      	beq.n	800465a <HAL_TIM_PWM_Start+0x10e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <HAL_TIM_PWM_Start+0x150>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <HAL_TIM_PWM_Start+0x10e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_TIM_PWM_Start+0x154>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <HAL_TIM_PWM_Start+0x10e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <HAL_TIM_PWM_Start+0x158>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <HAL_TIM_PWM_Start+0x10e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_TIM_PWM_Start+0x15c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d111      	bne.n	800467e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b06      	cmp	r3, #6
 800466a:	d010      	beq.n	800468e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	e007      	b.n	800468e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40014000 	.word	0x40014000

080046ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0ae      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	f200 809f 	bhi.w	8004818 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	08004715 	.word	0x08004715
 80046e4:	08004819 	.word	0x08004819
 80046e8:	08004819 	.word	0x08004819
 80046ec:	08004819 	.word	0x08004819
 80046f0:	08004755 	.word	0x08004755
 80046f4:	08004819 	.word	0x08004819
 80046f8:	08004819 	.word	0x08004819
 80046fc:	08004819 	.word	0x08004819
 8004700:	08004797 	.word	0x08004797
 8004704:	08004819 	.word	0x08004819
 8004708:	08004819 	.word	0x08004819
 800470c:	08004819 	.word	0x08004819
 8004710:	080047d7 	.word	0x080047d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f9d0 	bl	8004ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0208 	orr.w	r2, r2, #8
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0204 	bic.w	r2, r2, #4
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	619a      	str	r2, [r3, #24]
      break;
 8004752:	e064      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa16 	bl	8004b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	021a      	lsls	r2, r3, #8
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	619a      	str	r2, [r3, #24]
      break;
 8004794:	e043      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fa61 	bl	8004c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0204 	bic.w	r2, r2, #4
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]
      break;
 80047d4:	e023      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 faab 	bl	8004d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	61da      	str	r2, [r3, #28]
      break;
 8004816:	e002      	b.n	800481e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
      break;
 800481c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004826:	7dfb      	ldrb	r3, [r7, #23]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_TIM_ConfigClockSource+0x1c>
 8004848:	2302      	movs	r3, #2
 800484a:	e0b4      	b.n	80049b6 <HAL_TIM_ConfigClockSource+0x186>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800486a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004872:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004884:	d03e      	beq.n	8004904 <HAL_TIM_ConfigClockSource+0xd4>
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488a:	f200 8087 	bhi.w	800499c <HAL_TIM_ConfigClockSource+0x16c>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004892:	f000 8086 	beq.w	80049a2 <HAL_TIM_ConfigClockSource+0x172>
 8004896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489a:	d87f      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b70      	cmp	r3, #112	; 0x70
 800489e:	d01a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0xa6>
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d87b      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b60      	cmp	r3, #96	; 0x60
 80048a6:	d050      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x11a>
 80048a8:	2b60      	cmp	r3, #96	; 0x60
 80048aa:	d877      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b50      	cmp	r3, #80	; 0x50
 80048ae:	d03c      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xfa>
 80048b0:	2b50      	cmp	r3, #80	; 0x50
 80048b2:	d873      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d058      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x13a>
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d86f      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b30      	cmp	r3, #48	; 0x30
 80048be:	d064      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048c0:	2b30      	cmp	r3, #48	; 0x30
 80048c2:	d86b      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d060      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d867      	bhi.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d05a      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	e062      	b.n	800499c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6818      	ldr	r0, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	6899      	ldr	r1, [r3, #8]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f000 faf1 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	609a      	str	r2, [r3, #8]
      break;
 8004902:	e04f      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6899      	ldr	r1, [r3, #8]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f000 fada 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e03c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	461a      	mov	r2, r3
 8004938:	f000 fa4e 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2150      	movs	r1, #80	; 0x50
 8004942:	4618      	mov	r0, r3
 8004944:	f000 faa7 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004948:	e02c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6859      	ldr	r1, [r3, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	f000 fa6d 	bl	8004e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2160      	movs	r1, #96	; 0x60
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fa97 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004968:	e01c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fa2e 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2140      	movs	r1, #64	; 0x40
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fa87 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004988:	e00c      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f000 fa7e 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 800499a:	e003      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      break;
 80049a0:	e000      	b.n	80049a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a34      	ldr	r2, [pc, #208]	; (8004aa4 <TIM_Base_SetConfig+0xe4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00f      	beq.n	80049f8 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049de:	d00b      	beq.n	80049f8 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a31      	ldr	r2, [pc, #196]	; (8004aa8 <TIM_Base_SetConfig+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <TIM_Base_SetConfig+0x38>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a30      	ldr	r2, [pc, #192]	; (8004aac <TIM_Base_SetConfig+0xec>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <TIM_Base_SetConfig+0x38>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <TIM_Base_SetConfig+0xf0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d108      	bne.n	8004a0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <TIM_Base_SetConfig+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d01b      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a18:	d017      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a22      	ldr	r2, [pc, #136]	; (8004aa8 <TIM_Base_SetConfig+0xe8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a21      	ldr	r2, [pc, #132]	; (8004aac <TIM_Base_SetConfig+0xec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00f      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <TIM_Base_SetConfig+0xf0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <TIM_Base_SetConfig+0xf4>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d007      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	; (8004ab8 <TIM_Base_SetConfig+0xf8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_Base_SetConfig+0x8a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <TIM_Base_SetConfig+0xfc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <TIM_Base_SetConfig+0xe4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40014000 	.word	0x40014000
 8004ab8:	40014400 	.word	0x40014400
 8004abc:	40014800 	.word	0x40014800

08004ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0302 	bic.w	r3, r3, #2
 8004b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <TIM_OC1_SetConfig+0xc8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10c      	bne.n	8004b36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0308 	bic.w	r3, r3, #8
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 0304 	bic.w	r3, r3, #4
 8004b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a13      	ldr	r2, [pc, #76]	; (8004b88 <TIM_OC1_SetConfig+0xc8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d111      	bne.n	8004b62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	621a      	str	r2, [r3, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	371c      	adds	r7, #28
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40010000 	.word	0x40010000

08004b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0210 	bic.w	r2, r3, #16
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0320 	bic.w	r3, r3, #32
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <TIM_OC2_SetConfig+0xd4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10d      	bne.n	8004c08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <TIM_OC2_SetConfig+0xd4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000

08004c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <TIM_OC3_SetConfig+0xd0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10d      	bne.n	8004cde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a14      	ldr	r2, [pc, #80]	; (8004d34 <TIM_OC3_SetConfig+0xd0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d113      	bne.n	8004d0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40010000 	.word	0x40010000

08004d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <TIM_OC4_SetConfig+0x9c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d109      	bne.n	8004dac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	621a      	str	r2, [r3, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000

08004dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 031f 	and.w	r3, r3, #31
 8004f1e:	2201      	movs	r2, #1
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	401a      	ands	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 031f 	and.w	r3, r3, #31
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e050      	b.n	8005012 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d018      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d013      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a15      	ldr	r2, [pc, #84]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10c      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40014000 	.word	0x40014000

08005034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e03f      	b.n	80050c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fd fc66 	bl	800292c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 ff43 	bl	8005f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08c      	sub	sp, #48	; 0x30
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d165      	bne.n	80051b6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_UART_Transmit_DMA+0x26>
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e05e      	b.n	80051b8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_UART_Transmit_DMA+0x38>
 8005104:	2302      	movs	r3, #2
 8005106:	e057      	b.n	80051b8 <HAL_UART_Transmit_DMA+0xe8>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2221      	movs	r2, #33	; 0x21
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_UART_Transmit_DMA+0xf0>)
 8005136:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <HAL_UART_Transmit_DMA+0xf4>)
 800513e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <HAL_UART_Transmit_DMA+0xf8>)
 8005146:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	2200      	movs	r2, #0
 800514e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515c:	6819      	ldr	r1, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3304      	adds	r3, #4
 8005164:	461a      	mov	r2, r3
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	f7fd ffa4 	bl	80030b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005174:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	617b      	str	r3, [r7, #20]
   return(result);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519e:	627a      	str	r2, [r7, #36]	; 0x24
 80051a0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6a39      	ldr	r1, [r7, #32]
 80051a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	e000      	b.n	80051b8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80051b6:	2302      	movs	r3, #2
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3730      	adds	r7, #48	; 0x30
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	0800579d 	.word	0x0800579d
 80051c4:	08005837 	.word	0x08005837
 80051c8:	080059af 	.word	0x080059af

080051cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	4613      	mov	r3, r2
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d11d      	bne.n	8005222 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_UART_Receive_DMA+0x26>
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e016      	b.n	8005224 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_UART_Receive_DMA+0x38>
 8005200:	2302      	movs	r3, #2
 8005202:	e00f      	b.n	8005224 <HAL_UART_Receive_DMA+0x58>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	461a      	mov	r2, r3
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fc13 	bl	8005a44 <UART_Start_Receive_DMA>
 800521e:	4603      	mov	r3, r0
 8005220:	e000      	b.n	8005224 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0ba      	sub	sp, #232	; 0xe8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800526a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f003 0320 	and.w	r3, r3, #32
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fd7f 	bl	8005d8e <UART_Receive_IT>
      return;
 8005290:	e256      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 80de 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
 800529c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d1 	beq.w	8005458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
 80052e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d005      	beq.n	80052fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f043 0202 	orr.w	r2, r3, #2
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
 800530a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d005      	beq.n	8005322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d011      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f043 0208 	orr.w	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 81ed 	beq.w	8005736 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800535c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
 8005368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fd0a 	bl	8005d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	bf0c      	ite	eq
 8005388:	2301      	moveq	r3, #1
 800538a:	2300      	movne	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_UART_IRQHandler+0x17a>
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04f      	beq.n	8005446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fc12 	bl	8005bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d141      	bne.n	800543e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3314      	adds	r3, #20
 80053c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c8:	e853 3f00 	ldrex	r3, [r3]
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80053d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3314      	adds	r3, #20
 80053e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1d9      	bne.n	80053ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	4a7d      	ldr	r2, [pc, #500]	; (8005608 <HAL_UART_IRQHandler+0x3dc>)
 8005414:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	4618      	mov	r0, r3
 800541c:	f7fd ff12 	bl	8003244 <HAL_DMA_Abort_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d016      	beq.n	8005454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	e00e      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f99a 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	e00a      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f996 	bl	8005770 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005444:	e006      	b.n	8005454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f992 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005452:	e170      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	bf00      	nop
    return;
 8005456:	e16e      	b.n	8005736 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	f040 814a 	bne.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8143 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 813c 	beq.w	80056f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	f040 80b4 	bne.w	800560c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8140 	beq.w	800573a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054c2:	429a      	cmp	r2, r3
 80054c4:	f080 8139 	bcs.w	800573a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80054ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054da:	f000 8088 	beq.w	80055ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800550a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800550e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005516:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1d9      	bne.n	80054de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3314      	adds	r3, #20
 8005530:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800553a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800554e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005552:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e1      	bne.n	800552a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3314      	adds	r3, #20
 8005586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800558a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800558c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005590:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e3      	bne.n	8005566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b6:	e853 3f00 	ldrex	r3, [r3]
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80055bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80055d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80055d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e3      	bne.n	80055ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fd fdbb 	bl	8003164 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8c0 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005604:	e099      	b.n	800573a <HAL_UART_IRQHandler+0x50e>
 8005606:	bf00      	nop
 8005608:	08005c97 	.word	0x08005c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005614:	b29b      	uxth	r3, r3
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 808b 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 8086 	beq.w	800573e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005656:	647a      	str	r2, [r7, #68]	; 0x44
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800565c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e3      	bne.n	8005632 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	623b      	str	r3, [r7, #32]
   return(result);
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800568e:	633a      	str	r2, [r7, #48]	; 0x30
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	69b9      	ldr	r1, [r7, #24]
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	617b      	str	r3, [r7, #20]
   return(result);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f848 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f4:	e023      	b.n	800573e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fad5 	bl	8005cbe <UART_Transmit_IT>
    return;
 8005714:	e014      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00e      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
 8005722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d008      	beq.n	8005740 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb15 	bl	8005d5e <UART_EndTransmit_IT>
    return;
 8005734:	e004      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
    return;
 8005736:	bf00      	nop
 8005738:	e002      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573a:	bf00      	nop
 800573c:	e000      	b.n	8005740 <HAL_UART_IRQHandler+0x514>
      return;
 800573e:	bf00      	nop
  }
}
 8005740:	37e8      	adds	r7, #232	; 0xe8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b090      	sub	sp, #64	; 0x40
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d137      	bne.n	8005828 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80057b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ba:	2200      	movs	r2, #0
 80057bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80057be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	623b      	str	r3, [r7, #32]
   return(result);
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057de:	633a      	str	r2, [r7, #48]	; 0x30
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	330c      	adds	r3, #12
 80057f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	60fb      	str	r3, [r7, #12]
   return(result);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
 800580a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	330c      	adds	r3, #12
 8005810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005812:	61fa      	str	r2, [r7, #28]
 8005814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	69b9      	ldr	r1, [r7, #24]
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	617b      	str	r3, [r7, #20]
   return(result);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e5      	bne.n	80057f2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005826:	e002      	b.n	800582e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005828:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800582a:	f7fc f89d 	bl	8001968 <HAL_UART_TxCpltCallback>
}
 800582e:	bf00      	nop
 8005830:	3740      	adds	r7, #64	; 0x40
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff7f 	bl	8005748 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b09c      	sub	sp, #112	; 0x70
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d172      	bne.n	8005954 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	2200      	movs	r2, #0
 8005872:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588a:	66bb      	str	r3, [r7, #104]	; 0x68
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	330c      	adds	r3, #12
 8005892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005894:	65ba      	str	r2, [r7, #88]	; 0x58
 8005896:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800589a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	667b      	str	r3, [r7, #100]	; 0x64
 80058c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3314      	adds	r3, #20
 80058c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80058c8:	647a      	str	r2, [r7, #68]	; 0x44
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e5      	bne.n	80058a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	623b      	str	r3, [r7, #32]
   return(result);
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f2:	663b      	str	r3, [r7, #96]	; 0x60
 80058f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058fc:	633a      	str	r2, [r7, #48]	; 0x30
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	2b01      	cmp	r3, #1
 800591e:	d119      	bne.n	8005954 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0310 	bic.w	r3, r3, #16
 8005936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	330c      	adds	r3, #12
 800593e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005940:	61fa      	str	r2, [r7, #28]
 8005942:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69b9      	ldr	r1, [r7, #24]
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	617b      	str	r3, [r7, #20]
   return(result);
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800595c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005960:	4619      	mov	r1, r3
 8005962:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005964:	f7ff ff0e 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005968:	e002      	b.n	8005970 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800596a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800596c:	f7fc f80e 	bl	800198c <HAL_UART_RxCpltCallback>
}
 8005970:	bf00      	nop
 8005972:	3770      	adds	r7, #112	; 0x70
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	2b01      	cmp	r3, #1
 800598c:	d108      	bne.n	80059a0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	4619      	mov	r1, r3
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff fef3 	bl	8005784 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800599e:	e002      	b.n	80059a6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff fedb 	bl	800575c <HAL_UART_RxHalfCpltCallback>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b21      	cmp	r3, #33	; 0x21
 80059e0:	d108      	bne.n	80059f4 <UART_DMAError+0x46>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80059ee:	68b8      	ldr	r0, [r7, #8]
 80059f0:	f000 f8c6 	bl	8005b80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	bf0c      	ite	eq
 8005a02:	2301      	moveq	r3, #1
 8005a04:	2300      	movne	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b22      	cmp	r3, #34	; 0x22
 8005a14:	d108      	bne.n	8005a28 <UART_DMAError+0x7a>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a22:	68b8      	ldr	r0, [r7, #8]
 8005a24:	f000 f8d4 	bl	8005bd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0210 	orr.w	r2, r3, #16
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a34:	68b8      	ldr	r0, [r7, #8]
 8005a36:	f7ff fe9b 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b098      	sub	sp, #96	; 0x60
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2222      	movs	r2, #34	; 0x22
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <UART_Start_Receive_DMA+0x130>)
 8005a72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	4a3f      	ldr	r2, [pc, #252]	; (8005b78 <UART_Start_Receive_DMA+0x134>)
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	4a3e      	ldr	r2, [pc, #248]	; (8005b7c <UART_Start_Receive_DMA+0x138>)
 8005a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	2200      	movs	r2, #0
 8005a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005a8c:	f107 0308 	add.w	r3, r7, #8
 8005a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	f7fd fb06 	bl	80030b4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d019      	beq.n	8005b02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e5      	bne.n	8005ace <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	657b      	str	r3, [r7, #84]	; 0x54
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b22:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1e5      	bne.n	8005b02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3314      	adds	r3, #20
 8005b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	617b      	str	r3, [r7, #20]
   return(result);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b56:	627a      	str	r2, [r7, #36]	; 0x24
 8005b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6a39      	ldr	r1, [r7, #32]
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e5      	bne.n	8005b36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3760      	adds	r7, #96	; 0x60
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08005853 	.word	0x08005853
 8005b78:	08005979 	.word	0x08005979
 8005b7c:	080059af 	.word	0x080059af

08005b80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	69fa      	ldr	r2, [r7, #28]
 8005ba8:	61ba      	str	r2, [r7, #24]
 8005baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005bc4:	bf00      	nop
 8005bc6:	3724      	adds	r7, #36	; 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b095      	sub	sp, #84	; 0x54
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d119      	bne.n	8005c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f023 0310 	bic.w	r3, r3, #16
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c68:	61ba      	str	r2, [r7, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	613b      	str	r3, [r7, #16]
   return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c8a:	bf00      	nop
 8005c8c:	3754      	adds	r7, #84	; 0x54
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fd5d 	bl	8005770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b21      	cmp	r3, #33	; 0x21
 8005cd0:	d13e      	bne.n	8005d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d114      	bne.n	8005d06 <UART_Transmit_IT+0x48>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	621a      	str	r2, [r3, #32]
 8005d04:	e008      	b.n	8005d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	1c59      	adds	r1, r3, #1
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6211      	str	r1, [r2, #32]
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4619      	mov	r1, r3
 8005d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10f      	bne.n	8005d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e000      	b.n	8005d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d50:	2302      	movs	r3, #2
  }
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fdf2 	bl	8001968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08c      	sub	sp, #48	; 0x30
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b22      	cmp	r3, #34	; 0x22
 8005da0:	f040 80ab 	bne.w	8005efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d117      	bne.n	8005dde <UART_Receive_IT+0x50>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d113      	bne.n	8005dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28
 8005ddc:	e026      	b.n	8005e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d007      	beq.n	8005e02 <UART_Receive_IT+0x74>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <UART_Receive_IT+0x82>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e008      	b.n	8005e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d15a      	bne.n	8005ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0220 	bic.w	r2, r2, #32
 8005e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d135      	bne.n	8005eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	613b      	str	r3, [r7, #16]
   return(result);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea6:	623a      	str	r2, [r7, #32]
 8005ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	69f9      	ldr	r1, [r7, #28]
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d10a      	bne.n	8005ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fc4d 	bl	8005784 <HAL_UARTEx_RxEventCallback>
 8005eea:	e002      	b.n	8005ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fb fd4d 	bl	800198c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e002      	b.n	8005efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3730      	adds	r7, #48	; 0x30
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f08:	b0c0      	sub	sp, #256	; 0x100
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f20:	68d9      	ldr	r1, [r3, #12]
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	ea40 0301 	orr.w	r3, r0, r1
 8005f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f5c:	f021 010c 	bic.w	r1, r1, #12
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7e:	6999      	ldr	r1, [r3, #24]
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	ea40 0301 	orr.w	r3, r0, r1
 8005f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b8f      	ldr	r3, [pc, #572]	; (80061d0 <UART_SetConfig+0x2cc>)
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d005      	beq.n	8005fa4 <UART_SetConfig+0xa0>
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b8d      	ldr	r3, [pc, #564]	; (80061d4 <UART_SetConfig+0x2d0>)
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d104      	bne.n	8005fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fa4:	f7fe fa16 	bl	80043d4 <HAL_RCC_GetPCLK2Freq>
 8005fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005fac:	e003      	b.n	8005fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fae:	f7fe f9fd 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8005fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	f040 810c 	bne.w	80061dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	462b      	mov	r3, r5
 8005fda:	1891      	adds	r1, r2, r2
 8005fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fde:	415b      	adcs	r3, r3
 8005fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	eb12 0801 	adds.w	r8, r2, r1
 8005fec:	4629      	mov	r1, r5
 8005fee:	eb43 0901 	adc.w	r9, r3, r1
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006006:	4690      	mov	r8, r2
 8006008:	4699      	mov	r9, r3
 800600a:	4623      	mov	r3, r4
 800600c:	eb18 0303 	adds.w	r3, r8, r3
 8006010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006014:	462b      	mov	r3, r5
 8006016:	eb49 0303 	adc.w	r3, r9, r3
 800601a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800602a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800602e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006032:	460b      	mov	r3, r1
 8006034:	18db      	adds	r3, r3, r3
 8006036:	653b      	str	r3, [r7, #80]	; 0x50
 8006038:	4613      	mov	r3, r2
 800603a:	eb42 0303 	adc.w	r3, r2, r3
 800603e:	657b      	str	r3, [r7, #84]	; 0x54
 8006040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006048:	f7fa f8cc 	bl	80001e4 <__aeabi_uldivmod>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4b61      	ldr	r3, [pc, #388]	; (80061d8 <UART_SetConfig+0x2d4>)
 8006052:	fba3 2302 	umull	r2, r3, r3, r2
 8006056:	095b      	lsrs	r3, r3, #5
 8006058:	011c      	lsls	r4, r3, #4
 800605a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605e:	2200      	movs	r2, #0
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800606c:	4642      	mov	r2, r8
 800606e:	464b      	mov	r3, r9
 8006070:	1891      	adds	r1, r2, r2
 8006072:	64b9      	str	r1, [r7, #72]	; 0x48
 8006074:	415b      	adcs	r3, r3
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800607c:	4641      	mov	r1, r8
 800607e:	eb12 0a01 	adds.w	sl, r2, r1
 8006082:	4649      	mov	r1, r9
 8006084:	eb43 0b01 	adc.w	fp, r3, r1
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	f04f 0300 	mov.w	r3, #0
 8006090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609c:	4692      	mov	sl, r2
 800609e:	469b      	mov	fp, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	eb1a 0303 	adds.w	r3, sl, r3
 80060a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060aa:	464b      	mov	r3, r9
 80060ac:	eb4b 0303 	adc.w	r3, fp, r3
 80060b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060c8:	460b      	mov	r3, r1
 80060ca:	18db      	adds	r3, r3, r3
 80060cc:	643b      	str	r3, [r7, #64]	; 0x40
 80060ce:	4613      	mov	r3, r2
 80060d0:	eb42 0303 	adc.w	r3, r2, r3
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
 80060d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060de:	f7fa f881 	bl	80001e4 <__aeabi_uldivmod>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4611      	mov	r1, r2
 80060e8:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <UART_SetConfig+0x2d4>)
 80060ea:	fba3 2301 	umull	r2, r3, r3, r1
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	2264      	movs	r2, #100	; 0x64
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	1acb      	subs	r3, r1, r3
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <UART_SetConfig+0x2d4>)
 8006100:	fba3 2302 	umull	r2, r3, r3, r2
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800610c:	441c      	add	r4, r3
 800610e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006112:	2200      	movs	r2, #0
 8006114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800611c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006120:	4642      	mov	r2, r8
 8006122:	464b      	mov	r3, r9
 8006124:	1891      	adds	r1, r2, r2
 8006126:	63b9      	str	r1, [r7, #56]	; 0x38
 8006128:	415b      	adcs	r3, r3
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006130:	4641      	mov	r1, r8
 8006132:	1851      	adds	r1, r2, r1
 8006134:	6339      	str	r1, [r7, #48]	; 0x30
 8006136:	4649      	mov	r1, r9
 8006138:	414b      	adcs	r3, r1
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006148:	4659      	mov	r1, fp
 800614a:	00cb      	lsls	r3, r1, #3
 800614c:	4651      	mov	r1, sl
 800614e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006152:	4651      	mov	r1, sl
 8006154:	00ca      	lsls	r2, r1, #3
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	4603      	mov	r3, r0
 800615c:	4642      	mov	r2, r8
 800615e:	189b      	adds	r3, r3, r2
 8006160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006164:	464b      	mov	r3, r9
 8006166:	460a      	mov	r2, r1
 8006168:	eb42 0303 	adc.w	r3, r2, r3
 800616c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800617c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006184:	460b      	mov	r3, r1
 8006186:	18db      	adds	r3, r3, r3
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
 800618a:	4613      	mov	r3, r2
 800618c:	eb42 0303 	adc.w	r3, r2, r3
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800619a:	f7fa f823 	bl	80001e4 <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4b0d      	ldr	r3, [pc, #52]	; (80061d8 <UART_SetConfig+0x2d4>)
 80061a4:	fba3 1302 	umull	r1, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	2164      	movs	r1, #100	; 0x64
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	3332      	adds	r3, #50	; 0x32
 80061b6:	4a08      	ldr	r2, [pc, #32]	; (80061d8 <UART_SetConfig+0x2d4>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	f003 0207 	and.w	r2, r3, #7
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4422      	add	r2, r4
 80061ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061cc:	e105      	b.n	80063da <UART_SetConfig+0x4d6>
 80061ce:	bf00      	nop
 80061d0:	40011000 	.word	0x40011000
 80061d4:	40011400 	.word	0x40011400
 80061d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	1891      	adds	r1, r2, r2
 80061f4:	6239      	str	r1, [r7, #32]
 80061f6:	415b      	adcs	r3, r3
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061fe:	4641      	mov	r1, r8
 8006200:	1854      	adds	r4, r2, r1
 8006202:	4649      	mov	r1, r9
 8006204:	eb43 0501 	adc.w	r5, r3, r1
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	00eb      	lsls	r3, r5, #3
 8006212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006216:	00e2      	lsls	r2, r4, #3
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	4643      	mov	r3, r8
 800621e:	18e3      	adds	r3, r4, r3
 8006220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006224:	464b      	mov	r3, r9
 8006226:	eb45 0303 	adc.w	r3, r5, r3
 800622a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800623a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800624a:	4629      	mov	r1, r5
 800624c:	008b      	lsls	r3, r1, #2
 800624e:	4621      	mov	r1, r4
 8006250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006254:	4621      	mov	r1, r4
 8006256:	008a      	lsls	r2, r1, #2
 8006258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800625c:	f7f9 ffc2 	bl	80001e4 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4b60      	ldr	r3, [pc, #384]	; (80063e8 <UART_SetConfig+0x4e4>)
 8006266:	fba3 2302 	umull	r2, r3, r3, r2
 800626a:	095b      	lsrs	r3, r3, #5
 800626c:	011c      	lsls	r4, r3, #4
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800627c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006280:	4642      	mov	r2, r8
 8006282:	464b      	mov	r3, r9
 8006284:	1891      	adds	r1, r2, r2
 8006286:	61b9      	str	r1, [r7, #24]
 8006288:	415b      	adcs	r3, r3
 800628a:	61fb      	str	r3, [r7, #28]
 800628c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006290:	4641      	mov	r1, r8
 8006292:	1851      	adds	r1, r2, r1
 8006294:	6139      	str	r1, [r7, #16]
 8006296:	4649      	mov	r1, r9
 8006298:	414b      	adcs	r3, r1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062a8:	4659      	mov	r1, fp
 80062aa:	00cb      	lsls	r3, r1, #3
 80062ac:	4651      	mov	r1, sl
 80062ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b2:	4651      	mov	r1, sl
 80062b4:	00ca      	lsls	r2, r1, #3
 80062b6:	4610      	mov	r0, r2
 80062b8:	4619      	mov	r1, r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	4642      	mov	r2, r8
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062c4:	464b      	mov	r3, r9
 80062c6:	460a      	mov	r2, r1
 80062c8:	eb42 0303 	adc.w	r3, r2, r3
 80062cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062e8:	4649      	mov	r1, r9
 80062ea:	008b      	lsls	r3, r1, #2
 80062ec:	4641      	mov	r1, r8
 80062ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f2:	4641      	mov	r1, r8
 80062f4:	008a      	lsls	r2, r1, #2
 80062f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062fa:	f7f9 ff73 	bl	80001e4 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b39      	ldr	r3, [pc, #228]	; (80063e8 <UART_SetConfig+0x4e4>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	; 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	3332      	adds	r3, #50	; 0x32
 8006316:	4a34      	ldr	r2, [pc, #208]	; (80063e8 <UART_SetConfig+0x4e4>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006322:	441c      	add	r4, r3
 8006324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006328:	2200      	movs	r2, #0
 800632a:	673b      	str	r3, [r7, #112]	; 0x70
 800632c:	677a      	str	r2, [r7, #116]	; 0x74
 800632e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	1891      	adds	r1, r2, r2
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	415b      	adcs	r3, r3
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006342:	4641      	mov	r1, r8
 8006344:	1851      	adds	r1, r2, r1
 8006346:	6039      	str	r1, [r7, #0]
 8006348:	4649      	mov	r1, r9
 800634a:	414b      	adcs	r3, r1
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800635a:	4659      	mov	r1, fp
 800635c:	00cb      	lsls	r3, r1, #3
 800635e:	4651      	mov	r1, sl
 8006360:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006364:	4651      	mov	r1, sl
 8006366:	00ca      	lsls	r2, r1, #3
 8006368:	4610      	mov	r0, r2
 800636a:	4619      	mov	r1, r3
 800636c:	4603      	mov	r3, r0
 800636e:	4642      	mov	r2, r8
 8006370:	189b      	adds	r3, r3, r2
 8006372:	66bb      	str	r3, [r7, #104]	; 0x68
 8006374:	464b      	mov	r3, r9
 8006376:	460a      	mov	r2, r1
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	663b      	str	r3, [r7, #96]	; 0x60
 8006388:	667a      	str	r2, [r7, #100]	; 0x64
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006396:	4649      	mov	r1, r9
 8006398:	008b      	lsls	r3, r1, #2
 800639a:	4641      	mov	r1, r8
 800639c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a0:	4641      	mov	r1, r8
 80063a2:	008a      	lsls	r2, r1, #2
 80063a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063a8:	f7f9 ff1c 	bl	80001e4 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <UART_SetConfig+0x4e4>)
 80063b2:	fba3 1302 	umull	r1, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	2164      	movs	r1, #100	; 0x64
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <UART_SetConfig+0x4e4>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	f003 020f 	and.w	r2, r3, #15
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4422      	add	r2, r4
 80063d8:	609a      	str	r2, [r3, #8]
}
 80063da:	bf00      	nop
 80063dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063e6:	bf00      	nop
 80063e8:	51eb851f 	.word	0x51eb851f

080063ec <__cxa_pure_virtual>:
 80063ec:	b508      	push	{r3, lr}
 80063ee:	f000 f80d 	bl	800640c <_ZSt9terminatev>

080063f2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80063f2:	b508      	push	{r3, lr}
 80063f4:	4780      	blx	r0
 80063f6:	f000 f80e 	bl	8006416 <abort>
	...

080063fc <_ZSt13get_terminatev>:
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <_ZSt13get_terminatev+0xc>)
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	f3bf 8f5b 	dmb	ish
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	2000000c 	.word	0x2000000c

0800640c <_ZSt9terminatev>:
 800640c:	b508      	push	{r3, lr}
 800640e:	f7ff fff5 	bl	80063fc <_ZSt13get_terminatev>
 8006412:	f7ff ffee 	bl	80063f2 <_ZN10__cxxabiv111__terminateEPFvvE>

08006416 <abort>:
 8006416:	b508      	push	{r3, lr}
 8006418:	2006      	movs	r0, #6
 800641a:	f000 f873 	bl	8006504 <raise>
 800641e:	2001      	movs	r0, #1
 8006420:	f7fc fb9a 	bl	8002b58 <_exit>

08006424 <__errno>:
 8006424:	4b01      	ldr	r3, [pc, #4]	; (800642c <__errno+0x8>)
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000010 	.word	0x20000010

08006430 <__libc_init_array>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4d0d      	ldr	r5, [pc, #52]	; (8006468 <__libc_init_array+0x38>)
 8006434:	4c0d      	ldr	r4, [pc, #52]	; (800646c <__libc_init_array+0x3c>)
 8006436:	1b64      	subs	r4, r4, r5
 8006438:	10a4      	asrs	r4, r4, #2
 800643a:	2600      	movs	r6, #0
 800643c:	42a6      	cmp	r6, r4
 800643e:	d109      	bne.n	8006454 <__libc_init_array+0x24>
 8006440:	4d0b      	ldr	r5, [pc, #44]	; (8006470 <__libc_init_array+0x40>)
 8006442:	4c0c      	ldr	r4, [pc, #48]	; (8006474 <__libc_init_array+0x44>)
 8006444:	f000 f9b0 	bl	80067a8 <_init>
 8006448:	1b64      	subs	r4, r4, r5
 800644a:	10a4      	asrs	r4, r4, #2
 800644c:	2600      	movs	r6, #0
 800644e:	42a6      	cmp	r6, r4
 8006450:	d105      	bne.n	800645e <__libc_init_array+0x2e>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	f855 3b04 	ldr.w	r3, [r5], #4
 8006458:	4798      	blx	r3
 800645a:	3601      	adds	r6, #1
 800645c:	e7ee      	b.n	800643c <__libc_init_array+0xc>
 800645e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006462:	4798      	blx	r3
 8006464:	3601      	adds	r6, #1
 8006466:	e7f2      	b.n	800644e <__libc_init_array+0x1e>
 8006468:	08006ab4 	.word	0x08006ab4
 800646c:	08006ab4 	.word	0x08006ab4
 8006470:	08006ab4 	.word	0x08006ab4
 8006474:	08006abc 	.word	0x08006abc

08006478 <memcpy>:
 8006478:	440a      	add	r2, r1
 800647a:	4291      	cmp	r1, r2
 800647c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006480:	d100      	bne.n	8006484 <memcpy+0xc>
 8006482:	4770      	bx	lr
 8006484:	b510      	push	{r4, lr}
 8006486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800648e:	4291      	cmp	r1, r2
 8006490:	d1f9      	bne.n	8006486 <memcpy+0xe>
 8006492:	bd10      	pop	{r4, pc}

08006494 <memset>:
 8006494:	4402      	add	r2, r0
 8006496:	4603      	mov	r3, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	d100      	bne.n	800649e <memset+0xa>
 800649c:	4770      	bx	lr
 800649e:	f803 1b01 	strb.w	r1, [r3], #1
 80064a2:	e7f9      	b.n	8006498 <memset+0x4>

080064a4 <realloc>:
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <realloc+0xc>)
 80064a6:	460a      	mov	r2, r1
 80064a8:	4601      	mov	r1, r0
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	f000 b8da 	b.w	8006664 <_realloc_r>
 80064b0:	20000010 	.word	0x20000010

080064b4 <_raise_r>:
 80064b4:	291f      	cmp	r1, #31
 80064b6:	b538      	push	{r3, r4, r5, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	d904      	bls.n	80064c8 <_raise_r+0x14>
 80064be:	2316      	movs	r3, #22
 80064c0:	6003      	str	r3, [r0, #0]
 80064c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064c6:	bd38      	pop	{r3, r4, r5, pc}
 80064c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80064ca:	b112      	cbz	r2, 80064d2 <_raise_r+0x1e>
 80064cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064d0:	b94b      	cbnz	r3, 80064e6 <_raise_r+0x32>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f830 	bl	8006538 <_getpid_r>
 80064d8:	462a      	mov	r2, r5
 80064da:	4601      	mov	r1, r0
 80064dc:	4620      	mov	r0, r4
 80064de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e2:	f000 b817 	b.w	8006514 <_kill_r>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d00a      	beq.n	8006500 <_raise_r+0x4c>
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	d103      	bne.n	80064f6 <_raise_r+0x42>
 80064ee:	2316      	movs	r3, #22
 80064f0:	6003      	str	r3, [r0, #0]
 80064f2:	2001      	movs	r0, #1
 80064f4:	e7e7      	b.n	80064c6 <_raise_r+0x12>
 80064f6:	2400      	movs	r4, #0
 80064f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064fc:	4628      	mov	r0, r5
 80064fe:	4798      	blx	r3
 8006500:	2000      	movs	r0, #0
 8006502:	e7e0      	b.n	80064c6 <_raise_r+0x12>

08006504 <raise>:
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <raise+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f7ff bfd3 	b.w	80064b4 <_raise_r>
 800650e:	bf00      	nop
 8006510:	20000010 	.word	0x20000010

08006514 <_kill_r>:
 8006514:	b538      	push	{r3, r4, r5, lr}
 8006516:	4d07      	ldr	r5, [pc, #28]	; (8006534 <_kill_r+0x20>)
 8006518:	2300      	movs	r3, #0
 800651a:	4604      	mov	r4, r0
 800651c:	4608      	mov	r0, r1
 800651e:	4611      	mov	r1, r2
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	f7fc fb09 	bl	8002b38 <_kill>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	d102      	bne.n	8006530 <_kill_r+0x1c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	b103      	cbz	r3, 8006530 <_kill_r+0x1c>
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	bd38      	pop	{r3, r4, r5, pc}
 8006532:	bf00      	nop
 8006534:	20000b9c 	.word	0x20000b9c

08006538 <_getpid_r>:
 8006538:	f7fc baf6 	b.w	8002b28 <_getpid>

0800653c <sbrk_aligned>:
 800653c:	b570      	push	{r4, r5, r6, lr}
 800653e:	4e0e      	ldr	r6, [pc, #56]	; (8006578 <sbrk_aligned+0x3c>)
 8006540:	460c      	mov	r4, r1
 8006542:	6831      	ldr	r1, [r6, #0]
 8006544:	4605      	mov	r5, r0
 8006546:	b911      	cbnz	r1, 800654e <sbrk_aligned+0x12>
 8006548:	f000 f8bc 	bl	80066c4 <_sbrk_r>
 800654c:	6030      	str	r0, [r6, #0]
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f8b7 	bl	80066c4 <_sbrk_r>
 8006556:	1c43      	adds	r3, r0, #1
 8006558:	d00a      	beq.n	8006570 <sbrk_aligned+0x34>
 800655a:	1cc4      	adds	r4, r0, #3
 800655c:	f024 0403 	bic.w	r4, r4, #3
 8006560:	42a0      	cmp	r0, r4
 8006562:	d007      	beq.n	8006574 <sbrk_aligned+0x38>
 8006564:	1a21      	subs	r1, r4, r0
 8006566:	4628      	mov	r0, r5
 8006568:	f000 f8ac 	bl	80066c4 <_sbrk_r>
 800656c:	3001      	adds	r0, #1
 800656e:	d101      	bne.n	8006574 <sbrk_aligned+0x38>
 8006570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006574:	4620      	mov	r0, r4
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	20000b98 	.word	0x20000b98

0800657c <_malloc_r>:
 800657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006580:	1ccd      	adds	r5, r1, #3
 8006582:	f025 0503 	bic.w	r5, r5, #3
 8006586:	3508      	adds	r5, #8
 8006588:	2d0c      	cmp	r5, #12
 800658a:	bf38      	it	cc
 800658c:	250c      	movcc	r5, #12
 800658e:	2d00      	cmp	r5, #0
 8006590:	4607      	mov	r7, r0
 8006592:	db01      	blt.n	8006598 <_malloc_r+0x1c>
 8006594:	42a9      	cmp	r1, r5
 8006596:	d905      	bls.n	80065a4 <_malloc_r+0x28>
 8006598:	230c      	movs	r3, #12
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	2600      	movs	r6, #0
 800659e:	4630      	mov	r0, r6
 80065a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a4:	4e2e      	ldr	r6, [pc, #184]	; (8006660 <_malloc_r+0xe4>)
 80065a6:	f000 f89d 	bl	80066e4 <__malloc_lock>
 80065aa:	6833      	ldr	r3, [r6, #0]
 80065ac:	461c      	mov	r4, r3
 80065ae:	bb34      	cbnz	r4, 80065fe <_malloc_r+0x82>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4638      	mov	r0, r7
 80065b4:	f7ff ffc2 	bl	800653c <sbrk_aligned>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	4604      	mov	r4, r0
 80065bc:	d14d      	bne.n	800665a <_malloc_r+0xde>
 80065be:	6834      	ldr	r4, [r6, #0]
 80065c0:	4626      	mov	r6, r4
 80065c2:	2e00      	cmp	r6, #0
 80065c4:	d140      	bne.n	8006648 <_malloc_r+0xcc>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	4631      	mov	r1, r6
 80065ca:	4638      	mov	r0, r7
 80065cc:	eb04 0803 	add.w	r8, r4, r3
 80065d0:	f000 f878 	bl	80066c4 <_sbrk_r>
 80065d4:	4580      	cmp	r8, r0
 80065d6:	d13a      	bne.n	800664e <_malloc_r+0xd2>
 80065d8:	6821      	ldr	r1, [r4, #0]
 80065da:	3503      	adds	r5, #3
 80065dc:	1a6d      	subs	r5, r5, r1
 80065de:	f025 0503 	bic.w	r5, r5, #3
 80065e2:	3508      	adds	r5, #8
 80065e4:	2d0c      	cmp	r5, #12
 80065e6:	bf38      	it	cc
 80065e8:	250c      	movcc	r5, #12
 80065ea:	4629      	mov	r1, r5
 80065ec:	4638      	mov	r0, r7
 80065ee:	f7ff ffa5 	bl	800653c <sbrk_aligned>
 80065f2:	3001      	adds	r0, #1
 80065f4:	d02b      	beq.n	800664e <_malloc_r+0xd2>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	442b      	add	r3, r5
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	e00e      	b.n	800661c <_malloc_r+0xa0>
 80065fe:	6822      	ldr	r2, [r4, #0]
 8006600:	1b52      	subs	r2, r2, r5
 8006602:	d41e      	bmi.n	8006642 <_malloc_r+0xc6>
 8006604:	2a0b      	cmp	r2, #11
 8006606:	d916      	bls.n	8006636 <_malloc_r+0xba>
 8006608:	1961      	adds	r1, r4, r5
 800660a:	42a3      	cmp	r3, r4
 800660c:	6025      	str	r5, [r4, #0]
 800660e:	bf18      	it	ne
 8006610:	6059      	strne	r1, [r3, #4]
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	bf08      	it	eq
 8006616:	6031      	streq	r1, [r6, #0]
 8006618:	5162      	str	r2, [r4, r5]
 800661a:	604b      	str	r3, [r1, #4]
 800661c:	4638      	mov	r0, r7
 800661e:	f104 060b 	add.w	r6, r4, #11
 8006622:	f000 f865 	bl	80066f0 <__malloc_unlock>
 8006626:	f026 0607 	bic.w	r6, r6, #7
 800662a:	1d23      	adds	r3, r4, #4
 800662c:	1af2      	subs	r2, r6, r3
 800662e:	d0b6      	beq.n	800659e <_malloc_r+0x22>
 8006630:	1b9b      	subs	r3, r3, r6
 8006632:	50a3      	str	r3, [r4, r2]
 8006634:	e7b3      	b.n	800659e <_malloc_r+0x22>
 8006636:	6862      	ldr	r2, [r4, #4]
 8006638:	42a3      	cmp	r3, r4
 800663a:	bf0c      	ite	eq
 800663c:	6032      	streq	r2, [r6, #0]
 800663e:	605a      	strne	r2, [r3, #4]
 8006640:	e7ec      	b.n	800661c <_malloc_r+0xa0>
 8006642:	4623      	mov	r3, r4
 8006644:	6864      	ldr	r4, [r4, #4]
 8006646:	e7b2      	b.n	80065ae <_malloc_r+0x32>
 8006648:	4634      	mov	r4, r6
 800664a:	6876      	ldr	r6, [r6, #4]
 800664c:	e7b9      	b.n	80065c2 <_malloc_r+0x46>
 800664e:	230c      	movs	r3, #12
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4638      	mov	r0, r7
 8006654:	f000 f84c 	bl	80066f0 <__malloc_unlock>
 8006658:	e7a1      	b.n	800659e <_malloc_r+0x22>
 800665a:	6025      	str	r5, [r4, #0]
 800665c:	e7de      	b.n	800661c <_malloc_r+0xa0>
 800665e:	bf00      	nop
 8006660:	20000b94 	.word	0x20000b94

08006664 <_realloc_r>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	4680      	mov	r8, r0
 800666a:	4614      	mov	r4, r2
 800666c:	460e      	mov	r6, r1
 800666e:	b921      	cbnz	r1, 800667a <_realloc_r+0x16>
 8006670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006674:	4611      	mov	r1, r2
 8006676:	f7ff bf81 	b.w	800657c <_malloc_r>
 800667a:	b92a      	cbnz	r2, 8006688 <_realloc_r+0x24>
 800667c:	f000 f83e 	bl	80066fc <_free_r>
 8006680:	4625      	mov	r5, r4
 8006682:	4628      	mov	r0, r5
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	f000 f884 	bl	8006794 <_malloc_usable_size_r>
 800668c:	4284      	cmp	r4, r0
 800668e:	4607      	mov	r7, r0
 8006690:	d802      	bhi.n	8006698 <_realloc_r+0x34>
 8006692:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006696:	d812      	bhi.n	80066be <_realloc_r+0x5a>
 8006698:	4621      	mov	r1, r4
 800669a:	4640      	mov	r0, r8
 800669c:	f7ff ff6e 	bl	800657c <_malloc_r>
 80066a0:	4605      	mov	r5, r0
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0ed      	beq.n	8006682 <_realloc_r+0x1e>
 80066a6:	42bc      	cmp	r4, r7
 80066a8:	4622      	mov	r2, r4
 80066aa:	4631      	mov	r1, r6
 80066ac:	bf28      	it	cs
 80066ae:	463a      	movcs	r2, r7
 80066b0:	f7ff fee2 	bl	8006478 <memcpy>
 80066b4:	4631      	mov	r1, r6
 80066b6:	4640      	mov	r0, r8
 80066b8:	f000 f820 	bl	80066fc <_free_r>
 80066bc:	e7e1      	b.n	8006682 <_realloc_r+0x1e>
 80066be:	4635      	mov	r5, r6
 80066c0:	e7df      	b.n	8006682 <_realloc_r+0x1e>
	...

080066c4 <_sbrk_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d06      	ldr	r5, [pc, #24]	; (80066e0 <_sbrk_r+0x1c>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fc fa4c 	bl	8002b6c <_sbrk>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_sbrk_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_sbrk_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20000b9c 	.word	0x20000b9c

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__malloc_lock+0x8>)
 80066e6:	f000 b85d 	b.w	80067a4 <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	20000ba0 	.word	0x20000ba0

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f000 b858 	b.w	80067a6 <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	20000ba0 	.word	0x20000ba0

080066fc <_free_r>:
 80066fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066fe:	2900      	cmp	r1, #0
 8006700:	d044      	beq.n	800678c <_free_r+0x90>
 8006702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006706:	9001      	str	r0, [sp, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f1a1 0404 	sub.w	r4, r1, #4
 800670e:	bfb8      	it	lt
 8006710:	18e4      	addlt	r4, r4, r3
 8006712:	f7ff ffe7 	bl	80066e4 <__malloc_lock>
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <_free_r+0x94>)
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	b933      	cbnz	r3, 800672c <_free_r+0x30>
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	6014      	str	r4, [r2, #0]
 8006722:	b003      	add	sp, #12
 8006724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006728:	f7ff bfe2 	b.w	80066f0 <__malloc_unlock>
 800672c:	42a3      	cmp	r3, r4
 800672e:	d908      	bls.n	8006742 <_free_r+0x46>
 8006730:	6825      	ldr	r5, [r4, #0]
 8006732:	1961      	adds	r1, r4, r5
 8006734:	428b      	cmp	r3, r1
 8006736:	bf01      	itttt	eq
 8006738:	6819      	ldreq	r1, [r3, #0]
 800673a:	685b      	ldreq	r3, [r3, #4]
 800673c:	1949      	addeq	r1, r1, r5
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	e7ed      	b.n	800671e <_free_r+0x22>
 8006742:	461a      	mov	r2, r3
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b10b      	cbz	r3, 800674c <_free_r+0x50>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d9fa      	bls.n	8006742 <_free_r+0x46>
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	1855      	adds	r5, r2, r1
 8006750:	42a5      	cmp	r5, r4
 8006752:	d10b      	bne.n	800676c <_free_r+0x70>
 8006754:	6824      	ldr	r4, [r4, #0]
 8006756:	4421      	add	r1, r4
 8006758:	1854      	adds	r4, r2, r1
 800675a:	42a3      	cmp	r3, r4
 800675c:	6011      	str	r1, [r2, #0]
 800675e:	d1e0      	bne.n	8006722 <_free_r+0x26>
 8006760:	681c      	ldr	r4, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	6053      	str	r3, [r2, #4]
 8006766:	4421      	add	r1, r4
 8006768:	6011      	str	r1, [r2, #0]
 800676a:	e7da      	b.n	8006722 <_free_r+0x26>
 800676c:	d902      	bls.n	8006774 <_free_r+0x78>
 800676e:	230c      	movs	r3, #12
 8006770:	6003      	str	r3, [r0, #0]
 8006772:	e7d6      	b.n	8006722 <_free_r+0x26>
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1961      	adds	r1, r4, r5
 8006778:	428b      	cmp	r3, r1
 800677a:	bf04      	itt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	bf04      	itt	eq
 8006784:	1949      	addeq	r1, r1, r5
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	6054      	str	r4, [r2, #4]
 800678a:	e7ca      	b.n	8006722 <_free_r+0x26>
 800678c:	b003      	add	sp, #12
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	20000b94 	.word	0x20000b94

08006794 <_malloc_usable_size_r>:
 8006794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	580b      	ldrlt	r3, [r1, r0]
 80067a0:	18c0      	addlt	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <__retarget_lock_acquire_recursive>:
 80067a4:	4770      	bx	lr

080067a6 <__retarget_lock_release_recursive>:
 80067a6:	4770      	bx	lr

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
