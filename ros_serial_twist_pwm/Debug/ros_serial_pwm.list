
ros_serial_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e4  080067e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067ec  080067ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000074  0800686c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  0800686c  00020ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001543a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002950  00000000  00000000  000354de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00037e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00038d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181b9  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b0e  00000000  00000000  00051db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094804  00000000  00000000  000628c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f70cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004564  00000000  00000000  000f711c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006544 	.word	0x08006544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08006544 	.word	0x08006544

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fa48 	bl	80029d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f948 	bl	80007e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f91e 	bl	8000790 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f8f2 	bl	800073c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000558:	f000 f872 	bl	8000640 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800055c:	f001 f9a0 	bl	80018a0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000560:	f001 f9c6 	bl	80018f0 <loop>
  {
 8000564:	e7fc      	b.n	8000560 <main+0x20>
	...

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fe5a 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SystemClock_Config+0xd0>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SystemClock_Config+0xd0>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SystemClock_Config+0xd0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd4>)
 80005b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f938 	bl	8003868 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fe:	f000 f949 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fb9a 	bl	8003d58 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062a:	f000 f933 	bl	8000894 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
 800066e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000670:	4b31      	ldr	r3, [pc, #196]	; (8000738 <MX_TIM2_Init+0xf8>)
 8000672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000676:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000678:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <MX_TIM2_Init+0xf8>)
 800067a:	2253      	movs	r2, #83	; 0x53
 800067c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <MX_TIM2_Init+0xf8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 8000684:	4b2c      	ldr	r3, [pc, #176]	; (8000738 <MX_TIM2_Init+0xf8>)
 8000686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_TIM2_Init+0xf8>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_TIM2_Init+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000698:	4827      	ldr	r0, [pc, #156]	; (8000738 <MX_TIM2_Init+0xf8>)
 800069a:	f003 fd7d 	bl	8004198 <HAL_TIM_Base_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006a4:	f000 f8f6 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4820      	ldr	r0, [pc, #128]	; (8000738 <MX_TIM2_Init+0xf8>)
 80006b6:	f003 ff89 	bl	80045cc <HAL_TIM_ConfigClockSource>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80006c0:	f000 f8e8 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <MX_TIM2_Init+0xf8>)
 80006c6:	f003 fdb6 	bl	8004236 <HAL_TIM_PWM_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006d0:	f000 f8e0 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4619      	mov	r1, r3
 80006e2:	4815      	ldr	r0, [pc, #84]	; (8000738 <MX_TIM2_Init+0xf8>)
 80006e4:	f004 fb06 	bl	8004cf4 <HAL_TIMEx_MasterConfigSynchronization>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ee:	f000 f8d1 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_TIM2_Init+0xf8>)
 800070a:	f003 fe9d 	bl	8004448 <HAL_TIM_PWM_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000714:	f000 f8be 	bl	8000894 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_TIM2_Init+0xf8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	699a      	ldr	r2, [r3, #24]
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_TIM2_Init+0xf8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f022 0208 	bic.w	r2, r2, #8
 8000726:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0xf8>)
 800072a:	f001 ff8b 	bl	8002644 <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3738      	adds	r7, #56	; 0x38
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000090 	.word	0x20000090

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART2_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000748:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x4c>)
 8000774:	f004 fb2c 	bl	8004dd0 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f889 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000d8 	.word	0x200000d8
 800078c:	40004400 	.word	0x40004400

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_DMA_Init+0x4c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <MX_DMA_Init+0x4c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_DMA_Init+0x4c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2010      	movs	r0, #16
 80007b8:	f002 fa7f 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007bc:	2010      	movs	r0, #16
 80007be:	f002 fa98 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2011      	movs	r0, #17
 80007c8:	f002 fa77 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007cc:	2011      	movs	r0, #17
 80007ce:	f002 fa90 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_GPIO_Init+0xac>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a23      	ldr	r2, [pc, #140]	; (800088c <MX_GPIO_Init+0xac>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_GPIO_Init+0xac>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_GPIO_Init+0xac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_GPIO_Init+0xac>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0xac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_GPIO_Init+0xac>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a15      	ldr	r2, [pc, #84]	; (800088c <MX_GPIO_Init+0xac>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_GPIO_Init+0xac>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_GPIO_Init+0xac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_GPIO_Init+0xac>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_GPIO_Init+0xac>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0xb0>)
 800087e:	f002 fe55 	bl	800352c <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>

0800089e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <_ZN3ros3MsgC1Ev+0x1c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	080067b4 	.word	0x080067b4

080008e0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
      data()
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffe8 	bl	80008c0 <_ZN3ros3MsgC1Ev>
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3304      	adds	r3, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ffcf 	bl	800089e <_ZN3ros4TimeC1Ev>
    {
    }
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	0800679c 	.word	0x0800679c

08000910 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6859      	ldr	r1, [r3, #4]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	b2ca      	uxtb	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	0a19      	lsrs	r1, r3, #8
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	3301      	adds	r3, #1
 8000936:	683a      	ldr	r2, [r7, #0]
 8000938:	4413      	add	r3, r2
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	0c19      	lsrs	r1, r3, #16
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3302      	adds	r3, #2
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4413      	add	r3, r2
 800094c:	b2ca      	uxtb	r2, r1
 800094e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	0e19      	lsrs	r1, r3, #24
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3303      	adds	r3, #3
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3304      	adds	r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6899      	ldr	r1, [r3, #8]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	0a19      	lsrs	r1, r3, #8
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4413      	add	r3, r2
 8000984:	b2ca      	uxtb	r2, r1
 8000986:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	0c19      	lsrs	r1, r3, #16
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3302      	adds	r3, #2
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	0e19      	lsrs	r1, r3, #24
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3303      	adds	r3, #3
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	b2ca      	uxtb	r2, r1
 80009aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	3304      	adds	r3, #4
 80009b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80009b2:	68fb      	ldr	r3, [r7, #12]
    }
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3302      	adds	r3, #2
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	440b      	add	r3, r1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	431a      	orrs	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3303      	adds	r3, #3
 8000a10:	6839      	ldr	r1, [r7, #0]
 8000a12:	440b      	add	r3, r1
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	061b      	lsls	r3, r3, #24
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3304      	adds	r3, #4
 8000a22:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	683a      	ldr	r2, [r7, #0]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	6839      	ldr	r1, [r7, #0]
 8000a3c:	440b      	add	r3, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	431a      	orrs	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3302      	adds	r3, #2
 8000a50:	6839      	ldr	r1, [r7, #0]
 8000a52:	440b      	add	r3, r1
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	041b      	lsls	r3, r3, #16
 8000a58:	431a      	orrs	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3303      	adds	r3, #3
 8000a66:	6839      	ldr	r1, [r7, #0]
 8000a68:	440b      	add	r3, r1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	061b      	lsls	r3, r3, #24
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3304      	adds	r3, #4
 8000a78:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    }
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	0800655c 	.word	0x0800655c

08000aa4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	0800656c 	.word	0x0800656c

08000ac0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fef8 	bl	80008c0 <_ZN3ros3MsgC1Ev>
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	809a      	strh	r2, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000aec:	611a      	str	r2, [r3, #16]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
    {
    }
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08006784 	.word	0x08006784
 8000b04:	08006590 	.word	0x08006590

08000b08 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	8899      	ldrh	r1, [r3, #4]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	b2ca      	uxtb	r2, r1
 8000b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	889b      	ldrh	r3, [r3, #4]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	b299      	uxth	r1, r3
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	b2ca      	uxtb	r2, r1
 8000b36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb46 	bl	80001d4 <strlen>
 8000b48:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	69b9      	ldr	r1, [r7, #24]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 ff1b 	bl	800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	18d0      	adds	r0, r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f005 fb52 	bl	8006214 <memcpy>
      offset += length_topic_name;
 8000b70:	69fa      	ldr	r2, [r7, #28]
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4413      	add	r3, r2
 8000b76:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fb29 	bl	80001d4 <strlen>
 8000b82:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	4413      	add	r3, r2
 8000b8a:	6979      	ldr	r1, [r7, #20]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fefe 	bl	800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	18d0      	adds	r0, r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f005 fb35 	bl	8006214 <memcpy>
      offset += length_message_type;
 8000baa:	69fa      	ldr	r2, [r7, #28]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	4413      	add	r3, r2
 8000bb0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	691b      	ldr	r3, [r3, #16]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb0c 	bl	80001d4 <strlen>
 8000bbc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	6939      	ldr	r1, [r7, #16]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fee1 	bl	800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	18d0      	adds	r0, r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4619      	mov	r1, r3
 8000be0:	f005 fb18 	bl	8006214 <memcpy>
      offset += length_md5sum;
 8000be4:	69fa      	ldr	r2, [r7, #28]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4413      	add	r3, r2
 8000bea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	0a19      	lsrs	r1, r3, #8
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	0c19      	lsrs	r1, r3, #16
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3302      	adds	r3, #2
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	0e19      	lsrs	r1, r3, #24
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3303      	adds	r3, #3
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	61fb      	str	r3, [r7, #28]
      return offset;
 8000c34:	69fb      	ldr	r3, [r7, #28]
    }
 8000c36:	4618      	mov	r0, r3
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b08a      	sub	sp, #40	; 0x28
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	3301      	adds	r3, #1
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	440b      	add	r3, r1
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	021b      	lsls	r3, r3, #8
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	441a      	add	r2, r3
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fe9d 	bl	80019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	3304      	adds	r3, #4
 8000c94:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d20c      	bcs.n	8000cc0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	441a      	add	r2, r3
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6839      	ldr	r1, [r7, #0]
 8000cb2:	440b      	add	r3, r1
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	3301      	adds	r3, #1
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	e7ec      	b.n	8000c9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	441a      	add	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	441a      	add	r2, r3
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fe6a 	bl	80019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4413      	add	r3, r2
 8000d06:	6a3a      	ldr	r2, [r7, #32]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d20c      	bcs.n	8000d26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
 8000d10:	441a      	add	r2, r3
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	440b      	add	r3, r1
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d1e:	6a3b      	ldr	r3, [r7, #32]
 8000d20:	3301      	adds	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e7ec      	b.n	8000d00 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	4413      	add	r3, r2
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4413      	add	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	441a      	add	r2, r3
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fe37 	bl	80019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	3304      	adds	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d20c      	bcs.n	8000d8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	441a      	add	r2, r3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	440b      	add	r3, r1
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	3301      	adds	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e7ec      	b.n	8000d66 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4413      	add	r3, r2
 8000d92:	3b01      	subs	r3, #1
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	441a      	add	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	440a      	add	r2, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	440b      	add	r3, r1
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	021b      	lsls	r3, r3, #8
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	6839      	ldr	r1, [r7, #0]
 8000ddc:	440b      	add	r3, r1
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	041b      	lsls	r3, r3, #16
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3303      	adds	r3, #3
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	440b      	add	r3, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	061b      	lsls	r3, r3, #24
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	3304      	adds	r3, #4
 8000e02:	61bb      	str	r3, [r7, #24]
     return offset;
 8000e04:	69bb      	ldr	r3, [r7, #24]
    }
 8000e06:	4618      	mov	r0, r3
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	08006594 	.word	0x08006594

08000e2c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	080065b0 	.word	0x080065b0

08000e48 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd34 	bl	80008c0 <_ZN3ros3MsgC1Ev>
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	711a      	strb	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000e68:	609a      	str	r2, [r3, #8]
    {
    }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	0800676c 	.word	0x0800676c
 8000e78:	08006590 	.word	0x08006590

08000e7c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	7912      	ldrb	r2, [r2, #4]
 8000e94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f997 	bl	80001d4 <strlen>
 8000ea6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fd6c 	bl	800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	18d0      	adds	r0, r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f005 f9a3 	bl	8006214 <memcpy>
      offset += length_msg;
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3301      	adds	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	441a      	add	r2, r3
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fd5c 	bl	80019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	3304      	adds	r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d20c      	bcs.n	8000f42 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	6839      	ldr	r1, [r7, #0]
 8000f34:	440b      	add	r3, r1
 8000f36:	7812      	ldrb	r2, [r2, #0]
 8000f38:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e7ec      	b.n	8000f1c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	441a      	add	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
     return offset;
 8000f66:	693b      	ldr	r3, [r7, #16]
    }
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	080065d4 	.word	0x080065d4

08000f8c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f96:	4618      	mov	r0, r3
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	080065e8 	.word	0x080065e8

08000fa8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fc84 	bl	80008c0 <_ZN3ros3MsgC1Ev>
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	61da      	str	r2, [r3, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08006754 	.word	0x08006754

08000ff0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6859      	ldr	r1, [r3, #4]
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	b2ca      	uxtb	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	0a19      	lsrs	r1, r3, #8
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	3301      	adds	r3, #1
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	0c19      	lsrs	r1, r3, #16
 8001024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001026:	3302      	adds	r3, #2
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	0e19      	lsrs	r1, r3, #24
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3303      	adds	r3, #3
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	3304      	adds	r3, #4
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	6a3a      	ldr	r2, [r7, #32]
 8001052:	429a      	cmp	r2, r3
 8001054:	d22b      	bcs.n	80010ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	4413      	add	r3, r2
 800106c:	b2ca      	uxtb	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	0a19      	lsrs	r1, r3, #8
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	3301      	adds	r3, #1
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	4413      	add	r3, r2
 800107c:	b2ca      	uxtb	r2, r1
 800107e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	0c19      	lsrs	r1, r3, #16
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	3302      	adds	r3, #2
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	0e19      	lsrs	r1, r3, #24
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3303      	adds	r3, #3
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	4413      	add	r3, r2
 800109c:	b2ca      	uxtb	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3304      	adds	r3, #4
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	3301      	adds	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	e7ce      	b.n	800104c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6919      	ldr	r1, [r3, #16]
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	b2ca      	uxtb	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	0a19      	lsrs	r1, r3, #8
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3301      	adds	r3, #1
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	0c19      	lsrs	r1, r3, #16
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	3302      	adds	r3, #2
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	0e19      	lsrs	r1, r3, #24
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3303      	adds	r3, #3
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	3304      	adds	r3, #4
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	429a      	cmp	r2, r3
 8001104:	d22b      	bcs.n	800115e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	699a      	ldr	r2, [r3, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	b2ca      	uxtb	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	0a19      	lsrs	r1, r3, #8
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	b2ca      	uxtb	r2, r1
 800112e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	0c19      	lsrs	r1, r3, #16
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3302      	adds	r3, #2
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	4413      	add	r3, r2
 800113c:	b2ca      	uxtb	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	0e19      	lsrs	r1, r3, #24
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	3303      	adds	r3, #3
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4413      	add	r3, r2
 800114c:	b2ca      	uxtb	r2, r1
 800114e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3304      	adds	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	e7ce      	b.n	80010fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69d9      	ldr	r1, [r3, #28]
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	0a19      	lsrs	r1, r3, #8
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4413      	add	r3, r2
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	0c19      	lsrs	r1, r3, #16
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3302      	adds	r3, #2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b2ca      	uxtb	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	0e19      	lsrs	r1, r3, #24
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3303      	adds	r3, #3
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b2ca      	uxtb	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	3304      	adds	r3, #4
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d228      	bcs.n	8001208 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f806 	bl	80001d4 <strlen>
 80011c8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fbdb 	bl	800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3304      	adds	r3, #4
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	18d0      	adds	r0, r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4619      	mov	r1, r3
 80011f4:	f005 f80e 	bl	8006214 <memcpy>
      offset += length_stringsi;
 80011f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	4413      	add	r3, r2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	3301      	adds	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	e7d1      	b.n	80011ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001212:	b580      	push	{r7, lr}
 8001214:	b08e      	sub	sp, #56	; 0x38
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800122a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122c:	3301      	adds	r3, #1
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	6a3a      	ldr	r2, [r7, #32]
 8001238:	4313      	orrs	r3, r2
 800123a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	3302      	adds	r3, #2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	041b      	lsls	r3, r3, #16
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	4313      	orrs	r3, r2
 800124c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	3303      	adds	r3, #3
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	6a3a      	ldr	r2, [r7, #32]
 800125c:	4313      	orrs	r3, r2
 800125e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	3304      	adds	r3, #4
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	6a3a      	ldr	r2, [r7, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	d90a      	bls.n	8001286 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f004 ffe0 	bl	8006240 <realloc>
 8001280:	4602      	mov	r2, r0
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001296:	429a      	cmp	r2, r3
 8001298:	d236      	bcs.n	8001308 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	440a      	add	r2, r1
 80012a6:	7812      	ldrb	r2, [r2, #0]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012b0:	3301      	adds	r3, #1
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	440b      	add	r3, r1
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	3302      	adds	r3, #2
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	041b      	lsls	r3, r3, #16
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d4:	3303      	adds	r3, #3
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	440b      	add	r3, r1
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	061b      	lsls	r3, r3, #24
 80012de:	4313      	orrs	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80012e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ea:	3304      	adds	r3, #4
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	3301      	adds	r3, #1
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
 8001306:	e7c3      	b.n	8001290 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	3301      	adds	r3, #1
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	4313      	orrs	r3, r2
 8001322:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001326:	3302      	adds	r3, #2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	041b      	lsls	r3, r3, #16
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	4313      	orrs	r3, r2
 8001334:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	3303      	adds	r3, #3
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4313      	orrs	r3, r2
 8001346:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	3304      	adds	r3, #4
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	429a      	cmp	r2, r3
 8001356:	d90a      	bls.n	800136e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4619      	mov	r1, r3
 8001362:	4610      	mov	r0, r2
 8001364:	f004 ff6c 	bl	8006240 <realloc>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137e:	429a      	cmp	r2, r3
 8001380:	d236      	bcs.n	80013f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	440a      	add	r2, r1
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	3301      	adds	r3, #1
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	440b      	add	r3, r1
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013aa:	3302      	adds	r3, #2
 80013ac:	6839      	ldr	r1, [r7, #0]
 80013ae:	440b      	add	r3, r1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	3303      	adds	r3, #3
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	440b      	add	r3, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80013d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d2:	3304      	adds	r3, #4
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699a      	ldr	r2, [r3, #24]
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	3214      	adds	r2, #20
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	3301      	adds	r3, #1
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ee:	e7c3      	b.n	8001378 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013fc:	3301      	adds	r3, #1
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	3302      	adds	r3, #2
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	041b      	lsls	r3, r3, #16
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	3303      	adds	r3, #3
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	3304      	adds	r3, #4
 8001434:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	429a      	cmp	r2, r3
 800143e:	d90a      	bls.n	8001456 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f004 fef8 	bl	8006240 <realloc>
 8001450:	4602      	mov	r2, r0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001466:	429a      	cmp	r2, r3
 8001468:	d23f      	bcs.n	80014ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	441a      	add	r2, r3
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 faa7 	bl	80019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	3304      	adds	r3, #4
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
 8001486:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148e:	429a      	cmp	r2, r3
 8001490:	d20c      	bcs.n	80014ac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	441a      	add	r2, r3
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	3b01      	subs	r3, #1
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	440b      	add	r3, r1
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3301      	adds	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
 80014aa:	e7ec      	b.n	8001486 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80014ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4413      	add	r3, r2
 80014b2:	3b01      	subs	r3, #1
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80014bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014be:	3b01      	subs	r3, #1
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	441a      	add	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80014c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	3220      	adds	r2, #32
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	3301      	adds	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e8:	e7ba      	b.n	8001460 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80014ec:	4618      	mov	r0, r3
 80014ee:	3738      	adds	r7, #56	; 0x38
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	080066c0 	.word	0x080066c0

08001510 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	0800660c 	.word	0x0800660c

0800152c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
  }
 8001538:	4618      	mov	r0, r3
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800155a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <_ZN13STM32HardwareC1Ev+0x34>)
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	200000d8 	.word	0x200000d8

080015a4 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f804 	bl	80015ba <_ZN13STM32Hardware10reset_rbufEv>
    }
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	4619      	mov	r1, r3
 80015d0:	f003 fcca 	bl	8004f68 <HAL_UART_Receive_DMA>
    }
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN13STM32Hardware4readEv>:

    int read(){
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffa7 	bl	8001544 <_ZN13STM32Hardware10getRdmaIndEv>
 80015f6:	4603      	mov	r3, r0
 80015f8:	429c      	cmp	r4, r3
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800160c:	1c59      	adds	r1, r3, #1
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	4413      	add	r3, r2
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800162c:	68fb      	ldr	r3, [r7, #12]
    }
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
	...

08001638 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	d108      	bne.n	8001660 <_ZN13STM32Hardware5flushEv+0x28>
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f083 0301 	eor.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZN13STM32Hardware5flushEv+0x28>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <_ZN13STM32Hardware5flushEv+0x2a>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03f      	beq.n	80016e6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001678:	429a      	cmp	r2, r3
 800167a:	d031      	beq.n	80016e0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001688:	429a      	cmp	r2, r3
 800168a:	d20a      	bcs.n	80016a2 <_ZN13STM32Hardware5flushEv+0x6a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800169a:	b29b      	uxth	r3, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	e006      	b.n	80016b0 <_ZN13STM32Hardware5flushEv+0x78>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80016bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	4619      	mov	r1, r3
 80016c8:	f003 fbd0 	bl	8004e6c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	4413      	add	r3, r2
 80016d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
      }
    }
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001dc 	.word	0x200001dc

080016f4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
      int n = length;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	bfa8      	it	ge
 800170c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001710:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001718:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4293      	cmp	r3, r2
 8001720:	bf28      	it	cs
 8001722:	4613      	movcs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800172c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	4618      	mov	r0, r3
 800173a:	f004 fd6b 	bl	8006214 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	429a      	cmp	r2, r3
 8001758:	d00b      	beq.n	8001772 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	18d1      	adds	r1, r2, r3
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f004 fd51 	bl	8006214 <memcpy>
      }

      flush();
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f7ff ff60 	bl	8001638 <_ZN13STM32Hardware5flushEv>
    }
 8001778:	bf00      	nop
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	f001 f98c 	bl	8002aa4 <HAL_GetTick>
 800178c:	4603      	mov	r3, r0
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
      data(0)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f88c 	bl	80008c0 <_ZN3ros3MsgC1Ev>
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	711a      	strb	r2, [r3, #4]
    {
    }
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08006710 	.word	0x08006710

080017c4 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	7912      	ldrb	r2, [r2, #4]
 80017dc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
      return offset;
 80017e4:	68fb      	ldr	r3, [r7, #12]
    }
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
     return offset;
 8001812:	68fb      	ldr	r3, [r7, #12]
    }
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	08006630 	.word	0x08006630

0800183c <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	08006640 	.word	0x08006640

08001858 <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt8> led0_sub("led0", &led0_cb);
ros::Subscriber<std_msgs::UInt8> led1_sub("led1", &led1_cb);
ros::Subscriber<std_msgs::UInt8> led2_sub("led2", &led2_cb);
ros::Subscriber<std_msgs::UInt8> led3_sub("led3", &led3_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <HAL_UART_TxCpltCallback+0x20>)
 8001862:	f000 f99b 	bl	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001866:	4603      	mov	r3, r0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fee5 	bl	8001638 <_ZN13STM32Hardware5flushEv>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200001e0 	.word	0x200001e0

0800187c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_UART_RxCpltCallback+0x20>)
 8001886:	f000 f989 	bl	8001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe94 	bl	80015ba <_ZN13STM32Hardware10reset_rbufEv>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001e0 	.word	0x200001e0

080018a0 <setup>:

void setup(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  nh.initNode();
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <setup+0x38>)
 80018a6:	f000 f985 	bl	8001bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(led0_sub);
 80018aa:	490c      	ldr	r1, [pc, #48]	; (80018dc <setup+0x3c>)
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <setup+0x38>)
 80018ae:	f000 f99e 	bl	8001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led1_sub);
 80018b2:	490b      	ldr	r1, [pc, #44]	; (80018e0 <setup+0x40>)
 80018b4:	4808      	ldr	r0, [pc, #32]	; (80018d8 <setup+0x38>)
 80018b6:	f000 f99a 	bl	8001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led2_sub);
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <setup+0x44>)
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <setup+0x38>)
 80018be:	f000 f996 	bl	8001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led3_sub);
 80018c2:	4909      	ldr	r1, [pc, #36]	; (80018e8 <setup+0x48>)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <setup+0x38>)
 80018c6:	f000 f992 	bl	8001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <setup+0x4c>)
 80018ce:	f002 fd0b 	bl	80042e8 <HAL_TIM_PWM_Start>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200001e0 	.word	0x200001e0
 80018dc:	20000b1c 	.word	0x20000b1c
 80018e0:	20000b38 	.word	0x20000b38
 80018e4:	20000b54 	.word	0x20000b54
 80018e8:	20000b70 	.word	0x20000b70
 80018ec:	20000090 	.word	0x20000090

080018f0 <loop>:

void loop(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80018f4:	2108      	movs	r1, #8
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <loop+0x20>)
 80018f8:	f001 ff9c 	bl	8003834 <HAL_GPIO_TogglePin>

  nh.spinOnce();
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <loop+0x24>)
 80018fe:	f000 f9a1 	bl	8001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8001902:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001906:	f001 f8d9 	bl	8002abc <HAL_Delay>
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40020400 	.word	0x40020400
 8001914:	200001e0 	.word	0x200001e0

08001918 <_Z7led0_cbRKN8std_msgs5UInt8E>:

void led0_cb(const std_msgs::UInt8& msg){
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	unsigned char duty1 = msg.data;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty1);
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <_Z7led0_cbRKN8std_msgs5UInt8E+0x24>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000090 	.word	0x20000090

08001940 <_Z7led1_cbRKN8std_msgs5UInt8E>:

void led1_cb(const std_msgs::UInt8& msg){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint8_t duty2 = msg.data;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	73fb      	strb	r3, [r7, #15]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_Z7led2_cbRKN8std_msgs5UInt8E>:

void led2_cb(const std_msgs::UInt8& msg){
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  uint8_t duty3 = msg.data;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_Z7led3_cbRKN8std_msgs5UInt8E>:

void led3_cb(const std_msgs::UInt8& msg){
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint8_t duty4 = msg.data;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	791b      	ldrb	r3, [r3, #4]
 8001980:	73fb      	strb	r3, [r7, #15]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d80d      	bhi.n	80019be <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	fa22 f103 	lsr.w	r1, r2, r3
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e7ee      	b.n	800199c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d811      	bhi.n	8001a08 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6839      	ldr	r1, [r7, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	440a      	add	r2, r1
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	4611      	mov	r1, r2
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e7ea      	b.n	80019de <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	08006740 	.word	0x08006740

08001a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff ffe8 	bl	8001a14 <_ZN3ros15NodeHandleBase_C1Ev>
 8001a44:	4a3a      	ldr	r2, [pc, #232]	; (8001b30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fd8c 	bl	800156c <_ZN13STM32HardwareC1Ev>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff faa0 	bl	8000fa8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b18      	cmp	r3, #24
 8001a70:	d80b      	bhi.n	8001a8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	e7f0      	b.n	8001a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b18      	cmp	r3, #24
 8001a92:	d80a      	bhi.n	8001aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	e7f1      	b.n	8001a8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab4:	d20a      	bcs.n	8001acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e7f0      	b.n	8001aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad6:	d20a      	bcs.n	8001aee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4413      	add	r3, r2
 8001ade:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	e7f0      	b.n	8001ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	080066fc 	.word	0x080066fc

08001b34 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	08006728 	.word	0x08006728

08001b54 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffe5 	bl	8001b34 <_ZN3ros11Subscriber_C1Ev>
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	330c      	adds	r3, #12
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe0f 	bl	8001798 <_ZN8std_msgs5UInt8C1Ev>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	609a      	str	r2, [r3, #8]
  };
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080066e4 	.word	0x080066e4

08001b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3304      	adds	r3, #4
  }
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fcef 	bl	80015a4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b18      	cmp	r3, #24
 8001c00:	dc19      	bgt.n	8001c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10d      	bne.n	8001c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	605a      	str	r2, [r3, #4]
        return true;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e004      	b.n	8001c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e7e2      	b.n	8001bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001c36:	2300      	movs	r3, #0
  }
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fd95 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8001c56:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d903      	bls.n	8001c72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d903      	bls.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d014      	beq.n	8001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fd6e 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	bf8c      	ite	hi
 8001cb4:	2301      	movhi	r3, #1
 8001cb6:	2300      	movls	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001cbe:	f06f 0301 	mvn.w	r3, #1
 8001cc2:	e194      	b.n	8001fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fc87 	bl	80015dc <_ZN13STM32Hardware4readEv>
 8001cce:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f2c0 8174 	blt.w	8001fc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001cee:	2b07      	cmp	r3, #7
 8001cf0:	d11e      	bne.n	8001d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001cf8:	1c59      	adds	r1, r3, #1
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	b2d1      	uxtb	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	460a      	mov	r2, r1
 8001d0a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1b4      	bne.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001d2e:	e7af      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d128      	bne.n	8001d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d10d      	bne.n	8001d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f103 0214 	add.w	r2, r3, #20
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001d5a:	e799      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd0d 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf8c      	ite	hi
 8001d74:	2301      	movhi	r3, #1
 8001d76:	2300      	movls	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d088      	beq.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001d86:	f06f 0301 	mvn.w	r3, #1
 8001d8a:	e130      	b.n	8001fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d118      	bne.n	8001dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2bfe      	cmp	r3, #254	; 0xfe
 8001d9a:	d107      	bne.n	8001dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001daa:	e771      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f af68 	bne.w	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f918 	bl	8001ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001dc6:	e763      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d113      	bne.n	8001dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001df8:	e74a      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d110      	bne.n	8001e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	441a      	add	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e24:	e734      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d116      	bne.n	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001e36:	425a      	negs	r2, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	bf58      	it	pl
 8001e3e:	4253      	negpl	r3, r2
 8001e40:	2bff      	cmp	r3, #255	; 0xff
 8001e42:	d107      	bne.n	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e52:	e71d      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001e5c:	e718      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10f      	bne.n	8001e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8001e86:	e703      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d117      	bne.n	8001ec2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	441a      	add	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f aeec 	bne.w	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2208      	movs	r2, #8
 8001ebc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001ec0:	e6e6      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	f47f aee1 	bne.w	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8001edc:	425a      	negs	r2, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	bf58      	it	pl
 8001ee4:	4253      	negpl	r3, r2
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	f47f aed2 	bne.w	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d110      	bne.n	8001f18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f87d 	bl	8001ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f898 	bl	8002032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f16:	e06a      	b.n	8001fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f1e:	2b0a      	cmp	r3, #10
 8001f20:	d107      	bne.n	8001f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f960 	bl	80021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001f30:	e6ae      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f38:	2b06      	cmp	r3, #6
 8001f3a:	d10e      	bne.n	8001f5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	f7ff f961 	bl	8001212 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8001f58:	e69a      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f60:	2b0b      	cmp	r3, #11
 8001f62:	d104      	bne.n	8001f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001f6c:	e690      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f74:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f43f ae84 	beq.w	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001f8e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001f98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8001fa2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4798      	blx	r3
    while (true)
 8001fbe:	e667      	b.n	8001c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001fc0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00f      	beq.n	8001fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d906      	bls.n	8001fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f809 	bl	8001ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8001fec:	2300      	movs	r3, #0
  }
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fc6c 	bl	80008e0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f107 020c 	add.w	r2, r7, #12
 8002012:	210a      	movs	r1, #10
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
    rt_time = hardware_.time();
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbaf 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002032:	b590      	push	{r4, r7, lr}
 8002034:	b08b      	sub	sp, #44	; 0x2c
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fd3e 	bl	8000ac0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	2b18      	cmp	r3, #24
 800204c:	dc63      	bgt.n	8002116 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d056      	beq.n	800210e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	b29b      	uxth	r3, r3
 8002072:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	6859      	ldr	r1, [r3, #4]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3308      	adds	r3, #8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4798      	blx	r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4608      	mov	r0, r1
 80020dc:	4798      	blx	r3
 80020de:	4603      	mov	r3, r0
 80020e0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80020e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681c      	ldr	r4, [r3, #0]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa15 	bl	800152c <_ZN3ros9Publisher15getEndpointTypeEv>
 8002102:	4601      	mov	r1, r0
 8002104:	f107 030c 	add.w	r3, r7, #12
 8002108:	461a      	mov	r2, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
 8002114:	e798      	b.n	8002048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	2b18      	cmp	r3, #24
 800211e:	dc5f      	bgt.n	80021e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002124:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d053      	beq.n	80021d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002134:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	b29b      	uxth	r3, r3
 8002140:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	f202 2222 	addw	r2, r2, #546	; 0x222
 800214a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002156:	f202 2222 	addw	r2, r2, #546	; 0x222
 800215a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002162:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3308      	adds	r3, #8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4608      	mov	r0, r1
 8002172:	4798      	blx	r3
 8002174:	4603      	mov	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	f202 2222 	addw	r2, r2, #546	; 0x222
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	330c      	adds	r3, #12
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4608      	mov	r0, r1
 8002198:	4798      	blx	r3
 800219a:	4603      	mov	r3, r0
 800219c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800219e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681c      	ldr	r4, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ba:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3304      	adds	r3, #4
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4798      	blx	r3
 80021cc:	4601      	mov	r1, r0
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	461a      	mov	r2, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	3301      	adds	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	e79c      	b.n	800211a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80021e8:	bf00      	nop
 80021ea:	372c      	adds	r7, #44	; 0x2c
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}

080021f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fb6e 	bl	80008e0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fab9 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 800220e:	4602      	mov	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fbcd 	bl	80009c0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4915      	ldr	r1, [pc, #84]	; (8002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800222c:	fba1 1303 	umull	r1, r3, r1, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002236:	6939      	ldr	r1, [r7, #16]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800223c:	fba3 0302 	umull	r0, r3, r3, r2
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a0d      	ldr	r2, [pc, #52]	; (8002284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	440b      	add	r3, r1
 8002254:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8a6 	bl	80023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa89 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	10624dd3 	.word	0x10624dd3
 8002284:	000f4240 	.word	0x000f4240

08002288 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b63      	cmp	r3, #99	; 0x63
 8002298:	dd09      	ble.n	80022ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80022a0:	f083 0301 	eor.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e079      	b.n	80023a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80022ba:	3207      	adds	r2, #7
 80022bc:	4611      	mov	r1, r2
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4798      	blx	r3
 80022c2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	22fe      	movs	r2, #254	; 0xfe
 80022d0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80022fa:	4413      	add	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	b21b      	sxth	r3, r3
 8002316:	121b      	asrs	r3, r3, #8
 8002318:	b21b      	sxth	r3, r3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002326:	2305      	movs	r3, #5
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3306      	adds	r3, #6
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	429a      	cmp	r2, r3
 8002332:	dc0d      	bgt.n	8002350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	4413      	add	r3, r2
 800233a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	4413      	add	r3, r2
 8002346:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	3301      	adds	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	e7ec      	b.n	800232a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3307      	adds	r3, #7
 8002354:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	425a      	negs	r2, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	bf58      	it	pl
 8002360:	4253      	negpl	r3, r2
 8002362:	b2da      	uxtb	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	6179      	str	r1, [r7, #20]
 800236a:	43d2      	mvns	r2, r2
 800236c:	b2d1      	uxtb	r1, r2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	460a      	mov	r2, r1
 8002374:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237e:	dc0a      	bgt.n	8002396 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1d18      	adds	r0, r3, #4
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff f9b1 	bl	80016f4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	e005      	b.n	80023a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002396:	4905      	ldr	r1, [pc, #20]	; (80023ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f849 	bl	8002430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	08006664 	.word	0x08006664

080023b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f9de 	bl	8001780 <_ZN13STM32Hardware4timeEv>
 80023c4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4915      	ldr	r1, [pc, #84]	; (8002424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80023ce:	fba1 1303 	umull	r1, r3, r1, r3
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80023e6:	fba3 0302 	umull	r0, r3, r3, r2
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023f0:	fb00 f303 	mul.w	r3, r0, r3
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	1aca      	subs	r2, r1, r3
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002400:	4413      	add	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f7fe f866 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	10624dd3 	.word	0x10624dd3
 8002428:	000f4240 	.word	0x000f4240
 800242c:	3b9aca00 	.word	0x3b9aca00

08002430 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	2103      	movs	r1, #3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f804 	bl	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	460b      	mov	r3, r1
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fcf2 	bl	8000e48 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002464:	7afb      	ldrb	r3, [r7, #11]
 8002466:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f107 0214 	add.w	r2, r7, #20
 8002476:	2107      	movs	r1, #7
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	4798      	blx	r3
  }
 800247c:	bf00      	nop
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <_Z41__static_initialization_and_destruction_0ii>:
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d11f      	bne.n	80024d4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249a:	4293      	cmp	r3, r2
 800249c:	d11a      	bne.n	80024d4 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 800249e:	480f      	ldr	r0, [pc, #60]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80024a0:	f7ff fac8 	bl	8001a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::UInt8> led0_sub("led0", &led0_cb);
 80024a4:	2301      	movs	r3, #1
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80024ac:	f7ff fb52 	bl	8001b54 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led1_sub("led1", &led1_cb);
 80024b0:	2301      	movs	r3, #1
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80024b6:	480f      	ldr	r0, [pc, #60]	; (80024f4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80024b8:	f7ff fb4c 	bl	8001b54 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led2_sub("led2", &led2_cb);
 80024bc:	2301      	movs	r3, #1
 80024be:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80024c2:	480f      	ldr	r0, [pc, #60]	; (8002500 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80024c4:	f7ff fb46 	bl	8001b54 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led3_sub("led3", &led3_cb);
 80024c8:	2301      	movs	r3, #1
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80024cc:	490e      	ldr	r1, [pc, #56]	; (8002508 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80024ce:	480f      	ldr	r0, [pc, #60]	; (800250c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80024d0:	f7ff fb40 	bl	8001b54 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200001e0 	.word	0x200001e0
 80024e0:	08001919 	.word	0x08001919
 80024e4:	080066a0 	.word	0x080066a0
 80024e8:	20000b1c 	.word	0x20000b1c
 80024ec:	08001941 	.word	0x08001941
 80024f0:	080066a8 	.word	0x080066a8
 80024f4:	20000b38 	.word	0x20000b38
 80024f8:	0800195b 	.word	0x0800195b
 80024fc:	080066b0 	.word	0x080066b0
 8002500:	20000b54 	.word	0x20000b54
 8002504:	08001975 	.word	0x08001975
 8002508:	080066b8 	.word	0x080066b8
 800250c:	20000b70 	.word	0x20000b70

08002510 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	330c      	adds	r3, #12
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f966 	bl	80017f2 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	320c      	adds	r2, #12
 800252e:	4610      	mov	r0, r2
 8002530:	4798      	blx	r3
  }
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
  }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	330c      	adds	r3, #12
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f95e 	bl	8001820 <_ZN8std_msgs5UInt87getTypeEv>
 8002564:	4603      	mov	r3, r0
  }
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	330c      	adds	r3, #12
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff f95e 	bl	800183c <_ZN8std_msgs5UInt86getMD5Ev>
 8002580:	4603      	mov	r3, r0
  }
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
    return configured_;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_GLOBAL__sub_I_nh>:
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7ff ff69 	bl	8002484 <_Z41__static_initialization_and_destruction_0ii>
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_MspInit+0x4c>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_MspInit+0x4c>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a08      	ldr	r2, [pc, #32]	; (8002600 <HAL_MspInit+0x4c>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025f2:	2007      	movs	r0, #7
 80025f4:	f000 fb56 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d10d      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_TIM_Base_MspInit+0x3c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_TIM_Base_MspInit+0x3c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_TIM_Base_MspInit+0x3c>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d11d      	bne.n	80026a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_TIM_MspPostInit+0x68>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002682:	2320      	movs	r3, #32
 8002684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002692:	2301      	movs	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4619      	mov	r1, r3
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 800269e:	f000 ff45 	bl	800352c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a4c      	ldr	r2, [pc, #304]	; (8002804 <HAL_UART_MspInit+0x150>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	f040 8091 	bne.w	80027fa <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <HAL_UART_MspInit+0x154>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_UART_MspInit+0x154>)
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
 80026e8:	4b47      	ldr	r3, [pc, #284]	; (8002808 <HAL_UART_MspInit+0x154>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_UART_MspInit+0x154>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_UART_MspInit+0x154>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6313      	str	r3, [r2, #48]	; 0x30
 8002704:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_UART_MspInit+0x154>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002710:	230c      	movs	r3, #12
 8002712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002720:	2307      	movs	r3, #7
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	4838      	ldr	r0, [pc, #224]	; (800280c <HAL_UART_MspInit+0x158>)
 800272c:	f000 fefe 	bl	800352c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002732:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_UART_MspInit+0x160>)
 8002734:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002738:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002744:	4b32      	ldr	r3, [pc, #200]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <HAL_UART_MspInit+0x15c>)
 800274c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002750:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002758:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_UART_MspInit+0x15c>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002764:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <HAL_UART_MspInit+0x15c>)
 800276e:	2200      	movs	r2, #0
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002772:	4827      	ldr	r0, [pc, #156]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002774:	f000 fad8 	bl	8002d28 <HAL_DMA_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800277e:	f7fe f889 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_UART_MspInit+0x15c>)
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
 8002788:	4a21      	ldr	r2, [pc, #132]	; (8002810 <HAL_UART_MspInit+0x15c>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800278e:	4b22      	ldr	r3, [pc, #136]	; (8002818 <HAL_UART_MspInit+0x164>)
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_UART_MspInit+0x168>)
 8002792:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_UART_MspInit+0x164>)
 8002796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800279a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_UART_MspInit+0x164>)
 800279e:	2240      	movs	r2, #64	; 0x40
 80027a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027ce:	4812      	ldr	r0, [pc, #72]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027d0:	f000 faaa 	bl	8002d28 <HAL_DMA_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80027da:	f7fe f85b 	bl	8000894 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <HAL_UART_MspInit+0x164>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	2026      	movs	r0, #38	; 0x26
 80027f0:	f000 fa63 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027f4:	2026      	movs	r0, #38	; 0x26
 80027f6:	f000 fa7c 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40004400 	.word	0x40004400
 8002808:	40023800 	.word	0x40023800
 800280c:	40020000 	.word	0x40020000
 8002810:	2000011c 	.word	0x2000011c
 8002814:	40026088 	.word	0x40026088
 8002818:	2000017c 	.word	0x2000017c
 800281c:	400260a0 	.word	0x400260a0

08002820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <NMI_Handler+0x4>

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286c:	f000 f906 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}

08002874 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <DMA1_Stream5_IRQHandler+0x10>)
 800287a:	f000 fbed 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000011c 	.word	0x2000011c

08002888 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800288c:	4802      	ldr	r0, [pc, #8]	; (8002898 <DMA1_Stream6_IRQHandler+0x10>)
 800288e:	f000 fbe3 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2000017c 	.word	0x2000017c

0800289c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <USART2_IRQHandler+0x10>)
 80028a2:	f002 fb91 	bl	8004fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200000d8 	.word	0x200000d8

080028b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
	return 1;
 80028b4:	2301      	movs	r3, #1
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_kill>:

int _kill(int pid, int sig)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028ca:	f003 fc79 	bl	80061c0 <__errno>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2216      	movs	r2, #22
 80028d2:	601a      	str	r2, [r3, #0]
	return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_exit>:

void _exit (int status)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ffe7 	bl	80028c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028f2:	e7fe      	b.n	80028f2 <_exit+0x12>

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f003 fc4c 	bl	80061c0 <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20018000 	.word	0x20018000
 8002954:	00000400 	.word	0x00000400
 8002958:	20000b8c 	.word	0x20000b8c
 800295c:	20000ba8 	.word	0x20000ba8

08002960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <SystemInit+0x20>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <SystemInit+0x20>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298a:	490e      	ldr	r1, [pc, #56]	; (80029c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a0:	4c0b      	ldr	r4, [pc, #44]	; (80029d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ae:	f7ff ffd7 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b2:	f003 fc0b 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b6:	f7fd fdc3 	bl	8000540 <main>
  bx  lr    
 80029ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80029c8:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 80029cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80029d0:	20000ba4 	.word	0x20000ba4

080029d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_Init+0x40>)
 80029e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_Init+0x40>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x40>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f94f 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fdd2 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f967 	bl	8002d0e <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a58:	f000 f92f 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000008 	.word	0x20000008
 8002aa0:	20000b90 	.word	0x20000b90

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000b90 	.word	0x20000b90

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff feb6 	bl	8002aa4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff fe9d 	bl	8002aa4 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fb01 	bl	8003434 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fab8 	bl	80033c8 <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Start_IT+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e040      	b.n	8002f2c <HAL_DMA_Start_IT+0xa8>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12f      	bne.n	8002f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa4a 	bl	800336c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0216 	orr.w	r2, r2, #22
 8002ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e005      	b.n	8002f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7ff fdaf 	bl	8002aa4 <HAL_GetTick>
 8002f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e052      	b.n	800300c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0216 	bic.w	r2, r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_DMA_Abort+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0208 	bic.w	r2, r2, #8
 8002fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb6:	e013      	b.n	8002fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb8:	f7ff fd74 	bl	8002aa4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d90c      	bls.n	8002fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e015      	b.n	800300c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e4      	bne.n	8002fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	223f      	movs	r2, #63	; 0x3f
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d004      	beq.n	8003032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00c      	b.n	800304c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2205      	movs	r2, #5
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003064:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_DMA_IRQHandler+0x248>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a8e      	ldr	r2, [pc, #568]	; (80032a4 <HAL_DMA_IRQHandler+0x24c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2208      	movs	r2, #8
 8003084:	409a      	lsls	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01a      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	2208      	movs	r2, #8
 80030b2:	409a      	lsls	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	2201      	movs	r2, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	2201      	movs	r2, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	2204      	movs	r2, #4
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	2210      	movs	r2, #16
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d043      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d03c      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	2210      	movs	r2, #16
 8003154:	409a      	lsls	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d018      	beq.n	800319a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d024      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	e01f      	b.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
 8003198:	e016      	b.n	80031c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0208 	bic.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2220      	movs	r2, #32
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 808f 	beq.w	80032f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8087 	beq.w	80032f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2220      	movs	r2, #32
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d136      	bne.n	8003270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0216 	bic.w	r2, r2, #22
 8003210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_DMA_IRQHandler+0x1da>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	223f      	movs	r2, #63	; 0x3f
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d07e      	beq.n	8003364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
        }
        return;
 800326e:	e079      	b.n	8003364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	2b00      	cmp	r3, #0
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e02c      	b.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000
 80032a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e01e      	b.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10f      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d032      	beq.n	8003366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2205      	movs	r2, #5
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3301      	adds	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	d307      	bcc.n	8003340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f2      	bne.n	8003324 <HAL_DMA_IRQHandler+0x2cc>
 800333e:	e000      	b.n	8003342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e000      	b.n	8003366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003364:	bf00      	nop
    }
  }
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d108      	bne.n	80033ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033aa:	e007      	b.n	80033bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	60da      	str	r2, [r3, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3b10      	subs	r3, #16
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <DMA_CalcBaseAndBitshift+0x64>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <DMA_CalcBaseAndBitshift+0x68>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d909      	bls.n	800340a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	659a      	str	r2, [r3, #88]	; 0x58
 8003408:	e007      	b.n	800341a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	aaaaaaab 	.word	0xaaaaaaab
 8003430:	080067dc 	.word	0x080067dc

08003434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d856      	bhi.n	8003502 <DMA_CheckFifoParam+0xce>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <DMA_CheckFifoParam+0x28>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	0800346d 	.word	0x0800346d
 8003460:	0800347f 	.word	0x0800347f
 8003464:	0800346d 	.word	0x0800346d
 8003468:	08003503 	.word	0x08003503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d046      	beq.n	8003506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800347c:	e043      	b.n	8003506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003486:	d140      	bne.n	800350a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800348c:	e03d      	b.n	800350a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d121      	bne.n	80034dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d837      	bhi.n	800350e <DMA_CheckFifoParam+0xda>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <DMA_CheckFifoParam+0x70>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034bb 	.word	0x080034bb
 80034ac:	080034b5 	.word	0x080034b5
 80034b0:	080034cd 	.word	0x080034cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e030      	b.n	800351c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d025      	beq.n	8003512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ca:	e022      	b.n	8003512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d4:	d11f      	bne.n	8003516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034da:	e01c      	b.n	8003516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d903      	bls.n	80034ea <DMA_CheckFifoParam+0xb6>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d003      	beq.n	80034f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e8:	e018      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      break;
 80034ee:	e015      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003500:	e00b      	b.n	800351a <DMA_CheckFifoParam+0xe6>
      break;
 8003502:	bf00      	nop
 8003504:	e00a      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e008      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e006      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e004      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;   
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <DMA_CheckFifoParam+0xe8>
      break;
 800351a:	bf00      	nop
    }
  } 
  
  return status; 
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	; 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e159      	b.n	80037fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 8148 	bne.w	80037f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a2 	beq.w	80037f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b57      	ldr	r3, [pc, #348]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	4a56      	ldr	r2, [pc, #344]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	; 0x44
 80036c2:	4b54      	ldr	r3, [pc, #336]	; (8003814 <HAL_GPIO_Init+0x2e8>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a52      	ldr	r2, [pc, #328]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a49      	ldr	r2, [pc, #292]	; (800381c <HAL_GPIO_Init+0x2f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x202>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a48      	ldr	r2, [pc, #288]	; (8003820 <HAL_GPIO_Init+0x2f4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x1fe>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a47      	ldr	r2, [pc, #284]	; (8003824 <HAL_GPIO_Init+0x2f8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x1fa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a46      	ldr	r2, [pc, #280]	; (8003828 <HAL_GPIO_Init+0x2fc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x1f6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_GPIO_Init+0x300>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x1f2>
 800371a:	2304      	movs	r3, #4
 800371c:	e008      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800371e:	2307      	movs	r3, #7
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372e:	2300      	movs	r3, #0
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003740:	4935      	ldr	r1, [pc, #212]	; (8003818 <HAL_GPIO_Init+0x2ec>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_GPIO_Init+0x304>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003772:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <HAL_GPIO_Init+0x304>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003778:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_GPIO_Init+0x304>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <HAL_GPIO_Init+0x304>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037a2:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f0:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <HAL_GPIO_Init+0x304>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	f67f aea2 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40013800 	.word	0x40013800
 800381c:	40020000 	.word	0x40020000
 8003820:	40020400 	.word	0x40020400
 8003824:	40020800 	.word	0x40020800
 8003828:	40020c00 	.word	0x40020c00
 800382c:	40021000 	.word	0x40021000
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	041a      	lsls	r2, r3, #16
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43d9      	mvns	r1, r3
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	400b      	ands	r3, r1
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f8c0 	bl	8002aa4 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f8bc 	bl	8002aa4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7ff f8ac 	bl	8002aa4 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7ff f8a8 	bl	8002aa4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7ff f861 	bl	8002aa4 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7ff f85d 	bl	8002aa4 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f840 	bl	8002aa4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7ff f83c 	bl	8002aa4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7ff f820 	bl	8002aa4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7ff f81c 	bl	8002aa4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7ff f809 	bl	8002aa4 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7ff f805 	bl	8002aa4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe ffc5 	bl	8002aa4 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe ffc1 	bl	8002aa4 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe ff86 	bl	8002aa4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe ff82 	bl	8002aa4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe ff70 	bl	8002aa4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe ff6c 	bl	8002aa4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe ff40 	bl	8002aa4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe ff3c 	bl	8002aa4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe ff15 	bl	8002aa4 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe ff11 	bl	8002aa4 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fefe 	bl	8002aa4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fefa 	bl	8002aa4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fe2c 	bl	8002aa4 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fe28 	bl	8002aa4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fd8c 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	080067c4 	.word	0x080067c4
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b094      	sub	sp, #80	; 0x50
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b79      	ldr	r3, [pc, #484]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80e1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e0db      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b73      	ldr	r3, [pc, #460]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f5c:	e0db      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f62:	e0d8      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	6139      	str	r1, [r7, #16]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fdc:	4659      	mov	r1, fp
 8003fde:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	462b      	mov	r3, r5
 8004004:	eb49 0303 	adc.w	r3, r9, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004016:	4629      	mov	r1, r5
 8004018:	024b      	lsls	r3, r1, #9
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004020:	4621      	mov	r1, r4
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004034:	f7fc f8d6 	bl	80001e4 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	e058      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	4618      	mov	r0, r3
 800404c:	4611      	mov	r1, r2
 800404e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4641      	mov	r1, r8
 8004076:	ebb2 0a01 	subs.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800408c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004094:	ebb2 040a 	subs.w	r4, r2, sl
 8004098:	eb63 050b 	sbc.w	r5, r3, fp
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	f7fc f87c 	bl	80001e4 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004118:	4618      	mov	r0, r3
 800411a:	3750      	adds	r7, #80	; 0x50
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	080067d4 	.word	0x080067d4

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffdc 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	080067d4 	.word	0x080067d4

08004198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e041      	b.n	800422e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fe fa20 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f000 fac0 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e041      	b.n	80042cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f839 	bl	80042d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2202      	movs	r2, #2
 8004266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f000 fa71 	bl	800475c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_TIM_PWM_Start+0x24>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e022      	b.n	8004352 <HAL_TIM_PWM_Start+0x6a>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d109      	bne.n	8004326 <HAL_TIM_PWM_Start+0x3e>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e015      	b.n	8004352 <HAL_TIM_PWM_Start+0x6a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d109      	bne.n	8004340 <HAL_TIM_PWM_Start+0x58>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e008      	b.n	8004352 <HAL_TIM_PWM_Start+0x6a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e068      	b.n	800442c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Start+0x82>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	e013      	b.n	8004392 <HAL_TIM_PWM_Start+0xaa>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0x92>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004378:	e00b      	b.n	8004392 <HAL_TIM_PWM_Start+0xaa>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xa2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004388:	e003      	b.n	8004392 <HAL_TIM_PWM_Start+0xaa>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fc84 	bl	8004ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a23      	ldr	r2, [pc, #140]	; (8004434 <HAL_TIM_PWM_Start+0x14c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <HAL_TIM_PWM_Start+0x14c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x10e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d013      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x10e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a19      	ldr	r2, [pc, #100]	; (8004438 <HAL_TIM_PWM_Start+0x150>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00e      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x10e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a17      	ldr	r2, [pc, #92]	; (800443c <HAL_TIM_PWM_Start+0x154>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x10e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_TIM_PWM_Start+0x158>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIM_PWM_Start+0x10e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a14      	ldr	r2, [pc, #80]	; (8004444 <HAL_TIM_PWM_Start+0x15c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d111      	bne.n	800441a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b06      	cmp	r3, #6
 8004406:	d010      	beq.n	800442a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	e007      	b.n	800442a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40010000 	.word	0x40010000
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40014000 	.word	0x40014000

08004448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004462:	2302      	movs	r3, #2
 8004464:	e0ae      	b.n	80045c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b0c      	cmp	r3, #12
 8004472:	f200 809f 	bhi.w	80045b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	080044b1 	.word	0x080044b1
 8004480:	080045b5 	.word	0x080045b5
 8004484:	080045b5 	.word	0x080045b5
 8004488:	080045b5 	.word	0x080045b5
 800448c:	080044f1 	.word	0x080044f1
 8004490:	080045b5 	.word	0x080045b5
 8004494:	080045b5 	.word	0x080045b5
 8004498:	080045b5 	.word	0x080045b5
 800449c:	08004533 	.word	0x08004533
 80044a0:	080045b5 	.word	0x080045b5
 80044a4:	080045b5 	.word	0x080045b5
 80044a8:	080045b5 	.word	0x080045b5
 80044ac:	08004573 	.word	0x08004573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f9d0 	bl	800485c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
      break;
 80044ee:	e064      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa16 	bl	8004928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	619a      	str	r2, [r3, #24]
      break;
 8004530:	e043      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa61 	bl	8004a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0208 	orr.w	r2, r2, #8
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0204 	bic.w	r2, r2, #4
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
      break;
 8004570:	e023      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 faab 	bl	8004ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
      break;
 80045b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIM_ConfigClockSource+0x1c>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e0b4      	b.n	8004752 <HAL_TIM_ConfigClockSource+0x186>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800460e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004620:	d03e      	beq.n	80046a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	f200 8087 	bhi.w	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462e:	f000 8086 	beq.w	800473e <HAL_TIM_ConfigClockSource+0x172>
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	d87f      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b70      	cmp	r3, #112	; 0x70
 800463a:	d01a      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0xa6>
 800463c:	2b70      	cmp	r3, #112	; 0x70
 800463e:	d87b      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004640:	2b60      	cmp	r3, #96	; 0x60
 8004642:	d050      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004644:	2b60      	cmp	r3, #96	; 0x60
 8004646:	d877      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b50      	cmp	r3, #80	; 0x50
 800464a:	d03c      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0xfa>
 800464c:	2b50      	cmp	r3, #80	; 0x50
 800464e:	d873      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d058      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x13a>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d86f      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b30      	cmp	r3, #48	; 0x30
 800465a:	d064      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x15a>
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d86b      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b20      	cmp	r3, #32
 8004662:	d060      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x15a>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d867      	bhi.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x15a>
 800466c:	2b10      	cmp	r3, #16
 800466e:	d05a      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x15a>
 8004670:	e062      	b.n	8004738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6899      	ldr	r1, [r3, #8]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f000 faf1 	bl	8004c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	609a      	str	r2, [r3, #8]
      break;
 800469e:	e04f      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f000 fada 	bl	8004c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046c2:	609a      	str	r2, [r3, #8]
      break;
 80046c4:	e03c      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	461a      	mov	r2, r3
 80046d4:	f000 fa4e 	bl	8004b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2150      	movs	r1, #80	; 0x50
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 faa7 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 80046e4:	e02c      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6859      	ldr	r1, [r3, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f000 fa6d 	bl	8004bd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2160      	movs	r1, #96	; 0x60
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fa97 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 8004704:	e01c      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fa2e 	bl	8004b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2140      	movs	r1, #64	; 0x40
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fa87 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 8004724:	e00c      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f000 fa7e 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 8004736:	e003      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e000      	b.n	8004740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800473e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a34      	ldr	r2, [pc, #208]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00f      	beq.n	8004794 <TIM_Base_SetConfig+0x38>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d00b      	beq.n	8004794 <TIM_Base_SetConfig+0x38>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a31      	ldr	r2, [pc, #196]	; (8004844 <TIM_Base_SetConfig+0xe8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0x38>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a30      	ldr	r2, [pc, #192]	; (8004848 <TIM_Base_SetConfig+0xec>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0x38>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2f      	ldr	r2, [pc, #188]	; (800484c <TIM_Base_SetConfig+0xf0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a25      	ldr	r2, [pc, #148]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01b      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b4:	d017      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <TIM_Base_SetConfig+0xe8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <TIM_Base_SetConfig+0xec>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00f      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <TIM_Base_SetConfig+0xf0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <TIM_Base_SetConfig+0xf4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <TIM_Base_SetConfig+0xf8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_Base_SetConfig+0x8a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	; (8004858 <TIM_Base_SetConfig+0xfc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a08      	ldr	r2, [pc, #32]	; (8004840 <TIM_Base_SetConfig+0xe4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d103      	bne.n	800482c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	615a      	str	r2, [r3, #20]
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0303 	bic.w	r3, r3, #3
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0302 	bic.w	r3, r3, #2
 80048a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1c      	ldr	r2, [pc, #112]	; (8004924 <TIM_OC1_SetConfig+0xc8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10c      	bne.n	80048d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0308 	bic.w	r3, r3, #8
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a13      	ldr	r2, [pc, #76]	; (8004924 <TIM_OC1_SetConfig+0xc8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40010000 	.word	0x40010000

08004928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0320 	bic.w	r3, r3, #32
 8004972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <TIM_OC2_SetConfig+0xd4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10d      	bne.n	80049a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <TIM_OC2_SetConfig+0xd4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d113      	bne.n	80049d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000

08004a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <TIM_OC3_SetConfig+0xd0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10d      	bne.n	8004a7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <TIM_OC3_SetConfig+0xd0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d113      	bne.n	8004aaa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	621a      	str	r2, [r3, #32]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000

08004ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	021b      	lsls	r3, r3, #8
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	031b      	lsls	r3, r3, #12
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <TIM_OC4_SetConfig+0x9c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d109      	bne.n	8004b48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40010000 	.word	0x40010000

08004b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 030a 	bic.w	r3, r3, #10
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0210 	bic.w	r2, r3, #16
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f043 0307 	orr.w	r3, r3, #7
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	021a      	lsls	r2, r3, #8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	2201      	movs	r2, #1
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	401a      	ands	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1a      	ldr	r2, [r3, #32]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e050      	b.n	8004dae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d013      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10c      	bne.n	8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40014000 	.word	0x40014000

08004dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e03f      	b.n	8004e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd fc5c 	bl	80026b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 ff43 	bl	8005ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d165      	bne.n	8004f52 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Transmit_DMA+0x26>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e05e      	b.n	8004f54 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit_DMA+0x38>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e057      	b.n	8004f54 <HAL_UART_Transmit_DMA+0xe8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	; 0x21
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <HAL_UART_Transmit_DMA+0xf0>)
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed8:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_UART_Transmit_DMA+0xf4>)
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <HAL_UART_Transmit_DMA+0xf8>)
 8004ee2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee8:	2200      	movs	r2, #0
 8004eea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004eec:	f107 0308 	add.w	r3, r7, #8
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3304      	adds	r3, #4
 8004f00:	461a      	mov	r2, r3
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	f7fd ffbe 	bl	8002e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f10:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3314      	adds	r3, #20
 8004f20:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	617b      	str	r3, [r7, #20]
   return(result);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6a39      	ldr	r1, [r7, #32]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e5      	bne.n	8004f1a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e000      	b.n	8004f54 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
  }
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3730      	adds	r7, #48	; 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	08005539 	.word	0x08005539
 8004f60:	080055d3 	.word	0x080055d3
 8004f64:	0800574b 	.word	0x0800574b

08004f68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d11d      	bne.n	8004fbe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_Receive_DMA+0x26>
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e016      	b.n	8004fc0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Receive_DMA+0x38>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e00f      	b.n	8004fc0 <HAL_UART_Receive_DMA+0x58>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fc13 	bl	80057e0 <UART_Start_Receive_DMA>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	e000      	b.n	8004fc0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0ba      	sub	sp, #232	; 0xe8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd7f 	bl	8005b2a <UART_Receive_IT>
      return;
 800502c:	e256      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800502e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80de 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80d1 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 81ed 	beq.w	80054d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd0a 	bl	8005b2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_UART_IRQHandler+0x17a>
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04f      	beq.n	80051e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fc12 	bl	800596c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d141      	bne.n	80051da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800516c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800518e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1d9      	bne.n	8005156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	4a7d      	ldr	r2, [pc, #500]	; (80053a4 <HAL_UART_IRQHandler+0x3dc>)
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd ff2c 	bl	8003014 <HAL_DMA_Abort_IT>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051cc:	4610      	mov	r0, r2
 80051ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e00e      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f99a 	bl	800550c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e00a      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f996 	bl	800550c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e006      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f992 	bl	800550c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ee:	e170      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	bf00      	nop
    return;
 80051f2:	e16e      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 814a 	bne.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8143 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 813c 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	f040 80b4 	bne.w	80053a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800524c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8140 	beq.w	80054d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800525a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800525e:	429a      	cmp	r2, r3
 8005260:	f080 8139 	bcs.w	80054d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	f000 8088 	beq.w	800538a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1d9      	bne.n	800527a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e1      	bne.n	80052c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800532c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e3      	bne.n	8005302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800536c:	65ba      	str	r2, [r7, #88]	; 0x58
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e3      	bne.n	8005348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	4618      	mov	r0, r3
 8005386:	f7fd fdd5 	bl	8002f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8c0 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a0:	e099      	b.n	80054d6 <HAL_UART_IRQHandler+0x50e>
 80053a2:	bf00      	nop
 80053a4:	08005a33 	.word	0x08005a33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 808b 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8086 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053f2:	647a      	str	r2, [r7, #68]	; 0x44
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e3      	bne.n	80053ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	623b      	str	r3, [r7, #32]
   return(result);
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542a:	633a      	str	r2, [r7, #48]	; 0x30
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	60fb      	str	r3, [r7, #12]
   return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e3      	bne.n	800544c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f848 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005490:	e023      	b.n	80054da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fad5 	bl	8005a5a <UART_Transmit_IT>
    return;
 80054b0:	e014      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fb15 	bl	8005afa <UART_EndTransmit_IT>
    return;
 80054d0:	e004      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    return;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054da:	bf00      	nop
  }
}
 80054dc:	37e8      	adds	r7, #232	; 0xe8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b090      	sub	sp, #64	; 0x40
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d137      	bne.n	80055c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005556:	2200      	movs	r2, #0
 8005558:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	623b      	str	r3, [r7, #32]
   return(result);
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800557a:	633a      	str	r2, [r7, #48]	; 0x30
 800557c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800558e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	60fb      	str	r3, [r7, #12]
   return(result);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a4:	637b      	str	r3, [r7, #52]	; 0x34
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	69b9      	ldr	r1, [r7, #24]
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	617b      	str	r3, [r7, #20]
   return(result);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055c2:	e002      	b.n	80055ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80055c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80055c6:	f7fc f947 	bl	8001858 <HAL_UART_TxCpltCallback>
}
 80055ca:	bf00      	nop
 80055cc:	3740      	adds	r7, #64	; 0x40
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff7f 	bl	80054e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b09c      	sub	sp, #112	; 0x70
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005606:	2b00      	cmp	r3, #0
 8005608:	d172      	bne.n	80056f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800560a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560c:	2200      	movs	r2, #0
 800560e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005626:	66bb      	str	r3, [r7, #104]	; 0x68
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005630:	65ba      	str	r2, [r7, #88]	; 0x58
 8005632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	667b      	str	r3, [r7, #100]	; 0x64
 800565c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005664:	647a      	str	r2, [r7, #68]	; 0x44
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800566a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	623b      	str	r3, [r7, #32]
   return(result);
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	663b      	str	r3, [r7, #96]	; 0x60
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005698:	633a      	str	r2, [r7, #48]	; 0x30
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800569e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e5      	bne.n	8005678 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d119      	bne.n	80056f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056dc:	61fa      	str	r2, [r7, #28]
 80056de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	69b9      	ldr	r1, [r7, #24]
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	617b      	str	r3, [r7, #20]
   return(result);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d106      	bne.n	8005706 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056fc:	4619      	mov	r1, r3
 80056fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005700:	f7ff ff0e 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005704:	e002      	b.n	800570c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005706:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005708:	f7fc f8b8 	bl	800187c <HAL_UART_RxCpltCallback>
}
 800570c:	bf00      	nop
 800570e:	3770      	adds	r7, #112	; 0x70
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	b29b      	uxth	r3, r3
 8005732:	4619      	mov	r1, r3
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff fef3 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800573a:	e002      	b.n	8005742 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fedb 	bl	80054f8 <HAL_UART_RxHalfCpltCallback>
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b21      	cmp	r3, #33	; 0x21
 800577c:	d108      	bne.n	8005790 <UART_DMAError+0x46>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800578a:	68b8      	ldr	r0, [r7, #8]
 800578c:	f000 f8c6 	bl	800591c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b22      	cmp	r3, #34	; 0x22
 80057b0:	d108      	bne.n	80057c4 <UART_DMAError+0x7a>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80057be:	68b8      	ldr	r0, [r7, #8]
 80057c0:	f000 f8d4 	bl	800596c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	f043 0210 	orr.w	r2, r3, #16
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d0:	68b8      	ldr	r0, [r7, #8]
 80057d2:	f7ff fe9b 	bl	800550c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b098      	sub	sp, #96	; 0x60
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	; 0x22
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	4a40      	ldr	r2, [pc, #256]	; (8005910 <UART_Start_Receive_DMA+0x130>)
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	4a3f      	ldr	r2, [pc, #252]	; (8005914 <UART_Start_Receive_DMA+0x134>)
 8005816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	4a3e      	ldr	r2, [pc, #248]	; (8005918 <UART_Start_Receive_DMA+0x138>)
 800581e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	2200      	movs	r2, #0
 8005826:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	f7fd fb20 	bl	8002e84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d019      	beq.n	800589e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	330c      	adds	r3, #12
 8005870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800587a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	65bb      	str	r3, [r7, #88]	; 0x58
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800588a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800588c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e5      	bne.n	800586a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3314      	adds	r3, #20
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	657b      	str	r3, [r7, #84]	; 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3314      	adds	r3, #20
 80058bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058be:	63ba      	str	r2, [r7, #56]	; 0x38
 80058c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e5      	bne.n	800589e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	617b      	str	r3, [r7, #20]
   return(result);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058e8:	653b      	str	r3, [r7, #80]	; 0x50
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3314      	adds	r3, #20
 80058f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058f2:	627a      	str	r2, [r7, #36]	; 0x24
 80058f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6a39      	ldr	r1, [r7, #32]
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3760      	adds	r7, #96	; 0x60
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	080055ef 	.word	0x080055ef
 8005914:	08005715 	.word	0x08005715
 8005918:	0800574b 	.word	0x0800574b

0800591c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	60bb      	str	r3, [r7, #8]
   return(result);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	61ba      	str	r2, [r7, #24]
 8005946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	613b      	str	r3, [r7, #16]
   return(result);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005960:	bf00      	nop
 8005962:	3724      	adds	r7, #36	; 0x24
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b095      	sub	sp, #84	; 0x54
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005994:	643a      	str	r2, [r7, #64]	; 0x40
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800599a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e5      	bne.n	8005974 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3314      	adds	r3, #20
 80059ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d119      	bne.n	8005a18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	f023 0310 	bic.w	r3, r3, #16
 80059fa:	647b      	str	r3, [r7, #68]	; 0x44
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a04:	61ba      	str	r2, [r7, #24]
 8005a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	613b      	str	r3, [r7, #16]
   return(result);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e5      	bne.n	80059e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a26:	bf00      	nop
 8005a28:	3754      	adds	r7, #84	; 0x54
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff fd5d 	bl	800550c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b21      	cmp	r3, #33	; 0x21
 8005a6c:	d13e      	bne.n	8005aec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a76:	d114      	bne.n	8005aa2 <UART_Transmit_IT+0x48>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d110      	bne.n	8005aa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	1c9a      	adds	r2, r3, #2
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]
 8005aa0:	e008      	b.n	8005ab4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6211      	str	r1, [r2, #32]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10f      	bne.n	8005ae8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
  }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fb fe9c 	bl	8001858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b08c      	sub	sp, #48	; 0x30
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b22      	cmp	r3, #34	; 0x22
 8005b3c:	f040 80ab 	bne.w	8005c96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b48:	d117      	bne.n	8005b7a <UART_Receive_IT+0x50>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d113      	bne.n	8005b7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28
 8005b78:	e026      	b.n	8005bc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d007      	beq.n	8005b9e <UART_Receive_IT+0x74>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <UART_Receive_IT+0x82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	e008      	b.n	8005bbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d15a      	bne.n	8005c92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0220 	bic.w	r2, r2, #32
 8005bea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d135      	bne.n	8005c88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	613b      	str	r3, [r7, #16]
   return(result);
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f023 0310 	bic.w	r3, r3, #16
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c42:	623a      	str	r2, [r7, #32]
 8005c44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	69f9      	ldr	r1, [r7, #28]
 8005c48:	6a3a      	ldr	r2, [r7, #32]
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e5      	bne.n	8005c22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d10a      	bne.n	8005c7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fc4d 	bl	8005520 <HAL_UARTEx_RxEventCallback>
 8005c86:	e002      	b.n	8005c8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7fb fdf7 	bl	800187c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e002      	b.n	8005c98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3730      	adds	r7, #48	; 0x30
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca4:	b0c0      	sub	sp, #256	; 0x100
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbc:	68d9      	ldr	r1, [r3, #12]
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	ea40 0301 	orr.w	r3, r0, r1
 8005cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cf8:	f021 010c 	bic.w	r1, r1, #12
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d06:	430b      	orrs	r3, r1
 8005d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1a:	6999      	ldr	r1, [r3, #24]
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	ea40 0301 	orr.w	r3, r0, r1
 8005d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b8f      	ldr	r3, [pc, #572]	; (8005f6c <UART_SetConfig+0x2cc>)
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d005      	beq.n	8005d40 <UART_SetConfig+0xa0>
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <UART_SetConfig+0x2d0>)
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d104      	bne.n	8005d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fe fa16 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 8005d44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d48:	e003      	b.n	8005d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d4a:	f7fe f9fd 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8005d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d5c:	f040 810c 	bne.w	8005f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d82:	4621      	mov	r1, r4
 8005d84:	eb12 0801 	adds.w	r8, r2, r1
 8005d88:	4629      	mov	r1, r5
 8005d8a:	eb43 0901 	adc.w	r9, r3, r1
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005da2:	4690      	mov	r8, r2
 8005da4:	4699      	mov	r9, r3
 8005da6:	4623      	mov	r3, r4
 8005da8:	eb18 0303 	adds.w	r3, r8, r3
 8005dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db0:	462b      	mov	r3, r5
 8005db2:	eb49 0303 	adc.w	r3, r9, r3
 8005db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dce:	460b      	mov	r3, r1
 8005dd0:	18db      	adds	r3, r3, r3
 8005dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	eb42 0303 	adc.w	r3, r2, r3
 8005dda:	657b      	str	r3, [r7, #84]	; 0x54
 8005ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005de4:	f7fa f9fe 	bl	80001e4 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4b61      	ldr	r3, [pc, #388]	; (8005f74 <UART_SetConfig+0x2d4>)
 8005dee:	fba3 2302 	umull	r2, r3, r3, r2
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	011c      	lsls	r4, r3, #4
 8005df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e10:	415b      	adcs	r3, r3
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e18:	4641      	mov	r1, r8
 8005e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e1e:	4649      	mov	r1, r9
 8005e20:	eb43 0b01 	adc.w	fp, r3, r1
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e38:	4692      	mov	sl, r2
 8005e3a:	469b      	mov	fp, r3
 8005e3c:	4643      	mov	r3, r8
 8005e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e46:	464b      	mov	r3, r9
 8005e48:	eb4b 0303 	adc.w	r3, fp, r3
 8005e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e64:	460b      	mov	r3, r1
 8005e66:	18db      	adds	r3, r3, r3
 8005e68:	643b      	str	r3, [r7, #64]	; 0x40
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	eb42 0303 	adc.w	r3, r2, r3
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
 8005e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e7a:	f7fa f9b3 	bl	80001e4 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <UART_SetConfig+0x2d4>)
 8005e86:	fba3 2301 	umull	r2, r3, r3, r1
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2264      	movs	r2, #100	; 0x64
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	1acb      	subs	r3, r1, r3
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e9a:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <UART_SetConfig+0x2d4>)
 8005e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ea8:	441c      	add	r4, r3
 8005eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	1891      	adds	r1, r2, r2
 8005ec2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ec4:	415b      	adcs	r3, r3
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ecc:	4641      	mov	r1, r8
 8005ece:	1851      	adds	r1, r2, r1
 8005ed0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	414b      	adcs	r3, r1
 8005ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	00cb      	lsls	r3, r1, #3
 8005ee8:	4651      	mov	r1, sl
 8005eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eee:	4651      	mov	r1, sl
 8005ef0:	00ca      	lsls	r2, r1, #3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f00:	464b      	mov	r3, r9
 8005f02:	460a      	mov	r2, r1
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f20:	460b      	mov	r3, r1
 8005f22:	18db      	adds	r3, r3, r3
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	4613      	mov	r3, r2
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f36:	f7fa f955 	bl	80001e4 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <UART_SetConfig+0x2d4>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2164      	movs	r1, #100	; 0x64
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	3332      	adds	r3, #50	; 0x32
 8005f52:	4a08      	ldr	r2, [pc, #32]	; (8005f74 <UART_SetConfig+0x2d4>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 0207 	and.w	r2, r3, #7
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4422      	add	r2, r4
 8005f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f68:	e105      	b.n	8006176 <UART_SetConfig+0x4d6>
 8005f6a:	bf00      	nop
 8005f6c:	40011000 	.word	0x40011000
 8005f70:	40011400 	.word	0x40011400
 8005f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	1891      	adds	r1, r2, r2
 8005f90:	6239      	str	r1, [r7, #32]
 8005f92:	415b      	adcs	r3, r3
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	eb43 0501 	adc.w	r5, r3, r1
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	00eb      	lsls	r3, r5, #3
 8005fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb2:	00e2      	lsls	r2, r4, #3
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	4643      	mov	r3, r8
 8005fba:	18e3      	adds	r3, r4, r3
 8005fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	eb45 0303 	adc.w	r3, r5, r3
 8005fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	008b      	lsls	r3, r1, #2
 8005fea:	4621      	mov	r1, r4
 8005fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	008a      	lsls	r2, r1, #2
 8005ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ff8:	f7fa f8f4 	bl	80001e4 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b60      	ldr	r3, [pc, #384]	; (8006184 <UART_SetConfig+0x4e4>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011c      	lsls	r4, r3, #4
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006014:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	61b9      	str	r1, [r7, #24]
 8006024:	415b      	adcs	r3, r3
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6139      	str	r1, [r7, #16]
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	67bb      	str	r3, [r7, #120]	; 0x78
 8006076:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006084:	4649      	mov	r1, r9
 8006086:	008b      	lsls	r3, r1, #2
 8006088:	4641      	mov	r1, r8
 800608a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608e:	4641      	mov	r1, r8
 8006090:	008a      	lsls	r2, r1, #2
 8006092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006096:	f7fa f8a5 	bl	80001e4 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b39      	ldr	r3, [pc, #228]	; (8006184 <UART_SetConfig+0x4e4>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	; 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	3332      	adds	r3, #50	; 0x32
 80060b2:	4a34      	ldr	r2, [pc, #208]	; (8006184 <UART_SetConfig+0x4e4>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060be:	441c      	add	r4, r3
 80060c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c4:	2200      	movs	r2, #0
 80060c6:	673b      	str	r3, [r7, #112]	; 0x70
 80060c8:	677a      	str	r2, [r7, #116]	; 0x74
 80060ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060ce:	4642      	mov	r2, r8
 80060d0:	464b      	mov	r3, r9
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060de:	4641      	mov	r1, r8
 80060e0:	1851      	adds	r1, r2, r1
 80060e2:	6039      	str	r1, [r7, #0]
 80060e4:	4649      	mov	r1, r9
 80060e6:	414b      	adcs	r3, r1
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060f6:	4659      	mov	r1, fp
 80060f8:	00cb      	lsls	r3, r1, #3
 80060fa:	4651      	mov	r1, sl
 80060fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006100:	4651      	mov	r1, sl
 8006102:	00ca      	lsls	r2, r1, #3
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	4603      	mov	r3, r0
 800610a:	4642      	mov	r2, r8
 800610c:	189b      	adds	r3, r3, r2
 800610e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006110:	464b      	mov	r3, r9
 8006112:	460a      	mov	r2, r1
 8006114:	eb42 0303 	adc.w	r3, r2, r3
 8006118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	663b      	str	r3, [r7, #96]	; 0x60
 8006124:	667a      	str	r2, [r7, #100]	; 0x64
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006132:	4649      	mov	r1, r9
 8006134:	008b      	lsls	r3, r1, #2
 8006136:	4641      	mov	r1, r8
 8006138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800613c:	4641      	mov	r1, r8
 800613e:	008a      	lsls	r2, r1, #2
 8006140:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006144:	f7fa f84e 	bl	80001e4 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4b0d      	ldr	r3, [pc, #52]	; (8006184 <UART_SetConfig+0x4e4>)
 800614e:	fba3 1302 	umull	r1, r3, r3, r2
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	2164      	movs	r1, #100	; 0x64
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	3332      	adds	r3, #50	; 0x32
 8006160:	4a08      	ldr	r2, [pc, #32]	; (8006184 <UART_SetConfig+0x4e4>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	f003 020f 	and.w	r2, r3, #15
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4422      	add	r2, r4
 8006174:	609a      	str	r2, [r3, #8]
}
 8006176:	bf00      	nop
 8006178:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800617c:	46bd      	mov	sp, r7
 800617e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006182:	bf00      	nop
 8006184:	51eb851f 	.word	0x51eb851f

08006188 <__cxa_pure_virtual>:
 8006188:	b508      	push	{r3, lr}
 800618a:	f000 f80d 	bl	80061a8 <_ZSt9terminatev>

0800618e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800618e:	b508      	push	{r3, lr}
 8006190:	4780      	blx	r0
 8006192:	f000 f80e 	bl	80061b2 <abort>
	...

08006198 <_ZSt13get_terminatev>:
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <_ZSt13get_terminatev+0xc>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	f3bf 8f5b 	dmb	ish
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c

080061a8 <_ZSt9terminatev>:
 80061a8:	b508      	push	{r3, lr}
 80061aa:	f7ff fff5 	bl	8006198 <_ZSt13get_terminatev>
 80061ae:	f7ff ffee 	bl	800618e <_ZN10__cxxabiv111__terminateEPFvvE>

080061b2 <abort>:
 80061b2:	b508      	push	{r3, lr}
 80061b4:	2006      	movs	r0, #6
 80061b6:	f000 f873 	bl	80062a0 <raise>
 80061ba:	2001      	movs	r0, #1
 80061bc:	f7fc fb90 	bl	80028e0 <_exit>

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000010 	.word	0x20000010

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4d0d      	ldr	r5, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2600      	movs	r6, #0
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4d0b      	ldr	r5, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f000 f9b0 	bl	8006544 <_init>
 80061e4:	1b64      	subs	r4, r4, r5
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2600      	movs	r6, #0
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	080067ec 	.word	0x080067ec
 8006208:	080067ec 	.word	0x080067ec
 800620c:	080067ec 	.word	0x080067ec
 8006210:	080067f4 	.word	0x080067f4

08006214 <memcpy>:
 8006214:	440a      	add	r2, r1
 8006216:	4291      	cmp	r1, r2
 8006218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800621c:	d100      	bne.n	8006220 <memcpy+0xc>
 800621e:	4770      	bx	lr
 8006220:	b510      	push	{r4, lr}
 8006222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800622a:	4291      	cmp	r1, r2
 800622c:	d1f9      	bne.n	8006222 <memcpy+0xe>
 800622e:	bd10      	pop	{r4, pc}

08006230 <memset>:
 8006230:	4402      	add	r2, r0
 8006232:	4603      	mov	r3, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <realloc>:
 8006240:	4b02      	ldr	r3, [pc, #8]	; (800624c <realloc+0xc>)
 8006242:	460a      	mov	r2, r1
 8006244:	4601      	mov	r1, r0
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	f000 b8da 	b.w	8006400 <_realloc_r>
 800624c:	20000010 	.word	0x20000010

08006250 <_raise_r>:
 8006250:	291f      	cmp	r1, #31
 8006252:	b538      	push	{r3, r4, r5, lr}
 8006254:	4604      	mov	r4, r0
 8006256:	460d      	mov	r5, r1
 8006258:	d904      	bls.n	8006264 <_raise_r+0x14>
 800625a:	2316      	movs	r3, #22
 800625c:	6003      	str	r3, [r0, #0]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006266:	b112      	cbz	r2, 800626e <_raise_r+0x1e>
 8006268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800626c:	b94b      	cbnz	r3, 8006282 <_raise_r+0x32>
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f830 	bl	80062d4 <_getpid_r>
 8006274:	462a      	mov	r2, r5
 8006276:	4601      	mov	r1, r0
 8006278:	4620      	mov	r0, r4
 800627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800627e:	f000 b817 	b.w	80062b0 <_kill_r>
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00a      	beq.n	800629c <_raise_r+0x4c>
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	d103      	bne.n	8006292 <_raise_r+0x42>
 800628a:	2316      	movs	r3, #22
 800628c:	6003      	str	r3, [r0, #0]
 800628e:	2001      	movs	r0, #1
 8006290:	e7e7      	b.n	8006262 <_raise_r+0x12>
 8006292:	2400      	movs	r4, #0
 8006294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006298:	4628      	mov	r0, r5
 800629a:	4798      	blx	r3
 800629c:	2000      	movs	r0, #0
 800629e:	e7e0      	b.n	8006262 <_raise_r+0x12>

080062a0 <raise>:
 80062a0:	4b02      	ldr	r3, [pc, #8]	; (80062ac <raise+0xc>)
 80062a2:	4601      	mov	r1, r0
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	f7ff bfd3 	b.w	8006250 <_raise_r>
 80062aa:	bf00      	nop
 80062ac:	20000010 	.word	0x20000010

080062b0 <_kill_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4d07      	ldr	r5, [pc, #28]	; (80062d0 <_kill_r+0x20>)
 80062b4:	2300      	movs	r3, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	f7fc faff 	bl	80028c0 <_kill>
 80062c2:	1c43      	adds	r3, r0, #1
 80062c4:	d102      	bne.n	80062cc <_kill_r+0x1c>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	b103      	cbz	r3, 80062cc <_kill_r+0x1c>
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	bd38      	pop	{r3, r4, r5, pc}
 80062ce:	bf00      	nop
 80062d0:	20000b9c 	.word	0x20000b9c

080062d4 <_getpid_r>:
 80062d4:	f7fc baec 	b.w	80028b0 <_getpid>

080062d8 <sbrk_aligned>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4e0e      	ldr	r6, [pc, #56]	; (8006314 <sbrk_aligned+0x3c>)
 80062dc:	460c      	mov	r4, r1
 80062de:	6831      	ldr	r1, [r6, #0]
 80062e0:	4605      	mov	r5, r0
 80062e2:	b911      	cbnz	r1, 80062ea <sbrk_aligned+0x12>
 80062e4:	f000 f8bc 	bl	8006460 <_sbrk_r>
 80062e8:	6030      	str	r0, [r6, #0]
 80062ea:	4621      	mov	r1, r4
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 f8b7 	bl	8006460 <_sbrk_r>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	d00a      	beq.n	800630c <sbrk_aligned+0x34>
 80062f6:	1cc4      	adds	r4, r0, #3
 80062f8:	f024 0403 	bic.w	r4, r4, #3
 80062fc:	42a0      	cmp	r0, r4
 80062fe:	d007      	beq.n	8006310 <sbrk_aligned+0x38>
 8006300:	1a21      	subs	r1, r4, r0
 8006302:	4628      	mov	r0, r5
 8006304:	f000 f8ac 	bl	8006460 <_sbrk_r>
 8006308:	3001      	adds	r0, #1
 800630a:	d101      	bne.n	8006310 <sbrk_aligned+0x38>
 800630c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006310:	4620      	mov	r0, r4
 8006312:	bd70      	pop	{r4, r5, r6, pc}
 8006314:	20000b98 	.word	0x20000b98

08006318 <_malloc_r>:
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	1ccd      	adds	r5, r1, #3
 800631e:	f025 0503 	bic.w	r5, r5, #3
 8006322:	3508      	adds	r5, #8
 8006324:	2d0c      	cmp	r5, #12
 8006326:	bf38      	it	cc
 8006328:	250c      	movcc	r5, #12
 800632a:	2d00      	cmp	r5, #0
 800632c:	4607      	mov	r7, r0
 800632e:	db01      	blt.n	8006334 <_malloc_r+0x1c>
 8006330:	42a9      	cmp	r1, r5
 8006332:	d905      	bls.n	8006340 <_malloc_r+0x28>
 8006334:	230c      	movs	r3, #12
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	2600      	movs	r6, #0
 800633a:	4630      	mov	r0, r6
 800633c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006340:	4e2e      	ldr	r6, [pc, #184]	; (80063fc <_malloc_r+0xe4>)
 8006342:	f000 f89d 	bl	8006480 <__malloc_lock>
 8006346:	6833      	ldr	r3, [r6, #0]
 8006348:	461c      	mov	r4, r3
 800634a:	bb34      	cbnz	r4, 800639a <_malloc_r+0x82>
 800634c:	4629      	mov	r1, r5
 800634e:	4638      	mov	r0, r7
 8006350:	f7ff ffc2 	bl	80062d8 <sbrk_aligned>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	4604      	mov	r4, r0
 8006358:	d14d      	bne.n	80063f6 <_malloc_r+0xde>
 800635a:	6834      	ldr	r4, [r6, #0]
 800635c:	4626      	mov	r6, r4
 800635e:	2e00      	cmp	r6, #0
 8006360:	d140      	bne.n	80063e4 <_malloc_r+0xcc>
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4631      	mov	r1, r6
 8006366:	4638      	mov	r0, r7
 8006368:	eb04 0803 	add.w	r8, r4, r3
 800636c:	f000 f878 	bl	8006460 <_sbrk_r>
 8006370:	4580      	cmp	r8, r0
 8006372:	d13a      	bne.n	80063ea <_malloc_r+0xd2>
 8006374:	6821      	ldr	r1, [r4, #0]
 8006376:	3503      	adds	r5, #3
 8006378:	1a6d      	subs	r5, r5, r1
 800637a:	f025 0503 	bic.w	r5, r5, #3
 800637e:	3508      	adds	r5, #8
 8006380:	2d0c      	cmp	r5, #12
 8006382:	bf38      	it	cc
 8006384:	250c      	movcc	r5, #12
 8006386:	4629      	mov	r1, r5
 8006388:	4638      	mov	r0, r7
 800638a:	f7ff ffa5 	bl	80062d8 <sbrk_aligned>
 800638e:	3001      	adds	r0, #1
 8006390:	d02b      	beq.n	80063ea <_malloc_r+0xd2>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	442b      	add	r3, r5
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	e00e      	b.n	80063b8 <_malloc_r+0xa0>
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	1b52      	subs	r2, r2, r5
 800639e:	d41e      	bmi.n	80063de <_malloc_r+0xc6>
 80063a0:	2a0b      	cmp	r2, #11
 80063a2:	d916      	bls.n	80063d2 <_malloc_r+0xba>
 80063a4:	1961      	adds	r1, r4, r5
 80063a6:	42a3      	cmp	r3, r4
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	bf18      	it	ne
 80063ac:	6059      	strne	r1, [r3, #4]
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	bf08      	it	eq
 80063b2:	6031      	streq	r1, [r6, #0]
 80063b4:	5162      	str	r2, [r4, r5]
 80063b6:	604b      	str	r3, [r1, #4]
 80063b8:	4638      	mov	r0, r7
 80063ba:	f104 060b 	add.w	r6, r4, #11
 80063be:	f000 f865 	bl	800648c <__malloc_unlock>
 80063c2:	f026 0607 	bic.w	r6, r6, #7
 80063c6:	1d23      	adds	r3, r4, #4
 80063c8:	1af2      	subs	r2, r6, r3
 80063ca:	d0b6      	beq.n	800633a <_malloc_r+0x22>
 80063cc:	1b9b      	subs	r3, r3, r6
 80063ce:	50a3      	str	r3, [r4, r2]
 80063d0:	e7b3      	b.n	800633a <_malloc_r+0x22>
 80063d2:	6862      	ldr	r2, [r4, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	bf0c      	ite	eq
 80063d8:	6032      	streq	r2, [r6, #0]
 80063da:	605a      	strne	r2, [r3, #4]
 80063dc:	e7ec      	b.n	80063b8 <_malloc_r+0xa0>
 80063de:	4623      	mov	r3, r4
 80063e0:	6864      	ldr	r4, [r4, #4]
 80063e2:	e7b2      	b.n	800634a <_malloc_r+0x32>
 80063e4:	4634      	mov	r4, r6
 80063e6:	6876      	ldr	r6, [r6, #4]
 80063e8:	e7b9      	b.n	800635e <_malloc_r+0x46>
 80063ea:	230c      	movs	r3, #12
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4638      	mov	r0, r7
 80063f0:	f000 f84c 	bl	800648c <__malloc_unlock>
 80063f4:	e7a1      	b.n	800633a <_malloc_r+0x22>
 80063f6:	6025      	str	r5, [r4, #0]
 80063f8:	e7de      	b.n	80063b8 <_malloc_r+0xa0>
 80063fa:	bf00      	nop
 80063fc:	20000b94 	.word	0x20000b94

08006400 <_realloc_r>:
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	4680      	mov	r8, r0
 8006406:	4614      	mov	r4, r2
 8006408:	460e      	mov	r6, r1
 800640a:	b921      	cbnz	r1, 8006416 <_realloc_r+0x16>
 800640c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	4611      	mov	r1, r2
 8006412:	f7ff bf81 	b.w	8006318 <_malloc_r>
 8006416:	b92a      	cbnz	r2, 8006424 <_realloc_r+0x24>
 8006418:	f000 f83e 	bl	8006498 <_free_r>
 800641c:	4625      	mov	r5, r4
 800641e:	4628      	mov	r0, r5
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006424:	f000 f884 	bl	8006530 <_malloc_usable_size_r>
 8006428:	4284      	cmp	r4, r0
 800642a:	4607      	mov	r7, r0
 800642c:	d802      	bhi.n	8006434 <_realloc_r+0x34>
 800642e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006432:	d812      	bhi.n	800645a <_realloc_r+0x5a>
 8006434:	4621      	mov	r1, r4
 8006436:	4640      	mov	r0, r8
 8006438:	f7ff ff6e 	bl	8006318 <_malloc_r>
 800643c:	4605      	mov	r5, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	d0ed      	beq.n	800641e <_realloc_r+0x1e>
 8006442:	42bc      	cmp	r4, r7
 8006444:	4622      	mov	r2, r4
 8006446:	4631      	mov	r1, r6
 8006448:	bf28      	it	cs
 800644a:	463a      	movcs	r2, r7
 800644c:	f7ff fee2 	bl	8006214 <memcpy>
 8006450:	4631      	mov	r1, r6
 8006452:	4640      	mov	r0, r8
 8006454:	f000 f820 	bl	8006498 <_free_r>
 8006458:	e7e1      	b.n	800641e <_realloc_r+0x1e>
 800645a:	4635      	mov	r5, r6
 800645c:	e7df      	b.n	800641e <_realloc_r+0x1e>
	...

08006460 <_sbrk_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_sbrk_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fc fa42 	bl	80028f4 <_sbrk>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_sbrk_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_sbrk_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20000b9c 	.word	0x20000b9c

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	; (8006488 <__malloc_lock+0x8>)
 8006482:	f000 b85d 	b.w	8006540 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	20000ba0 	.word	0x20000ba0

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	; (8006494 <__malloc_unlock+0x8>)
 800648e:	f000 b858 	b.w	8006542 <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	20000ba0 	.word	0x20000ba0

08006498 <_free_r>:
 8006498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800649a:	2900      	cmp	r1, #0
 800649c:	d044      	beq.n	8006528 <_free_r+0x90>
 800649e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064a2:	9001      	str	r0, [sp, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f1a1 0404 	sub.w	r4, r1, #4
 80064aa:	bfb8      	it	lt
 80064ac:	18e4      	addlt	r4, r4, r3
 80064ae:	f7ff ffe7 	bl	8006480 <__malloc_lock>
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <_free_r+0x94>)
 80064b4:	9801      	ldr	r0, [sp, #4]
 80064b6:	6813      	ldr	r3, [r2, #0]
 80064b8:	b933      	cbnz	r3, 80064c8 <_free_r+0x30>
 80064ba:	6063      	str	r3, [r4, #4]
 80064bc:	6014      	str	r4, [r2, #0]
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064c4:	f7ff bfe2 	b.w	800648c <__malloc_unlock>
 80064c8:	42a3      	cmp	r3, r4
 80064ca:	d908      	bls.n	80064de <_free_r+0x46>
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	1961      	adds	r1, r4, r5
 80064d0:	428b      	cmp	r3, r1
 80064d2:	bf01      	itttt	eq
 80064d4:	6819      	ldreq	r1, [r3, #0]
 80064d6:	685b      	ldreq	r3, [r3, #4]
 80064d8:	1949      	addeq	r1, r1, r5
 80064da:	6021      	streq	r1, [r4, #0]
 80064dc:	e7ed      	b.n	80064ba <_free_r+0x22>
 80064de:	461a      	mov	r2, r3
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b10b      	cbz	r3, 80064e8 <_free_r+0x50>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d9fa      	bls.n	80064de <_free_r+0x46>
 80064e8:	6811      	ldr	r1, [r2, #0]
 80064ea:	1855      	adds	r5, r2, r1
 80064ec:	42a5      	cmp	r5, r4
 80064ee:	d10b      	bne.n	8006508 <_free_r+0x70>
 80064f0:	6824      	ldr	r4, [r4, #0]
 80064f2:	4421      	add	r1, r4
 80064f4:	1854      	adds	r4, r2, r1
 80064f6:	42a3      	cmp	r3, r4
 80064f8:	6011      	str	r1, [r2, #0]
 80064fa:	d1e0      	bne.n	80064be <_free_r+0x26>
 80064fc:	681c      	ldr	r4, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	6053      	str	r3, [r2, #4]
 8006502:	4421      	add	r1, r4
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	e7da      	b.n	80064be <_free_r+0x26>
 8006508:	d902      	bls.n	8006510 <_free_r+0x78>
 800650a:	230c      	movs	r3, #12
 800650c:	6003      	str	r3, [r0, #0]
 800650e:	e7d6      	b.n	80064be <_free_r+0x26>
 8006510:	6825      	ldr	r5, [r4, #0]
 8006512:	1961      	adds	r1, r4, r5
 8006514:	428b      	cmp	r3, r1
 8006516:	bf04      	itt	eq
 8006518:	6819      	ldreq	r1, [r3, #0]
 800651a:	685b      	ldreq	r3, [r3, #4]
 800651c:	6063      	str	r3, [r4, #4]
 800651e:	bf04      	itt	eq
 8006520:	1949      	addeq	r1, r1, r5
 8006522:	6021      	streq	r1, [r4, #0]
 8006524:	6054      	str	r4, [r2, #4]
 8006526:	e7ca      	b.n	80064be <_free_r+0x26>
 8006528:	b003      	add	sp, #12
 800652a:	bd30      	pop	{r4, r5, pc}
 800652c:	20000b94 	.word	0x20000b94

08006530 <_malloc_usable_size_r>:
 8006530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006534:	1f18      	subs	r0, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	bfbc      	itt	lt
 800653a:	580b      	ldrlt	r3, [r1, r0]
 800653c:	18c0      	addlt	r0, r0, r3
 800653e:	4770      	bx	lr

08006540 <__retarget_lock_acquire_recursive>:
 8006540:	4770      	bx	lr

08006542 <__retarget_lock_release_recursive>:
 8006542:	4770      	bx	lr

08006544 <_init>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr

08006550 <_fini>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr
