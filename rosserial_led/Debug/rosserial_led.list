
rosserial_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006af8  08006af8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b00  08006b00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000074  08006b80  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  08006b80  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000297d  00000000  00000000  00035676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181e9  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c13  00000000  00000000  00051fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000948ae  00000000  00000000  00062bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  000f74d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006858 	.word	0x08006858

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08006858 	.word	0x08006858

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	0a5a      	lsrs	r2, r3, #9
 80004f8:	490f      	ldr	r1, [pc, #60]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80004fa:	fba1 1202 	umull	r1, r2, r1, r2
 80004fe:	09d2      	lsrs	r2, r2, #7
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000502:	fb01 f202 	mul.w	r2, r1, r2
 8000506:	1a9b      	subs	r3, r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a5b      	lsrs	r3, r3, #9
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	09db      	lsrs	r3, r3, #7
 8000518:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	441a      	add	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	00044b83 	.word	0x00044b83
 800053c:	3b9aca00 	.word	0x3b9aca00

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f002 fb66 	bl	8002c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f810 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f9de 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000550:	f000 f9b4 	bl	80008bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000554:	f000 f988 	bl	8000868 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000558:	f000 f874 	bl	8000644 <MX_TIM1_Init>
  MX_TIM2_Init();
 800055c:	f000 f936 	bl	80007cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000560:	f001 fa48 	bl	80019f4 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000564:	f001 fa8e 	bl	8001a84 <loop>
  {
 8000568:	e7fc      	b.n	8000564 <main+0x24>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f005 ffe2 	bl	8006544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b29      	ldr	r3, [pc, #164]	; (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	; (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b8:	4a21      	ldr	r2, [pc, #132]	; (8000640 <SystemClock_Config+0xd4>)
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d4:	2310      	movs	r3, #16
 80005d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e0:	2310      	movs	r3, #16
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fa6e 	bl	8003ad8 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 f9f1 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fcd0 	bl	8003fc8 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 f9db 	bl	80009e8 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	; 0x58
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]
 8000674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2220      	movs	r2, #32
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 ff61 	bl	8006544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000682:	4b50      	ldr	r3, [pc, #320]	; (80007c4 <MX_TIM1_Init+0x180>)
 8000684:	4a50      	ldr	r2, [pc, #320]	; (80007c8 <MX_TIM1_Init+0x184>)
 8000686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000688:	4b4e      	ldr	r3, [pc, #312]	; (80007c4 <MX_TIM1_Init+0x180>)
 800068a:	2253      	movs	r2, #83	; 0x53
 800068c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <MX_TIM1_Init+0x180>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000694:	4b4b      	ldr	r3, [pc, #300]	; (80007c4 <MX_TIM1_Init+0x180>)
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <MX_TIM1_Init+0x180>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a0:	4b48      	ldr	r3, [pc, #288]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ac:	4845      	ldr	r0, [pc, #276]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006ae:	f003 feab 	bl	8004408 <HAL_TIM_Base_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006b8:	f000 f996 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c6:	4619      	mov	r1, r3
 80006c8:	483e      	ldr	r0, [pc, #248]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006ca:	f004 f8b7 	bl	800483c <HAL_TIM_ConfigClockSource>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006d4:	f000 f988 	bl	80009e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006d8:	483a      	ldr	r0, [pc, #232]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006da:	f003 fee4 	bl	80044a6 <HAL_TIM_PWM_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80006e4:	f000 f980 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f4:	4619      	mov	r1, r3
 80006f6:	4833      	ldr	r0, [pc, #204]	; (80007c4 <MX_TIM1_Init+0x180>)
 80006f8:	f004 fc34 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000702:	f000 f971 	bl	80009e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000706:	2360      	movs	r3, #96	; 0x60
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070e:	2300      	movs	r3, #0
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000712:	2300      	movs	r3, #0
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	2200      	movs	r2, #0
 8000728:	4619      	mov	r1, r3
 800072a:	4826      	ldr	r0, [pc, #152]	; (80007c4 <MX_TIM1_Init+0x180>)
 800072c:	f003 ffc4 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000736:	f000 f957 	bl	80009e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	2204      	movs	r2, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <MX_TIM1_Init+0x180>)
 8000744:	f003 ffb8 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800074e:	f000 f94b 	bl	80009e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000756:	2208      	movs	r2, #8
 8000758:	4619      	mov	r1, r3
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <MX_TIM1_Init+0x180>)
 800075c:	f003 ffac 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000766:	f000 f93f 	bl	80009e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	220c      	movs	r2, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM1_Init+0x180>)
 8000774:	f003 ffa0 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800077e:	f000 f933 	bl	80009e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0x180>)
 80007a6:	f004 fc4b 	bl	8005040 <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 80007b0:	f000 f91a 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0x180>)
 80007b6:	f002 f863 	bl	8002880 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3758      	adds	r7, #88	; 0x58
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000090 	.word	0x20000090
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <MX_TIM2_Init+0x98>)
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64000-1;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_TIM2_Init+0x98>)
 80007f2:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80007f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM2_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_TIM2_Init+0x98>)
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_TIM2_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_TIM2_Init+0x98>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <MX_TIM2_Init+0x98>)
 8000814:	f003 fdf8 	bl	8004408 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800081e:	f000 f8e3 	bl	80009e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_TIM2_Init+0x98>)
 8000830:	f004 f804 	bl	800483c <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800083a:	f000 f8d5 	bl	80009e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_TIM2_Init+0x98>)
 800084c:	f004 fb8a 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000856:	f000 f8c7 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000d8 	.word	0x200000d8

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f004 fc20 	bl	80050e4 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f89d 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000120 	.word	0x20000120
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_DMA_Init+0x4c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <MX_DMA_Init+0x4c>)
 80008cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_DMA_Init+0x4c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2010      	movs	r0, #16
 80008e4:	f002 fb07 	bl	8002ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008e8:	2010      	movs	r0, #16
 80008ea:	f002 fb20 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2011      	movs	r0, #17
 80008f4:	f002 faff 	bl	8002ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008f8:	2011      	movs	r0, #17
 80008fa:	f002 fb18 	bl	8002f2e <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2c      	ldr	r2, [pc, #176]	; (80009dc <MX_GPIO_Init+0xd0>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a25      	ldr	r2, [pc, #148]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_GPIO_Init+0xd4>)
 8000998:	f003 f86a 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_GPIO_Init+0xd8>)
 80009b4:	f002 fed8 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009b8:	2320      	movs	r3, #32
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0xd4>)
 80009d0:	f002 feca 	bl	8003768 <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020800 	.word	0x40020800

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>

080009f2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <_ZN3ros3MsgC1Ev+0x1c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	08006ac8 	.word	0x08006ac8

08000a34 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
      data()
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ffe8 	bl	8000a14 <_ZN3ros3MsgC1Ev>
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffcf 	bl	80009f2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08006ab0 	.word	0x08006ab0

08000a64 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6859      	ldr	r1, [r3, #4]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2ca      	uxtb	r2, r1
 8000a7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	0a19      	lsrs	r1, r3, #8
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	0c19      	lsrs	r1, r3, #16
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2ca      	uxtb	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	0e19      	lsrs	r1, r3, #24
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3303      	adds	r3, #3
 8000aae:	683a      	ldr	r2, [r7, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6899      	ldr	r1, [r3, #8]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b2ca      	uxtb	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	0a19      	lsrs	r1, r3, #8
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b2ca      	uxtb	r2, r1
 8000ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	0c19      	lsrs	r1, r3, #16
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	683a      	ldr	r2, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	0e19      	lsrs	r1, r3, #24
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3303      	adds	r3, #3
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	b2ca      	uxtb	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3304      	adds	r3, #4
 8000b04:	60fb      	str	r3, [r7, #12]
      return offset;
 8000b06:	68fb      	ldr	r3, [r7, #12]
    }
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3301      	adds	r3, #1
 8000b38:	6839      	ldr	r1, [r7, #0]
 8000b3a:	440b      	add	r3, r1
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	431a      	orrs	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	440b      	add	r3, r1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3303      	adds	r3, #3
 8000b64:	6839      	ldr	r1, [r7, #0]
 8000b66:	440b      	add	r3, r1
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	061b      	lsls	r3, r3, #24
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3304      	adds	r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	683a      	ldr	r2, [r7, #0]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	6839      	ldr	r1, [r7, #0]
 8000b90:	440b      	add	r3, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	431a      	orrs	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	6839      	ldr	r1, [r7, #0]
 8000ba6:	440b      	add	r3, r1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3303      	adds	r3, #3
 8000bba:	6839      	ldr	r1, [r7, #0]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	061b      	lsls	r3, r3, #24
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3304      	adds	r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
     return offset;
 8000bce:	68fb      	ldr	r3, [r7, #12]
    }
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	08006870 	.word	0x08006870

08000bf8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	08006880 	.word	0x08006880

08000c14 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fef8 	bl	8000a14 <_ZN3ros3MsgC1Ev>
 8000c24:	4a0b      	ldr	r2, [pc, #44]	; (8000c54 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	809a      	strh	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    {
    }
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	08006a98 	.word	0x08006a98
 8000c58:	080068a4 	.word	0x080068a4

08000c5c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	8899      	ldrh	r1, [r3, #4]
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	889b      	ldrh	r3, [r3, #4]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b299      	uxth	r1, r3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	3301      	adds	r3, #1
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fa9c 	bl	80001d4 <strlen>
 8000c9c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	69b9      	ldr	r1, [r7, #24]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 ff78 	bl	8001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	3304      	adds	r3, #4
 8000cb0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	18d0      	adds	r0, r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f005 fc32 	bl	8006528 <memcpy>
      offset += length_topic_name;
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4413      	add	r3, r2
 8000cca:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fa7f 	bl	80001d4 <strlen>
 8000cd6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	6979      	ldr	r1, [r7, #20]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 ff5b 	bl	8001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	18d0      	adds	r0, r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f005 fc15 	bl	8006528 <memcpy>
      offset += length_message_type;
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	4413      	add	r3, r2
 8000d04:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fa62 	bl	80001d4 <strlen>
 8000d10:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	4413      	add	r3, r2
 8000d18:	6939      	ldr	r1, [r7, #16]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 ff3e 	bl	8001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3304      	adds	r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	18d0      	adds	r0, r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4619      	mov	r1, r3
 8000d34:	f005 fbf8 	bl	8006528 <memcpy>
      offset += length_md5sum;
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000d46:	68f9      	ldr	r1, [r7, #12]
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	0a19      	lsrs	r1, r3, #8
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	0c19      	lsrs	r1, r3, #16
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	0e19      	lsrs	r1, r3, #24
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3303      	adds	r3, #3
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	61fb      	str	r3, [r7, #28]
      return offset;
 8000d88:	69fb      	ldr	r3, [r7, #28]
    }
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b08a      	sub	sp, #40	; 0x28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	889b      	ldrh	r3, [r3, #4]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	3301      	adds	r3, #1
 8000db8:	6839      	ldr	r1, [r7, #0]
 8000dba:	440b      	add	r3, r1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	441a      	add	r2, r3
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fefa 	bl	8001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	3304      	adds	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4413      	add	r3, r2
 8000df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d20c      	bcs.n	8000e14 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	441a      	add	r2, r3
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	440b      	add	r3, r1
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3301      	adds	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	e7ec      	b.n	8000dee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	4413      	add	r3, r2
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	441a      	add	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	4413      	add	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	441a      	add	r2, r3
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fec7 	bl	8001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	623b      	str	r3, [r7, #32]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4413      	add	r3, r2
 8000e5a:	6a3a      	ldr	r2, [r7, #32]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d20c      	bcs.n	8000e7a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000e60:	683a      	ldr	r2, [r7, #0]
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	441a      	add	r2, r3
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	6839      	ldr	r1, [r7, #0]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	3301      	adds	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	e7ec      	b.n	8000e54 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4413      	add	r3, r2
 8000e80:	3b01      	subs	r3, #1
 8000e82:	683a      	ldr	r2, [r7, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	441a      	add	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	441a      	add	r2, r3
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fe94 	bl	8001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d20c      	bcs.n	8000ee0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	441a      	add	r2, r3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	3301      	adds	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e7ec      	b.n	8000eba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	441a      	add	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4413      	add	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	440a      	add	r2, r1
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	6839      	ldr	r1, [r7, #0]
 8000f1e:	440b      	add	r3, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	6839      	ldr	r1, [r7, #0]
 8000f30:	440b      	add	r3, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	3303      	adds	r3, #3
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	440b      	add	r3, r1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	061b      	lsls	r3, r3, #24
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	3304      	adds	r3, #4
 8000f56:	61bb      	str	r3, [r7, #24]
     return offset;
 8000f58:	69bb      	ldr	r3, [r7, #24]
    }
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	080068a8 	.word	0x080068a8

08000f80 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	080068c4 	.word	0x080068c4

08000f9c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd34 	bl	8000a14 <_ZN3ros3MsgC1Ev>
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	711a      	strb	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000fbc:	609a      	str	r2, [r3, #8]
    {
    }
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	08006a80 	.word	0x08006a80
 8000fcc:	080068a4 	.word	0x080068a4

08000fd0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	7912      	ldrb	r2, [r2, #4]
 8000fe8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3301      	adds	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f8ed 	bl	80001d4 <strlen>
 8000ffa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	4413      	add	r3, r2
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fdc9 	bl	8001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	18d0      	adds	r0, r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4619      	mov	r1, r3
 800101e:	f005 fa83 	bl	8006528 <memcpy>
      offset += length_msg;
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
      return offset;
 800102a:	68fb      	ldr	r3, [r7, #12]
    }
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3301      	adds	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	441a      	add	r2, r3
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fdb9 	bl	8001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	3304      	adds	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4413      	add	r3, r2
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	d20c      	bcs.n	8001096 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	441a      	add	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3b01      	subs	r3, #1
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	440b      	add	r3, r1
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e7ec      	b.n	8001070 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	3b01      	subs	r3, #1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	441a      	add	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
     return offset;
 80010ba:	693b      	ldr	r3, [r7, #16]
    }
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	080068e8 	.word	0x080068e8

080010e0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	080068fc 	.word	0x080068fc

080010fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fc84 	bl	8000a14 <_ZN3ros3MsgC1Ev>
 800110c:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	08006a68 	.word	0x08006a68

08001144 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6859      	ldr	r1, [r3, #4]
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4413      	add	r3, r2
 800115c:	b2ca      	uxtb	r2, r1
 800115e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0a19      	lsrs	r1, r3, #8
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	3301      	adds	r3, #1
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	4413      	add	r3, r2
 800116e:	b2ca      	uxtb	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	0c19      	lsrs	r1, r3, #16
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	3302      	adds	r3, #2
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	b2ca      	uxtb	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	0e19      	lsrs	r1, r3, #24
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	3303      	adds	r3, #3
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4413      	add	r3, r2
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3304      	adds	r3, #4
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	6a3a      	ldr	r2, [r7, #32]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d22b      	bcs.n	8001202 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	0a19      	lsrs	r1, r3, #8
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	3301      	adds	r3, #1
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	b2ca      	uxtb	r2, r1
 80011d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	0c19      	lsrs	r1, r3, #16
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	3302      	adds	r3, #2
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	0e19      	lsrs	r1, r3, #24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	3303      	adds	r3, #3
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3304      	adds	r3, #4
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	3301      	adds	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	e7ce      	b.n	80011a0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6919      	ldr	r1, [r3, #16]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	b2ca      	uxtb	r2, r1
 800120e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	0a19      	lsrs	r1, r3, #8
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3301      	adds	r3, #1
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	4413      	add	r3, r2
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	0c19      	lsrs	r1, r3, #16
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	3302      	adds	r3, #2
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	b2ca      	uxtb	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	0e19      	lsrs	r1, r3, #24
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3303      	adds	r3, #3
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3304      	adds	r3, #4
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	429a      	cmp	r2, r3
 8001258:	d22b      	bcs.n	80012b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	4413      	add	r3, r2
 8001270:	b2ca      	uxtb	r2, r1
 8001272:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	0a19      	lsrs	r1, r3, #8
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	3301      	adds	r3, #1
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	b2ca      	uxtb	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	0c19      	lsrs	r1, r3, #16
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	3302      	adds	r3, #2
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	4413      	add	r3, r2
 8001290:	b2ca      	uxtb	r2, r1
 8001292:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	0e19      	lsrs	r1, r3, #24
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3303      	adds	r3, #3
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	b2ca      	uxtb	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3304      	adds	r3, #4
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	e7ce      	b.n	8001250 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69d9      	ldr	r1, [r3, #28]
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2ca      	uxtb	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	0a19      	lsrs	r1, r3, #8
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	b2ca      	uxtb	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	0c19      	lsrs	r1, r3, #16
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	3302      	adds	r3, #2
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	b2ca      	uxtb	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	0e19      	lsrs	r1, r3, #24
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	3303      	adds	r3, #3
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	3304      	adds	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	429a      	cmp	r2, r3
 8001308:	d228      	bcs.n	800135c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff5c 	bl	80001d4 <strlen>
 800131c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	6979      	ldr	r1, [r7, #20]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc38 	bl	8001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	3304      	adds	r3, #4
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	18d0      	adds	r0, r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4619      	mov	r1, r3
 8001348:	f005 f8ee 	bl	8006528 <memcpy>
      offset += length_stringsi;
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	e7d1      	b.n	8001300 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001366:	b580      	push	{r7, lr}
 8001368:	b08e      	sub	sp, #56	; 0x38
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800137e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001380:	3301      	adds	r3, #1
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	6a3a      	ldr	r2, [r7, #32]
 800138c:	4313      	orrs	r3, r2
 800138e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	3302      	adds	r3, #2
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	041b      	lsls	r3, r3, #16
 800139c:	6a3a      	ldr	r2, [r7, #32]
 800139e:	4313      	orrs	r3, r2
 80013a0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80013a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a4:	3303      	adds	r3, #3
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	6a3a      	ldr	r2, [r7, #32]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80013b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b6:	3304      	adds	r3, #4
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d90a      	bls.n	80013da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f005 f8c0 	bl	8006554 <realloc>
 80013d4:	4602      	mov	r2, r0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a3a      	ldr	r2, [r7, #32]
 80013de:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d236      	bcs.n	800145c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013f6:	6839      	ldr	r1, [r7, #0]
 80013f8:	440a      	add	r2, r1
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001404:	3301      	adds	r3, #1
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	440b      	add	r3, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	4313      	orrs	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	3302      	adds	r3, #2
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	440b      	add	r3, r1
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	041b      	lsls	r3, r3, #16
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001428:	3303      	adds	r3, #3
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	4313      	orrs	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	3304      	adds	r3, #4
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001456:	3301      	adds	r3, #1
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
 800145a:	e7c3      	b.n	80013e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	3301      	adds	r3, #1
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4313      	orrs	r3, r2
 8001476:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	3302      	adds	r3, #2
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	4313      	orrs	r3, r2
 8001488:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800148a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148c:	3303      	adds	r3, #3
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	061b      	lsls	r3, r3, #24
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	4313      	orrs	r3, r2
 800149a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	3304      	adds	r3, #4
 80014a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d90a      	bls.n	80014c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f005 f84c 	bl	8006554 <realloc>
 80014bc:	4602      	mov	r2, r0
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d236      	bcs.n	8001544 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	440a      	add	r2, r1
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	3301      	adds	r3, #1
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014fe:	3302      	adds	r3, #2
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	440b      	add	r3, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	041b      	lsls	r3, r3, #16
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001510:	3303      	adds	r3, #3
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	440b      	add	r3, r1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	3304      	adds	r3, #4
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699a      	ldr	r2, [r3, #24]
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	3214      	adds	r2, #20
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153e:	3301      	adds	r3, #1
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001542:	e7c3      	b.n	80014cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800154e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001550:	3301      	adds	r3, #1
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001562:	3302      	adds	r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	041b      	lsls	r3, r3, #16
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	3303      	adds	r3, #3
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	3304      	adds	r3, #4
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	429a      	cmp	r2, r3
 8001592:	d90a      	bls.n	80015aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f004 ffd8 	bl	8006554 <realloc>
 80015a4:	4602      	mov	r2, r0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d23f      	bcs.n	800163e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80015be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	441a      	add	r2, r3
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fb04 	bl	8001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d2:	3304      	adds	r3, #4
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d20c      	bcs.n	8001600 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	441a      	add	r2, r3
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	440b      	add	r3, r1
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	3301      	adds	r3, #1
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	e7ec      	b.n	80015da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	3b01      	subs	r3, #1
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	4413      	add	r3, r2
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001612:	3b01      	subs	r3, #1
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	441a      	add	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800161c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4413      	add	r3, r2
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	3220      	adds	r2, #32
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	3301      	adds	r3, #1
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
 800163c:	e7ba      	b.n	80015b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800163e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001640:	4618      	mov	r0, r3
 8001642:	3738      	adds	r7, #56	; 0x38
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	080069d4 	.word	0x080069d4

08001664 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	08006920 	.word	0x08006920

08001680 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
  }
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80016ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <_ZN13STM32HardwareC1Ev+0x34>)
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	20000120 	.word	0x20000120

080016f8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f804 	bl	800170e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	4619      	mov	r1, r3
 8001724:	f003 fdaa 	bl	800527c <HAL_UART_Receive_DMA>
    }
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffa7 	bl	8001698 <_ZN13STM32Hardware10getRdmaIndEv>
 800174a:	4603      	mov	r3, r0
 800174c:	429c      	cmp	r4, r3
 800174e:	bf14      	ite	ne
 8001750:	2301      	movne	r3, #1
 8001752:	2300      	moveq	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d012      	beq.n	8001780 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001760:	1c59      	adds	r1, r3, #1
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001780:	68fb      	ldr	r3, [r7, #12]
    }
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
	...

0800178c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d108      	bne.n	80017b4 <_ZN13STM32Hardware5flushEv+0x28>
 80017a2:	4b28      	ldr	r3, [pc, #160]	; (8001844 <_ZN13STM32Hardware5flushEv+0xb8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f083 0301 	eor.w	r3, r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <_ZN13STM32Hardware5flushEv+0x28>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <_ZN13STM32Hardware5flushEv+0x2a>
 80017b4:	2300      	movs	r3, #0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d03f      	beq.n	800183a <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <_ZN13STM32Hardware5flushEv+0xb8>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d031      	beq.n	8001834 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017dc:	429a      	cmp	r2, r3
 80017de:	d20a      	bcs.n	80017f6 <_ZN13STM32Hardware5flushEv+0x6a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	e006      	b.n	8001804 <_ZN13STM32Hardware5flushEv+0x78>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001802:	b29b      	uxth	r3, r3
 8001804:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	89fa      	ldrh	r2, [r7, #14]
 800181a:	4619      	mov	r1, r3
 800181c:	f003 fcb0 	bl	8005180 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	4413      	add	r3, r2
 800182a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
      }
    }
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000224 	.word	0x20000224

08001848 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
      int n = length;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800185e:	bfa8      	it	ge
 8001860:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001864:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800186c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4293      	cmp	r3, r2
 8001874:	bf28      	it	cs
 8001876:	4613      	movcs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001880:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	4618      	mov	r0, r3
 800188e:	f004 fe4b 	bl	8006528 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	4413      	add	r3, r2
 800189c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d00b      	beq.n	80018c6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	18d1      	adds	r1, r2, r3
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	f004 fe31 	bl	8006528 <memcpy>
      }

      flush();
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff ff60 	bl	800178c <_ZN13STM32Hardware5flushEv>
    }
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	f001 fa00 	bl	8002ce0 <HAL_GetTick>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
      data(0)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f88c 	bl	8000a14 <_ZN3ros3MsgC1Ev>
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	711a      	strb	r2, [r3, #4]
    {
    }
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	08006a24 	.word	0x08006a24

08001918 <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	7912      	ldrb	r2, [r2, #4]
 8001930:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
      return offset;
 8001938:	68fb      	ldr	r3, [r7, #12]
    }
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
     return offset;
 8001966:	68fb      	ldr	r3, [r7, #12]
    }
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <_ZN8std_msgs5UInt87getTypeEv+0x18>)
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	08006944 	.word	0x08006944

08001990 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <_ZN8std_msgs5UInt86getMD5Ev+0x18>)
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	08006954 	.word	0x08006954

080019ac <HAL_UART_TxCpltCallback>:
ros::Subscriber<std_msgs::UInt8> led0_sub("led0", &led0_cb);
ros::Subscriber<std_msgs::UInt8> led1_sub("led1", &led1_cb);
ros::Subscriber<std_msgs::UInt8> led2_sub("led2", &led2_cb);
ros::Subscriber<std_msgs::UInt8> led3_sub("led3", &led3_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_UART_TxCpltCallback+0x20>)
 80019b6:	f000 f9f9 	bl	8001dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fee5 	bl	800178c <_ZN13STM32Hardware5flushEv>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000228 	.word	0x20000228

080019d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <HAL_UART_RxCpltCallback+0x20>)
 80019da:	f000 f9e7 	bl	8001dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80019de:	4603      	mov	r3, r0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fe94 	bl	800170e <_ZN13STM32Hardware10reset_rbufEv>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000228 	.word	0x20000228

080019f4 <setup>:

void setup(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <setup+0x74>)
 80019fa:	2260      	movs	r2, #96	; 0x60
 80019fc:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <setup+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <setup+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <setup+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <setup+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <setup+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]

  nh.initNode();
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <setup+0x78>)
 8001a1e:	f000 f9d1 	bl	8001dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.subscribe(led0_sub);
 8001a22:	4913      	ldr	r1, [pc, #76]	; (8001a70 <setup+0x7c>)
 8001a24:	4811      	ldr	r0, [pc, #68]	; (8001a6c <setup+0x78>)
 8001a26:	f000 f9ea 	bl	8001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led1_sub);
 8001a2a:	4912      	ldr	r1, [pc, #72]	; (8001a74 <setup+0x80>)
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <setup+0x78>)
 8001a2e:	f000 f9e6 	bl	8001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led2_sub);
 8001a32:	4911      	ldr	r1, [pc, #68]	; (8001a78 <setup+0x84>)
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <setup+0x78>)
 8001a36:	f000 f9e2 	bl	8001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>
  nh.subscribe(led3_sub);
 8001a3a:	4910      	ldr	r1, [pc, #64]	; (8001a7c <setup+0x88>)
 8001a3c:	480b      	ldr	r0, [pc, #44]	; (8001a6c <setup+0x78>)
 8001a3e:	f000 f9de 	bl	8001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a42:	2100      	movs	r1, #0
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <setup+0x8c>)
 8001a46:	f002 fd87 	bl	8004558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <setup+0x8c>)
 8001a4e:	f002 fd83 	bl	8004558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001a52:	2108      	movs	r1, #8
 8001a54:	480a      	ldr	r0, [pc, #40]	; (8001a80 <setup+0x8c>)
 8001a56:	f002 fd7f 	bl	8004558 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001a5a:	210c      	movs	r1, #12
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <setup+0x8c>)
 8001a5e:	f002 fd7b 	bl	8004558 <HAL_TIM_PWM_Start>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000b64 	.word	0x20000b64
 8001a6c:	20000228 	.word	0x20000228
 8001a70:	20000b80 	.word	0x20000b80
 8001a74:	20000b9c 	.word	0x20000b9c
 8001a78:	20000bb8 	.word	0x20000bb8
 8001a7c:	20000bd4 	.word	0x20000bd4
 8001a80:	20000090 	.word	0x20000090

08001a84 <loop>:

void loop(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <loop+0x20>)
 8001a8c:	f002 f809 	bl	8003aa2 <HAL_GPIO_TogglePin>

  nh.spinOnce();
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <loop+0x24>)
 8001a92:	f000 f9df 	bl	8001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

  HAL_Delay(1000);
 8001a96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9a:	f001 f92d 	bl	8002cf8 <HAL_Delay>
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	20000228 	.word	0x20000228

08001aac <_Z7led0_cbRKN8std_msgs5UInt8E>:

void led0_cb(const std_msgs::UInt8& msg){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  sConfigOC.Pulse = msg.data;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <_Z7led0_cbRKN8std_msgs5UInt8E+0x38>)
 8001abc:	605a      	str	r2, [r3, #4]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <_Z7led0_cbRKN8std_msgs5UInt8E+0x3c>)
 8001ac4:	f001 ffd4 	bl	8003a70 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4906      	ldr	r1, [pc, #24]	; (8001ae4 <_Z7led0_cbRKN8std_msgs5UInt8E+0x38>)
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <_Z7led0_cbRKN8std_msgs5UInt8E+0x40>)
 8001ace:	f002 fdf3 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <_Z7led0_cbRKN8std_msgs5UInt8E+0x40>)
 8001ad6:	f002 fd3f 	bl	8004558 <HAL_TIM_PWM_Start>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000b64 	.word	0x20000b64
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	20000090 	.word	0x20000090

08001af0 <_Z7led1_cbRKN8std_msgs5UInt8E>:

void led1_cb(const std_msgs::UInt8& msg){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2120      	movs	r1, #32
 8001afc:	480a      	ldr	r0, [pc, #40]	; (8001b28 <_Z7led1_cbRKN8std_msgs5UInt8E+0x38>)
 8001afe:	f001 ffb7 	bl	8003a70 <HAL_GPIO_WritePin>
  sConfigOC.Pulse = msg.data;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	791b      	ldrb	r3, [r3, #4]
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <_Z7led1_cbRKN8std_msgs5UInt8E+0x3c>)
 8001b0a:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4907      	ldr	r1, [pc, #28]	; (8001b2c <_Z7led1_cbRKN8std_msgs5UInt8E+0x3c>)
 8001b10:	4807      	ldr	r0, [pc, #28]	; (8001b30 <_Z7led1_cbRKN8std_msgs5UInt8E+0x40>)
 8001b12:	f002 fdd1 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b16:	2104      	movs	r1, #4
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <_Z7led1_cbRKN8std_msgs5UInt8E+0x40>)
 8001b1a:	f002 fd1d 	bl	8004558 <HAL_TIM_PWM_Start>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	20000b64 	.word	0x20000b64
 8001b30:	20000090 	.word	0x20000090

08001b34 <_Z7led2_cbRKN8std_msgs5UInt8E>:

void led2_cb(const std_msgs::UInt8& msg){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  sConfigOC.Pulse = msg.data;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	791b      	ldrb	r3, [r3, #4]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_Z7led2_cbRKN8std_msgs5UInt8E+0x2c>)
 8001b44:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8001b46:	2208      	movs	r2, #8
 8001b48:	4905      	ldr	r1, [pc, #20]	; (8001b60 <_Z7led2_cbRKN8std_msgs5UInt8E+0x2c>)
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <_Z7led2_cbRKN8std_msgs5UInt8E+0x30>)
 8001b4c:	f002 fdb4 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b50:	2108      	movs	r1, #8
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <_Z7led2_cbRKN8std_msgs5UInt8E+0x30>)
 8001b54:	f002 fd00 	bl	8004558 <HAL_TIM_PWM_Start>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000b64 	.word	0x20000b64
 8001b64:	20000090 	.word	0x20000090

08001b68 <_Z7led3_cbRKN8std_msgs5UInt8E>:

void led3_cb(const std_msgs::UInt8& msg){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  sConfigOC.Pulse = msg.data;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_Z7led3_cbRKN8std_msgs5UInt8E+0x2c>)
 8001b78:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	4905      	ldr	r1, [pc, #20]	; (8001b94 <_Z7led3_cbRKN8std_msgs5UInt8E+0x2c>)
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <_Z7led3_cbRKN8std_msgs5UInt8E+0x30>)
 8001b80:	f002 fd9a 	bl	80046b8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b84:	210c      	movs	r1, #12
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <_Z7led3_cbRKN8std_msgs5UInt8E+0x30>)
 8001b88:	f002 fce6 	bl	8004558 <HAL_TIM_PWM_Start>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000b64 	.word	0x20000b64
 8001b98:	20000090 	.word	0x20000090

08001b9c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d80d      	bhi.n	8001bcc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	fa22 f103 	lsr.w	r1, r2, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e7ee      	b.n	8001baa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d811      	bhi.n	8001c16 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	440a      	add	r2, r1
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	fa01 f202 	lsl.w	r2, r1, r2
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3301      	adds	r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	e7ea      	b.n	8001bec <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	08006a54 	.word	0x08006a54

08001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ffe8 	bl	8001c24 <_ZN3ros15NodeHandleBase_C1Ev>
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fd2e 	bl	80016c0 <_ZN13STM32HardwareC1Ev>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa42 	bl	80010fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b18      	cmp	r3, #24
 8001c80:	d80b      	bhi.n	8001c9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e7f0      	b.n	8001c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b18      	cmp	r3, #24
 8001ca2:	d80a      	bhi.n	8001cba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001cac:	2100      	movs	r1, #0
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e7f1      	b.n	8001c9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d20a      	bcs.n	8001cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e7f0      	b.n	8001cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce6:	d20a      	bcs.n	8001cfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e7f0      	b.n	8001ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08006a10 	.word	0x08006a10

08001d44 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	08006a3c 	.word	0x08006a3c

08001d64 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ffe5 	bl	8001d44 <_ZN3ros11Subscriber_C1Ev>
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	330c      	adds	r3, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fdb1 	bl	80018ec <_ZN8std_msgs5UInt8C1Ev>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	609a      	str	r2, [r3, #8]
  };
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	080069f8 	.word	0x080069f8

08001dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3304      	adds	r3, #4
  }
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fc91 	bl	80016f8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	dc19      	bgt.n	8001e46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10d      	bne.n	8001e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	605a      	str	r2, [r3, #4]
        return true;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e004      	b.n	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e7e2      	b.n	8001e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5UInt8EvEEEEbRT_+0xe>
      }
    }
    return false;
 8001e46:	2300      	movs	r3, #0
  }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fd37 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 8001e66:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d903      	bls.n	8001e82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d903      	bls.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d014      	beq.n	8001ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fd10 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad2      	subs	r2, r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	bf8c      	ite	hi
 8001ec4:	2301      	movhi	r3, #1
 8001ec6:	2300      	movls	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8001ece:	f06f 0301 	mvn.w	r3, #1
 8001ed2:	e194      	b.n	80021fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fc29 	bl	8001730 <_ZN13STM32Hardware4readEv>
 8001ede:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f2c0 8174 	blt.w	80021d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	d11e      	bne.n	8001f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001f08:	1c59      	adds	r1, r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	b2d1      	uxtb	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	460a      	mov	r2, r1
 8001f1a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1b4      	bne.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001f3e:	e7af      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d128      	bne.n	8001f9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	d10d      	bne.n	8001f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f103 0214 	add.w	r2, r3, #20
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8001f6a:	e799      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fcaf 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf8c      	ite	hi
 8001f84:	2301      	movhi	r3, #1
 8001f86:	2300      	movls	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d088      	beq.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8001f96:	f06f 0301 	mvn.w	r3, #1
 8001f9a:	e130      	b.n	80021fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d118      	bne.n	8001fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2bfe      	cmp	r3, #254	; 0xfe
 8001faa:	d107      	bne.n	8001fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8001fba:	e771      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f af68 	bne.w	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f918 	bl	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001fd6:	e763      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d113      	bne.n	800200a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002008:	e74a      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002010:	2b03      	cmp	r3, #3
 8002012:	d110      	bne.n	8002036 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	441a      	add	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002034:	e734      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800203c:	2b04      	cmp	r3, #4
 800203e:	d116      	bne.n	800206e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002046:	425a      	negs	r2, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	bf58      	it	pl
 800204e:	4253      	negpl	r3, r2
 8002050:	2bff      	cmp	r3, #255	; 0xff
 8002052:	d107      	bne.n	8002064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002062:	e71d      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800206c:	e718      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002074:	2b05      	cmp	r3, #5
 8002076:	d10f      	bne.n	8002098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002096:	e703      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d117      	bne.n	80020d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2207      	movs	r2, #7
 80020b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f47f aeec 	bne.w	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2208      	movs	r2, #8
 80020cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80020d0:	e6e6      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80020d8:	2b08      	cmp	r3, #8
 80020da:	f47f aee1 	bne.w	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80020ec:	425a      	negs	r2, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	bf58      	it	pl
 80020f4:	4253      	negpl	r3, r2
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	f47f aed2 	bne.w	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d110      	bne.n	8002128 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f87d 	bl	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f898 	bl	8002242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002126:	e06a      	b.n	80021fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d107      	bne.n	8002142 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f960 	bl	8002400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8002140:	e6ae      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002148:	2b06      	cmp	r3, #6
 800214a:	d10e      	bne.n	800216a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff f903 	bl	8001366 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002168:	e69a      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002170:	2b0b      	cmp	r3, #11
 8002172:	d104      	bne.n	800217e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800217c:	e690      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002184:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f43f ae84 	beq.w	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800219e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80021b2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80021ca:	4611      	mov	r1, r2
 80021cc:	4798      	blx	r3
    while (true)
 80021ce:	e667      	b.n	8001ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80021d0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00f      	beq.n	80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d906      	bls.n	80021fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f809 	bl	8002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80021fc:	2300      	movs	r3, #0
  }
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fc0e 	bl	8000a34 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f107 020c 	add.w	r2, r7, #12
 8002222:	210a      	movs	r1, #10
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
    rt_time = hardware_.time();
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fb51 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800223a:	bf00      	nop
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002242:	b590      	push	{r4, r7, lr}
 8002244:	b08b      	sub	sp, #44	; 0x2c
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fce0 	bl	8000c14 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	2b18      	cmp	r3, #24
 800225c:	dc63      	bgt.n	8002326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d056      	beq.n	800231e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	b29b      	uxth	r3, r3
 8002282:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3308      	adds	r3, #8
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4608      	mov	r0, r1
 80022be:	4798      	blx	r3
 80022c0:	4603      	mov	r3, r0
 80022c2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4608      	mov	r0, r1
 80022ec:	4798      	blx	r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681c      	ldr	r4, [r3, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f9b7 	bl	8001680 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002312:	4601      	mov	r1, r0
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	461a      	mov	r2, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	3301      	adds	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
 8002324:	e798      	b.n	8002258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b18      	cmp	r3, #24
 800232e:	dc5f      	bgt.n	80023f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d053      	beq.n	80023e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002344:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	b29b      	uxth	r3, r3
 8002350:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	f202 2222 	addw	r2, r2, #546	; 0x222
 800235a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002366:	f202 2222 	addw	r2, r2, #546	; 0x222
 800236a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3308      	adds	r3, #8
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4608      	mov	r0, r1
 8002382:	4798      	blx	r3
 8002384:	4603      	mov	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	f202 2222 	addw	r2, r2, #546	; 0x222
 800239c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4608      	mov	r0, r1
 80023a8:	4798      	blx	r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80023ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681c      	ldr	r4, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80023ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3304      	adds	r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4608      	mov	r0, r1
 80023da:	4798      	blx	r3
 80023dc:	4601      	mov	r1, r0
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	461a      	mov	r2, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3301      	adds	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
 80023ee:	e79c      	b.n	800232a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80023f8:	bf00      	nop
 80023fa:	372c      	adds	r7, #44	; 0x2c
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd90      	pop	{r4, r7, pc}

08002400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800240a:	f107 0308 	add.w	r3, r7, #8
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb10 	bl	8000a34 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fa5b 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	6839      	ldr	r1, [r7, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fb6f 	bl	8000b14 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4915      	ldr	r1, [pc, #84]	; (8002490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800243c:	fba1 1303 	umull	r1, r3, r1, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800244c:	fba3 0302 	umull	r0, r3, r3, r2
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a0d      	ldr	r2, [pc, #52]	; (8002494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800245e:	fb02 f303 	mul.w	r3, r2, r3
 8002462:	440b      	add	r3, r1
 8002464:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8a6 	bl	80025c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fa2b 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	10624dd3 	.word	0x10624dd3
 8002494:	000f4240 	.word	0x000f4240

08002498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b63      	cmp	r3, #99	; 0x63
 80024a8:	dd09      	ble.n	80024be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e079      	b.n	80025b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80024ca:	3207      	adds	r2, #7
 80024cc:	4611      	mov	r1, r2
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	22ff      	movs	r2, #255	; 0xff
 80024d8:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	22fe      	movs	r2, #254	; 0xfe
 80024e0:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800250a:	4413      	add	r3, r2
 800250c:	b2db      	uxtb	r3, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	b21b      	sxth	r3, r3
 8002526:	121b      	asrs	r3, r3, #8
 8002528:	b21b      	sxth	r3, r3
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002536:	2305      	movs	r3, #5
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	3306      	adds	r3, #6
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	429a      	cmp	r2, r3
 8002542:	dc0d      	bgt.n	8002560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	3301      	adds	r3, #1
 800255c:	61bb      	str	r3, [r7, #24]
 800255e:	e7ec      	b.n	800253a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3307      	adds	r3, #7
 8002564:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	425a      	negs	r2, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	bf58      	it	pl
 8002570:	4253      	negpl	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	6179      	str	r1, [r7, #20]
 800257a:	43d2      	mvns	r2, r2
 800257c:	b2d1      	uxtb	r1, r2
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	460a      	mov	r2, r1
 8002584:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258e:	dc0a      	bgt.n	80025a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1d18      	adds	r0, r3, #4
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4619      	mov	r1, r3
 800259e:	f7ff f953 	bl	8001848 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	e005      	b.n	80025b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80025a6:	4905      	ldr	r1, [pc, #20]	; (80025bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f849 	bl	8002640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	08006978 	.word	0x08006978

080025c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f980 	bl	80018d4 <_ZN13STM32Hardware4timeEv>
 80025d4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4915      	ldr	r1, [pc, #84]	; (8002634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80025de:	fba1 1303 	umull	r1, r3, r1, r3
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80025f6:	fba3 0302 	umull	r0, r3, r3, r2
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002600:	fb00 f303 	mul.w	r3, r0, r3
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	1aca      	subs	r2, r1, r3
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002610:	4413      	add	r3, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f7fd ff5e 	bl	80004e8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	10624dd3 	.word	0x10624dd3
 8002638:	000f4240 	.word	0x000f4240
 800263c:	3b9aca00 	.word	0x3b9aca00

08002640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	2103      	movs	r1, #3
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f804 	bl	800265c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	460b      	mov	r3, r1
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fc94 	bl	8000f9c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002674:	7afb      	ldrb	r3, [r7, #11]
 8002676:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f107 0214 	add.w	r2, r7, #20
 8002686:	2107      	movs	r1, #7
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	4798      	blx	r3
  }
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <_Z41__static_initialization_and_destruction_0ii>:
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d11f      	bne.n	80026e4 <_Z41__static_initialization_and_destruction_0ii+0x50>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d11a      	bne.n	80026e4 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 80026ae:	480f      	ldr	r0, [pc, #60]	; (80026ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80026b0:	f7ff fac8 	bl	8001c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::UInt8> led0_sub("led0", &led0_cb);
 80026b4:	2301      	movs	r3, #1
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80026b8:	490e      	ldr	r1, [pc, #56]	; (80026f4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80026ba:	480f      	ldr	r0, [pc, #60]	; (80026f8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80026bc:	f7ff fb52 	bl	8001d64 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led1_sub("led1", &led1_cb);
 80026c0:	2301      	movs	r3, #1
 80026c2:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80026c6:	480f      	ldr	r0, [pc, #60]	; (8002704 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026c8:	f7ff fb4c 	bl	8001d64 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led2_sub("led2", &led2_cb);
 80026cc:	2301      	movs	r3, #1
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80026d2:	480f      	ldr	r0, [pc, #60]	; (8002710 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80026d4:	f7ff fb46 	bl	8001d64 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::UInt8> led3_sub("led3", &led3_cb);
 80026d8:	2301      	movs	r3, #1
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80026de:	480f      	ldr	r0, [pc, #60]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80026e0:	f7ff fb40 	bl	8001d64 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000228 	.word	0x20000228
 80026f0:	08001aad 	.word	0x08001aad
 80026f4:	080069b4 	.word	0x080069b4
 80026f8:	20000b80 	.word	0x20000b80
 80026fc:	08001af1 	.word	0x08001af1
 8002700:	080069bc 	.word	0x080069bc
 8002704:	20000b9c 	.word	0x20000b9c
 8002708:	08001b35 	.word	0x08001b35
 800270c:	080069c4 	.word	0x080069c4
 8002710:	20000bb8 	.word	0x20000bb8
 8002714:	08001b69 	.word	0x08001b69
 8002718:	080069cc 	.word	0x080069cc
 800271c:	20000bd4 	.word	0x20000bd4

08002720 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	330c      	adds	r3, #12
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff f908 	bl	8001946 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	320c      	adds	r2, #12
 800273e:	4610      	mov	r0, r2
 8002740:	4798      	blx	r3
  }
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
  }
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	330c      	adds	r3, #12
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f900 	bl	8001974 <_ZN8std_msgs5UInt87getTypeEv>
 8002774:	4603      	mov	r3, r0
  }
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	330c      	adds	r3, #12
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f900 	bl	8001990 <_ZN8std_msgs5UInt86getMD5Ev>
 8002790:	4603      	mov	r3, r0
  }
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
    return configured_;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_GLOBAL__sub_I_nh>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027bc:	2001      	movs	r0, #1
 80027be:	f7ff ff69 	bl	8002694 <_Z41__static_initialization_and_destruction_0ii>
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <HAL_MspInit+0x4c>)
 80027d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_MspInit+0x4c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a08      	ldr	r2, [pc, #32]	; (8002810 <HAL_MspInit+0x4c>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_MspInit+0x4c>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002802:	2007      	movs	r0, #7
 8002804:	f000 fb6c 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800

08002814 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_TIM_Base_MspInit+0x64>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a13      	ldr	r2, [pc, #76]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002842:	e012      	b.n	800286a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d10d      	bne.n	800286a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_TIM_Base_MspInit+0x68>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40023800 	.word	0x40023800

08002880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <HAL_TIM_MspPostInit+0x68>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d11e      	bne.n	80028e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_TIM_MspPostInit+0x6c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_MspPostInit+0x6c>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_TIM_MspPostInit+0x6c>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin;
 80028be:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	4619      	mov	r1, r3
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_TIM_MspPostInit+0x70>)
 80028dc:	f000 ff44 	bl	8003768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020000 	.word	0x40020000

080028f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_UART_MspInit+0x14c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f040 8090 	bne.w	8002a38 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_UART_MspInit+0x150>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <HAL_UART_MspInit+0x150>)
 8002922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
 8002928:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_UART_MspInit+0x150>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	4b42      	ldr	r3, [pc, #264]	; (8002a44 <HAL_UART_MspInit+0x150>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_UART_MspInit+0x150>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6313      	str	r3, [r2, #48]	; 0x30
 8002944:	4b3f      	ldr	r3, [pc, #252]	; (8002a44 <HAL_UART_MspInit+0x150>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002950:	230c      	movs	r3, #12
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002960:	2307      	movs	r3, #7
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4619      	mov	r1, r3
 800296a:	4837      	ldr	r0, [pc, #220]	; (8002a48 <HAL_UART_MspInit+0x154>)
 800296c:	f000 fefc 	bl	8003768 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002970:	4b36      	ldr	r3, [pc, #216]	; (8002a4c <HAL_UART_MspInit+0x158>)
 8002972:	4a37      	ldr	r2, [pc, #220]	; (8002a50 <HAL_UART_MspInit+0x15c>)
 8002974:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002976:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_UART_MspInit+0x158>)
 8002978:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_UART_MspInit+0x158>)
 8002980:	2240      	movs	r2, #64	; 0x40
 8002982:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002984:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <HAL_UART_MspInit+0x158>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_UART_MspInit+0x158>)
 800298c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002990:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002992:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_UART_MspInit+0x158>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_UART_MspInit+0x158>)
 800299a:	2200      	movs	r2, #0
 800299c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029b0:	4826      	ldr	r0, [pc, #152]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029b2:	f000 fad7 	bl	8002f64 <HAL_DMA_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80029bc:	f7fe f814 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_UART_MspInit+0x158>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029ce:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <HAL_UART_MspInit+0x164>)
 80029d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_UART_MspInit+0x160>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_UART_MspInit+0x160>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_UART_MspInit+0x160>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a0c:	4811      	ldr	r0, [pc, #68]	; (8002a54 <HAL_UART_MspInit+0x160>)
 8002a0e:	f000 faa9 	bl	8002f64 <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002a18:	f7fd ffe6 	bl	80009e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_UART_MspInit+0x160>)
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_UART_MspInit+0x160>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2026      	movs	r0, #38	; 0x26
 8002a2e:	f000 fa62 	bl	8002ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a32:	2026      	movs	r0, #38	; 0x26
 8002a34:	f000 fa7b 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40004400 	.word	0x40004400
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	20000164 	.word	0x20000164
 8002a50:	400260a0 	.word	0x400260a0
 8002a54:	200001c4 	.word	0x200001c4
 8002a58:	40026088 	.word	0x40026088

08002a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a60:	e7fe      	b.n	8002a60 <NMI_Handler+0x4>

08002a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a66:	e7fe      	b.n	8002a66 <HardFault_Handler+0x4>

08002a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a6c:	e7fe      	b.n	8002a6c <MemManage_Handler+0x4>

08002a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a72:	e7fe      	b.n	8002a72 <BusFault_Handler+0x4>

08002a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <UsageFault_Handler+0x4>

08002a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aa8:	f000 f906 	bl	8002cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA1_Stream5_IRQHandler+0x10>)
 8002ab6:	f000 fbed 	bl	8003294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200001c4 	.word	0x200001c4

08002ac4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Stream6_IRQHandler+0x10>)
 8002aca:	f000 fbe3 	bl	8003294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000164 	.word	0x20000164

08002ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <USART2_IRQHandler+0x10>)
 8002ade:	f002 fbfd 	bl	80052dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000120 	.word	0x20000120

08002aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
	return 1;
 8002af0:	2301      	movs	r3, #1
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_kill>:

int _kill(int pid, int sig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b06:	f003 fce5 	bl	80064d4 <__errno>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2216      	movs	r2, #22
 8002b0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_exit>:

void _exit (int status)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b2e:	e7fe      	b.n	8002b2e <_exit+0x12>

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f003 fcb8 	bl	80064d4 <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20018000 	.word	0x20018000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	20000bf0 	.word	0x20000bf0
 8002b98:	20000c08 	.word	0x20000c08

08002b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <SystemInit+0x20>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <SystemInit+0x20>)
 8002ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bc4:	480d      	ldr	r0, [pc, #52]	; (8002bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bc6:	490e      	ldr	r1, [pc, #56]	; (8002c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bcc:	e002      	b.n	8002bd4 <LoopCopyDataInit>

08002bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd2:	3304      	adds	r3, #4

08002bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd8:	d3f9      	bcc.n	8002bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bdc:	4c0b      	ldr	r4, [pc, #44]	; (8002c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be0:	e001      	b.n	8002be6 <LoopFillZerobss>

08002be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be4:	3204      	adds	r2, #4

08002be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be8:	d3fb      	bcc.n	8002be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bea:	f7ff ffd7 	bl	8002b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bee:	f003 fc77 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bf2:	f7fd fca5 	bl	8000540 <main>
  bx  lr    
 8002bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002c04:	08006b0c 	.word	0x08006b0c
  ldr r2, =_sbss
 8002c08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002c0c:	20000c08 	.word	0x20000c08

08002c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC_IRQHandler>
	...

08002c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_Init+0x40>)
 8002c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_Init+0x40>)
 8002c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_Init+0x40>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f000 f94f 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f000 f808 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c48:	f7ff fdbc 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00

08002c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_InitTick+0x54>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_InitTick+0x58>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f967 	bl	8002f4a <HAL_SYSTICK_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00e      	b.n	8002ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b0f      	cmp	r3, #15
 8002c8a:	d80a      	bhi.n	8002ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c94:	f000 f92f 	bl	8002ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <HAL_InitTick+0x5c>)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_IncTick+0x20>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x24>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_IncTick+0x24>)
 8002cca:	6013      	str	r3, [r2, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	20000bf4 	.word	0x20000bf4

08002ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_GetTick+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000bf4 	.word	0x20000bf4

08002cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7ff ffee 	bl	8002ce0 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d10:	d005      	beq.n	8002d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_Delay+0x44>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d1e:	bf00      	nop
 8002d20:	f7ff ffde 	bl	8002ce0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8f7      	bhi.n	8002d20 <HAL_Delay+0x28>
  {
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db0b      	blt.n	8002dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <__NVIC_EnableIRQ+0x38>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000e100 	.word	0xe000e100

08002de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	6039      	str	r1, [r7, #0]
 8002dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	db0a      	blt.n	8002e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <__NVIC_SetPriority+0x4c>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	440b      	add	r3, r1
 8002e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e08:	e00a      	b.n	8002e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4908      	ldr	r1, [pc, #32]	; (8002e30 <__NVIC_SetPriority+0x50>)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	3b04      	subs	r3, #4
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b089      	sub	sp, #36	; 0x24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f1c3 0307 	rsb	r3, r3, #7
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	bf28      	it	cs
 8002e52:	2304      	movcs	r3, #4
 8002e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d902      	bls.n	8002e64 <NVIC_EncodePriority+0x30>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3b03      	subs	r3, #3
 8002e62:	e000      	b.n	8002e66 <NVIC_EncodePriority+0x32>
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43d9      	mvns	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	4313      	orrs	r3, r2
         );
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3724      	adds	r7, #36	; 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eac:	d301      	bcc.n	8002eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e00f      	b.n	8002ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <SysTick_Config+0x40>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eba:	210f      	movs	r1, #15
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec0:	f7ff ff8e 	bl	8002de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <SysTick_Config+0x40>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eca:	4b04      	ldr	r3, [pc, #16]	; (8002edc <SysTick_Config+0x40>)
 8002ecc:	2207      	movs	r2, #7
 8002ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff29 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff3e 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff8e 	bl	8002e34 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5d 	bl	8002de0 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff31 	bl	8002da4 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa2 	bl	8002e9c <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f70:	f7ff feb6 	bl	8002ce0 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e099      	b.n	80030b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa0:	e00f      	b.n	8002fc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fa2:	f7ff fe9d 	bl	8002ce0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d908      	bls.n	8002fc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e078      	b.n	80030b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e8      	bne.n	8002fa2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_DMA_Init+0x158>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2b04      	cmp	r3, #4
 800301a:	d107      	bne.n	800302c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	4313      	orrs	r3, r2
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0307 	bic.w	r3, r3, #7
 8003042:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	2b04      	cmp	r3, #4
 8003054:	d117      	bne.n	8003086 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb01 	bl	8003670 <DMA_CheckFifoParam>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003082:	2301      	movs	r3, #1
 8003084:	e016      	b.n	80030b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fab8 	bl	8003604 <DMA_CalcBaseAndBitshift>
 8003094:	4603      	mov	r3, r0
 8003096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	223f      	movs	r2, #63	; 0x3f
 800309e:	409a      	lsls	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f010803f 	.word	0xf010803f

080030c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Start_IT+0x26>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e040      	b.n	8003168 <HAL_DMA_Start_IT+0xa8>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d12f      	bne.n	800315a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa4a 	bl	80035a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	223f      	movs	r2, #63	; 0x3f
 800311a:	409a      	lsls	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0216 	orr.w	r2, r2, #22
 800312e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e005      	b.n	8003166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800317e:	f7ff fdaf 	bl	8002ce0 <HAL_GetTick>
 8003182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d008      	beq.n	80031a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e052      	b.n	8003248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0216 	bic.w	r2, r2, #22
 80031b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_DMA_Abort+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0208 	bic.w	r2, r2, #8
 80031e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f2:	e013      	b.n	800321c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f4:	f7ff fd74 	bl	8002ce0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d90c      	bls.n	800321c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2203      	movs	r2, #3
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e015      	b.n	8003248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e4      	bne.n	80031f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	223f      	movs	r2, #63	; 0x3f
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d004      	beq.n	800326e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e00c      	b.n	8003288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2205      	movs	r2, #5
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032a0:	4b8e      	ldr	r3, [pc, #568]	; (80034dc <HAL_DMA_IRQHandler+0x248>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a8e      	ldr	r2, [pc, #568]	; (80034e0 <HAL_DMA_IRQHandler+0x24c>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	2208      	movs	r2, #8
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01a      	beq.n	8003300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	2208      	movs	r2, #8
 80032ee:	409a      	lsls	r2, r3
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0201 	orr.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2201      	movs	r2, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d012      	beq.n	8003336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003322:	2201      	movs	r2, #1
 8003324:	409a      	lsls	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	2204      	movs	r2, #4
 800333c:	409a      	lsls	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00b      	beq.n	800336c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	2204      	movs	r2, #4
 800335a:	409a      	lsls	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2210      	movs	r2, #16
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d043      	beq.n	8003404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03c      	beq.n	8003404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	2210      	movs	r2, #16
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d018      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d108      	bne.n	80033c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d024      	beq.n	8003404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
 80033c2:	e01f      	b.n	8003404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01b      	beq.n	8003404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
 80033d4:	e016      	b.n	8003404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0208 	bic.w	r2, r2, #8
 80033f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2220      	movs	r2, #32
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 808f 	beq.w	8003534 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8087 	beq.w	8003534 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	2220      	movs	r2, #32
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b05      	cmp	r3, #5
 800343c:	d136      	bne.n	80034ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0216 	bic.w	r2, r2, #22
 800344c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695a      	ldr	r2, [r3, #20]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d103      	bne.n	800346e <HAL_DMA_IRQHandler+0x1da>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	223f      	movs	r2, #63	; 0x3f
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d07e      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	4798      	blx	r3
        }
        return;
 80034aa:	e079      	b.n	80035a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01d      	beq.n	80034f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d031      	beq.n	8003534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e02c      	b.n	8003534 <HAL_DMA_IRQHandler+0x2a0>
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000
 80034e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d023      	beq.n	8003534 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4798      	blx	r3
 80034f4:	e01e      	b.n	8003534 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	2b00      	cmp	r3, #0
 800353a:	d032      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2205      	movs	r2, #5
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3301      	adds	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	429a      	cmp	r2, r3
 800356a:	d307      	bcc.n	800357c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f2      	bne.n	8003560 <HAL_DMA_IRQHandler+0x2cc>
 800357a:	e000      	b.n	800357e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800357c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	4798      	blx	r3
 800359e:	e000      	b.n	80035a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80035a0:	bf00      	nop
    }
  }
}
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d108      	bne.n	80035e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035e6:	e007      	b.n	80035f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3b10      	subs	r3, #16
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <DMA_CalcBaseAndBitshift+0x64>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800361e:	4a13      	ldr	r2, [pc, #76]	; (800366c <DMA_CalcBaseAndBitshift+0x68>)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d909      	bls.n	8003646 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	1d1a      	adds	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	659a      	str	r2, [r3, #88]	; 0x58
 8003644:	e007      	b.n	8003656 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	aaaaaaab 	.word	0xaaaaaaab
 800366c:	08006af0 	.word	0x08006af0

08003670 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d11f      	bne.n	80036ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d856      	bhi.n	800373e <DMA_CheckFifoParam+0xce>
 8003690:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <DMA_CheckFifoParam+0x28>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036a9 	.word	0x080036a9
 800369c:	080036bb 	.word	0x080036bb
 80036a0:	080036a9 	.word	0x080036a9
 80036a4:	0800373f 	.word	0x0800373f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d046      	beq.n	8003742 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b8:	e043      	b.n	8003742 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036c2:	d140      	bne.n	8003746 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e03d      	b.n	8003746 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d2:	d121      	bne.n	8003718 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d837      	bhi.n	800374a <DMA_CheckFifoParam+0xda>
 80036da:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <DMA_CheckFifoParam+0x70>)
 80036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036f7 	.word	0x080036f7
 80036e8:	080036f1 	.word	0x080036f1
 80036ec:	08003709 	.word	0x08003709
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      break;
 80036f4:	e030      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d025      	beq.n	800374e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003706:	e022      	b.n	800374e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003710:	d11f      	bne.n	8003752 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003716:	e01c      	b.n	8003752 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d903      	bls.n	8003726 <DMA_CheckFifoParam+0xb6>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d003      	beq.n	800372c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003724:	e018      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      break;
 800372a:	e015      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00e      	beq.n	8003756 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      break;
 800373c:	e00b      	b.n	8003756 <DMA_CheckFifoParam+0xe6>
      break;
 800373e:	bf00      	nop
 8003740:	e00a      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e008      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;
 8003746:	bf00      	nop
 8003748:	e006      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
 800374c:	e004      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;   
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <DMA_CheckFifoParam+0xe8>
      break;
 8003756:	bf00      	nop
    }
  } 
  
  return status; 
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop

08003768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003768:	b480      	push	{r7}
 800376a:	b089      	sub	sp, #36	; 0x24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	e159      	b.n	8003a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003784:	2201      	movs	r2, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	429a      	cmp	r2, r3
 800379e:	f040 8148 	bne.w	8003a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d005      	beq.n	80037ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d130      	bne.n	800381c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 0201 	and.w	r2, r3, #1
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b03      	cmp	r3, #3
 8003826:	d017      	beq.n	8003858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d123      	bne.n	80038ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	08da      	lsrs	r2, r3, #3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3208      	adds	r2, #8
 800386c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	220f      	movs	r2, #15
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	08da      	lsrs	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3208      	adds	r2, #8
 80038a6:	69b9      	ldr	r1, [r7, #24]
 80038a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	2203      	movs	r2, #3
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a2 	beq.w	8003a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <HAL_GPIO_Init+0x2e8>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	4a56      	ldr	r2, [pc, #344]	; (8003a50 <HAL_GPIO_Init+0x2e8>)
 80038f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038fc:	6453      	str	r3, [r2, #68]	; 0x44
 80038fe:	4b54      	ldr	r3, [pc, #336]	; (8003a50 <HAL_GPIO_Init+0x2e8>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800390a:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_GPIO_Init+0x2ec>)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	3302      	adds	r3, #2
 8003912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	220f      	movs	r2, #15
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a49      	ldr	r2, [pc, #292]	; (8003a58 <HAL_GPIO_Init+0x2f0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x202>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a48      	ldr	r2, [pc, #288]	; (8003a5c <HAL_GPIO_Init+0x2f4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x1fe>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a47      	ldr	r2, [pc, #284]	; (8003a60 <HAL_GPIO_Init+0x2f8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x1fa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a46      	ldr	r2, [pc, #280]	; (8003a64 <HAL_GPIO_Init+0x2fc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x1f6>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a45      	ldr	r2, [pc, #276]	; (8003a68 <HAL_GPIO_Init+0x300>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x1f2>
 8003956:	2304      	movs	r3, #4
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x204>
 800395a:	2307      	movs	r3, #7
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x204>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x204>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x204>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x204>
 800396a:	2300      	movs	r3, #0
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800397c:	4935      	ldr	r1, [pc, #212]	; (8003a54 <HAL_GPIO_Init+0x2ec>)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <HAL_GPIO_Init+0x304>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039ae:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <HAL_GPIO_Init+0x304>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_GPIO_Init+0x304>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <HAL_GPIO_Init+0x304>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_GPIO_Init+0x304>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a02:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <HAL_GPIO_Init+0x304>)
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a08:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <HAL_GPIO_Init+0x304>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_GPIO_Init+0x304>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3301      	adds	r3, #1
 8003a36:	61fb      	str	r3, [r7, #28]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b0f      	cmp	r3, #15
 8003a3c:	f67f aea2 	bls.w	8003784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	3724      	adds	r7, #36	; 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40013c00 	.word	0x40013c00

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a8c:	e003      	b.n	8003a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	619a      	str	r2, [r3, #24]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
	...

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e267      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d075      	beq.n	8003be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	4b88      	ldr	r3, [pc, #544]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d00c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b02:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	4b7e      	ldr	r3, [pc, #504]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d157      	bne.n	8003be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e242      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x74>
 8003b3e:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a75      	ldr	r2, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b70      	ldr	r3, [pc, #448]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a6f      	ldr	r2, [pc, #444]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6c      	ldr	r2, [pc, #432]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b70:	4b69      	ldr	r3, [pc, #420]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a68      	ldr	r2, [pc, #416]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a65      	ldr	r2, [pc, #404]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7ff f8a6 	bl	8002ce0 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7ff f8a2 	bl	8002ce0 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e207      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xc0>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7ff f892 	bl	8002ce0 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7ff f88e 	bl	8002ce0 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1f3      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xe8>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfa:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d116      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1c7      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4937      	ldr	r1, [pc, #220]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	e03a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c48:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCC_OscConfig+0x244>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7ff f847 	bl	8002ce0 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c56:	f7ff f843 	bl	8002ce0 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e1a8      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4925      	ldr	r1, [pc, #148]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_OscConfig+0x244>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7ff f826 	bl	8002ce0 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c98:	f7ff f822 	bl	8002ce0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e187      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d036      	beq.n	8003d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCC_OscConfig+0x248>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7ff f806 	bl	8002ce0 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7ff f802 	bl	8002ce0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e167      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_OscConfig+0x240>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x200>
 8003cf6:	e01b      	b.n	8003d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_RCC_OscConfig+0x248>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7fe ffef 	bl	8002ce0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e00e      	b.n	8003d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe ffeb 	bl	8002ce0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d907      	bls.n	8003d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e150      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	42470000 	.word	0x42470000
 8003d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1ea      	bne.n	8003d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8097 	beq.w	8003e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d42:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10f      	bne.n	8003d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	4b7d      	ldr	r3, [pc, #500]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	4a7c      	ldr	r2, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5e:	4b7a      	ldr	r3, [pc, #488]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6e:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x474>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d118      	bne.n	8003dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7a:	4b74      	ldr	r3, [pc, #464]	; (8003f4c <HAL_RCC_OscConfig+0x474>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a73      	ldr	r2, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x474>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d86:	f7fe ffab 	bl	8002ce0 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fe ffa7 	bl	8002ce0 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e10c      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCC_OscConfig+0x474>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2ea>
 8003db4:	4b64      	ldr	r3, [pc, #400]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a63      	ldr	r2, [pc, #396]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	e01c      	b.n	8003dfc <HAL_RCC_OscConfig+0x324>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x30c>
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a5b      	ldr	r2, [pc, #364]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0x324>
 8003de4:	4b58      	ldr	r3, [pc, #352]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	4a57      	ldr	r2, [pc, #348]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70
 8003df0:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4a54      	ldr	r2, [pc, #336]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 0304 	bic.w	r3, r3, #4
 8003dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fe ff6c 	bl	8002ce0 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fe ff68 	bl	8002ce0 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0cb      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e22:	4b49      	ldr	r3, [pc, #292]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ee      	beq.n	8003e0c <HAL_RCC_OscConfig+0x334>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e30:	f7fe ff56 	bl	8002ce0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e38:	f7fe ff52 	bl	8002ce0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0b5      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4e:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ee      	bne.n	8003e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80a1 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e76:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d05c      	beq.n	8003f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d141      	bne.n	8003f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <HAL_RCC_OscConfig+0x478>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe ff26 	bl	8002ce0 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe ff22 	bl	8002ce0 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e087      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69da      	ldr	r2, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	019b      	lsls	r3, r3, #6
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	061b      	lsls	r3, r3, #24
 8003eda:	491b      	ldr	r1, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_RCC_OscConfig+0x478>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee6:	f7fe fefb 	bl	8002ce0 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fe fef7 	bl	8002ce0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e05c      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f00:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x416>
 8003f0c:	e054      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b10      	ldr	r3, [pc, #64]	; (8003f50 <HAL_RCC_OscConfig+0x478>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fe fee4 	bl	8002ce0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fe fee0 	bl	8002ce0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e045      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_OscConfig+0x470>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x444>
 8003f3a:	e03d      	b.n	8003fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e038      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <HAL_RCC_OscConfig+0x4ec>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d028      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d121      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d11a      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d111      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d001      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800

08003fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0cc      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d90c      	bls.n	8004004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b63      	ldr	r3, [pc, #396]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0b8      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800403e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	494d      	ldr	r1, [pc, #308]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d044      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d119      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d003      	beq.n	8004086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004082:	2b03      	cmp	r3, #3
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e067      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f023 0203 	bic.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4934      	ldr	r1, [pc, #208]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b8:	f7fe fe12 	bl	8002ce0 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c0:	f7fe fe0e 	bl	8002ce0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e04f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 020c 	and.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d1eb      	bne.n	80040c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d20c      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e032      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4916      	ldr	r1, [pc, #88]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800414e:	f000 f821 	bl	8004194 <HAL_RCC_GetSysClockFreq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	4a09      	ldr	r2, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fd72 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00
 8004184:	40023800 	.word	0x40023800
 8004188:	08006ad8 	.word	0x08006ad8
 800418c:	20000000 	.word	0x20000000
 8004190:	20000004 	.word	0x20000004

08004194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004198:	b094      	sub	sp, #80	; 0x50
 800419a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	647b      	str	r3, [r7, #68]	; 0x44
 80041a0:	2300      	movs	r3, #0
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a4:	2300      	movs	r3, #0
 80041a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ac:	4b79      	ldr	r3, [pc, #484]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 030c 	and.w	r3, r3, #12
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d00d      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x40>
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	f200 80e1 	bhi.w	8004380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x34>
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x3a>
 80041c6:	e0db      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041c8:	4b73      	ldr	r3, [pc, #460]	; (8004398 <HAL_RCC_GetSysClockFreq+0x204>)
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041cc:	e0db      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ce:	4b73      	ldr	r3, [pc, #460]	; (800439c <HAL_RCC_GetSysClockFreq+0x208>)
 80041d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d2:	e0d8      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041de:	4b6d      	ldr	r3, [pc, #436]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d063      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ea:	4b6a      	ldr	r3, [pc, #424]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	099b      	lsrs	r3, r3, #6
 80041f0:	2200      	movs	r2, #0
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004206:	4622      	mov	r2, r4
 8004208:	462b      	mov	r3, r5
 800420a:	f04f 0000 	mov.w	r0, #0
 800420e:	f04f 0100 	mov.w	r1, #0
 8004212:	0159      	lsls	r1, r3, #5
 8004214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004218:	0150      	lsls	r0, r2, #5
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4621      	mov	r1, r4
 8004220:	1a51      	subs	r1, r2, r1
 8004222:	6139      	str	r1, [r7, #16]
 8004224:	4629      	mov	r1, r5
 8004226:	eb63 0301 	sbc.w	r3, r3, r1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004238:	4659      	mov	r1, fp
 800423a:	018b      	lsls	r3, r1, #6
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004242:	4651      	mov	r1, sl
 8004244:	018a      	lsls	r2, r1, #6
 8004246:	4651      	mov	r1, sl
 8004248:	ebb2 0801 	subs.w	r8, r2, r1
 800424c:	4659      	mov	r1, fp
 800424e:	eb63 0901 	sbc.w	r9, r3, r1
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800425e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004266:	4690      	mov	r8, r2
 8004268:	4699      	mov	r9, r3
 800426a:	4623      	mov	r3, r4
 800426c:	eb18 0303 	adds.w	r3, r8, r3
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	462b      	mov	r3, r5
 8004274:	eb49 0303 	adc.w	r3, r9, r3
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004286:	4629      	mov	r1, r5
 8004288:	024b      	lsls	r3, r1, #9
 800428a:	4621      	mov	r1, r4
 800428c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004290:	4621      	mov	r1, r4
 8004292:	024a      	lsls	r2, r1, #9
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429a:	2200      	movs	r2, #0
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a4:	f7fb ff9e 	bl	80001e4 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b0:	e058      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b38      	ldr	r3, [pc, #224]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	2200      	movs	r2, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	4611      	mov	r1, r2
 80042be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042c2:	623b      	str	r3, [r7, #32]
 80042c4:	2300      	movs	r3, #0
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042cc:	4642      	mov	r2, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	f04f 0000 	mov.w	r0, #0
 80042d4:	f04f 0100 	mov.w	r1, #0
 80042d8:	0159      	lsls	r1, r3, #5
 80042da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042de:	0150      	lsls	r0, r2, #5
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4641      	mov	r1, r8
 80042e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004304:	ebb2 040a 	subs.w	r4, r2, sl
 8004308:	eb63 050b 	sbc.w	r5, r3, fp
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	00eb      	lsls	r3, r5, #3
 8004316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431a:	00e2      	lsls	r2, r4, #3
 800431c:	4614      	mov	r4, r2
 800431e:	461d      	mov	r5, r3
 8004320:	4643      	mov	r3, r8
 8004322:	18e3      	adds	r3, r4, r3
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	464b      	mov	r3, r9
 8004328:	eb45 0303 	adc.w	r3, r5, r3
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800433a:	4629      	mov	r1, r5
 800433c:	028b      	lsls	r3, r1, #10
 800433e:	4621      	mov	r1, r4
 8004340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004344:	4621      	mov	r1, r4
 8004346:	028a      	lsls	r2, r1, #10
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800434e:	2200      	movs	r2, #0
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	61fa      	str	r2, [r7, #28]
 8004354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004358:	f7fb ff44 	bl	80001e4 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_GetSysClockFreq+0x200>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800437e:	e002      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetSysClockFreq+0x204>)
 8004382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004388:	4618      	mov	r0, r3
 800438a:	3750      	adds	r7, #80	; 0x50
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	00f42400 	.word	0x00f42400
 800439c:	007a1200 	.word	0x007a1200

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20000000 	.word	0x20000000

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043bc:	f7ff fff0 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043c0:	4602      	mov	r2, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4903      	ldr	r1, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ce:	5ccb      	ldrb	r3, [r1, r3]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	08006ae8 	.word	0x08006ae8

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0b5b      	lsrs	r3, r3, #13
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	08006ae8 	.word	0x08006ae8

08004408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e041      	b.n	800449e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe f9f0 	bl	8002814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fac0 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e041      	b.n	800453c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f839 	bl	8004544 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2202      	movs	r2, #2
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f000 fa71 	bl	80049cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_TIM_PWM_Start+0x24>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	e022      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b04      	cmp	r3, #4
 8004580:	d109      	bne.n	8004596 <HAL_TIM_PWM_Start+0x3e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	bf14      	ite	ne
 800458e:	2301      	movne	r3, #1
 8004590:	2300      	moveq	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e015      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d109      	bne.n	80045b0 <HAL_TIM_PWM_Start+0x58>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e008      	b.n	80045c2 <HAL_TIM_PWM_Start+0x6a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e068      	b.n	800469c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <HAL_TIM_PWM_Start+0x82>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d8:	e013      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d104      	bne.n	80045ea <HAL_TIM_PWM_Start+0x92>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_PWM_Start+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	e003      	b.n	8004602 <HAL_TIM_PWM_Start+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fc84 	bl	8004f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <HAL_TIM_PWM_Start+0x14c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d107      	bne.n	800462a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_TIM_PWM_Start+0x14c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d018      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463c:	d013      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_TIM_PWM_Start+0x150>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a17      	ldr	r2, [pc, #92]	; (80046ac <HAL_TIM_PWM_Start+0x154>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a16      	ldr	r2, [pc, #88]	; (80046b0 <HAL_TIM_PWM_Start+0x158>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_TIM_PWM_Start+0x10e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_TIM_PWM_Start+0x15c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d111      	bne.n	800468a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b06      	cmp	r3, #6
 8004676:	d010      	beq.n	800469a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004688:	e007      	b.n	800469a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40010000 	.word	0x40010000
 80046a8:	40000400 	.word	0x40000400
 80046ac:	40000800 	.word	0x40000800
 80046b0:	40000c00 	.word	0x40000c00
 80046b4:	40014000 	.word	0x40014000

080046b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e0ae      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	f200 809f 	bhi.w	8004824 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004825 	.word	0x08004825
 80046f4:	08004825 	.word	0x08004825
 80046f8:	08004825 	.word	0x08004825
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004825 	.word	0x08004825
 8004704:	08004825 	.word	0x08004825
 8004708:	08004825 	.word	0x08004825
 800470c:	080047a3 	.word	0x080047a3
 8004710:	08004825 	.word	0x08004825
 8004714:	08004825 	.word	0x08004825
 8004718:	08004825 	.word	0x08004825
 800471c:	080047e3 	.word	0x080047e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 f9d0 	bl	8004acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0204 	bic.w	r2, r2, #4
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	619a      	str	r2, [r3, #24]
      break;
 800475e:	e064      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fa16 	bl	8004b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      break;
 80047a0:	e043      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fa61 	bl	8004c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0208 	orr.w	r2, r2, #8
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0204 	bic.w	r2, r2, #4
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	61da      	str	r2, [r3, #28]
      break;
 80047e0:	e023      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 faab 	bl	8004d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69d9      	ldr	r1, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	021a      	lsls	r2, r3, #8
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	61da      	str	r2, [r3, #28]
      break;
 8004822:	e002      	b.n	800482a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
      break;
 8004828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3718      	adds	r7, #24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e0b4      	b.n	80049c2 <HAL_TIM_ConfigClockSource+0x186>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d03e      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xd4>
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	f200 8087 	bhi.w	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	f000 8086 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x172>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a6:	d87f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048a8:	2b70      	cmp	r3, #112	; 0x70
 80048aa:	d01a      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0xa6>
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d87b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048b0:	2b60      	cmp	r3, #96	; 0x60
 80048b2:	d050      	beq.n	8004956 <HAL_TIM_ConfigClockSource+0x11a>
 80048b4:	2b60      	cmp	r3, #96	; 0x60
 80048b6:	d877      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048b8:	2b50      	cmp	r3, #80	; 0x50
 80048ba:	d03c      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xfa>
 80048bc:	2b50      	cmp	r3, #80	; 0x50
 80048be:	d873      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d058      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0x13a>
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d86f      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b30      	cmp	r3, #48	; 0x30
 80048ca:	d064      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	2b30      	cmp	r3, #48	; 0x30
 80048ce:	d86b      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d060      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15a>
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d867      	bhi.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05c      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15a>
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d05a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x15a>
 80048e0:	e062      	b.n	80049a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6899      	ldr	r1, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f000 faf1 	bl	8004ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e04f      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6899      	ldr	r1, [r3, #8]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f000 fada 	bl	8004ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004932:	609a      	str	r2, [r3, #8]
      break;
 8004934:	e03c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	461a      	mov	r2, r3
 8004944:	f000 fa4e 	bl	8004de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2150      	movs	r1, #80	; 0x50
 800494e:	4618      	mov	r0, r3
 8004950:	f000 faa7 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004954:	e02c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6859      	ldr	r1, [r3, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	461a      	mov	r2, r3
 8004964:	f000 fa6d 	bl	8004e42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2160      	movs	r1, #96	; 0x60
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fa97 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004974:	e01c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	461a      	mov	r2, r3
 8004984:	f000 fa2e 	bl	8004de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2140      	movs	r1, #64	; 0x40
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa87 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004994:	e00c      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4619      	mov	r1, r3
 80049a0:	4610      	mov	r0, r2
 80049a2:	f000 fa7e 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 80049a6:	e003      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e000      	b.n	80049b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a34      	ldr	r2, [pc, #208]	; (8004ab0 <TIM_Base_SetConfig+0xe4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00f      	beq.n	8004a04 <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ea:	d00b      	beq.n	8004a04 <TIM_Base_SetConfig+0x38>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <TIM_Base_SetConfig+0xe8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <TIM_Base_SetConfig+0x38>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <TIM_Base_SetConfig+0xec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <TIM_Base_SetConfig+0x38>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <TIM_Base_SetConfig+0xf0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d108      	bne.n	8004a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <TIM_Base_SetConfig+0xe4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01b      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a24:	d017      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <TIM_Base_SetConfig+0xe8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a21      	ldr	r2, [pc, #132]	; (8004ab8 <TIM_Base_SetConfig+0xec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00f      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a20      	ldr	r2, [pc, #128]	; (8004abc <TIM_Base_SetConfig+0xf0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <TIM_Base_SetConfig+0xf4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <TIM_Base_SetConfig+0xf8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_Base_SetConfig+0x8a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <TIM_Base_SetConfig+0xfc>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a08      	ldr	r2, [pc, #32]	; (8004ab0 <TIM_Base_SetConfig+0xe4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0302 	bic.w	r3, r3, #2
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0308 	bic.w	r3, r3, #8
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40010000 	.word	0x40010000

08004b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10d      	bne.n	8004c14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	; (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d113      	bne.n	8004c44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000

08004c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40010000 	.word	0x40010000

08004d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <TIM_OC4_SetConfig+0x9c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 030a 	bic.w	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0210 	bic.w	r2, r3, #16
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e050      	b.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	; (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10c      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005058:	2302      	movs	r3, #2
 800505a:	e03d      	b.n	80050d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e03f      	b.n	8005176 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fbf2 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 ff43 	bl	8005fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800515c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	; 0x30
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	d165      	bne.n	8005266 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_UART_Transmit_DMA+0x26>
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e05e      	b.n	8005268 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Transmit_DMA+0x38>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e057      	b.n	8005268 <HAL_UART_Transmit_DMA+0xe8>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2221      	movs	r2, #33	; 0x21
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_UART_Transmit_DMA+0xf0>)
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ec:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_UART_Transmit_DMA+0xf4>)
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_UART_Transmit_DMA+0xf8>)
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	2200      	movs	r2, #0
 80051fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3304      	adds	r3, #4
 8005214:	461a      	mov	r2, r3
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	f7fd ff52 	bl	80030c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005224:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3314      	adds	r3, #20
 8005234:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	617b      	str	r3, [r7, #20]
   return(result);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3314      	adds	r3, #20
 800524c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524e:	627a      	str	r2, [r7, #36]	; 0x24
 8005250:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6a39      	ldr	r1, [r7, #32]
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	61fb      	str	r3, [r7, #28]
   return(result);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e000      	b.n	8005268 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
  }
}
 8005268:	4618      	mov	r0, r3
 800526a:	3730      	adds	r7, #48	; 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	0800584d 	.word	0x0800584d
 8005274:	080058e7 	.word	0x080058e7
 8005278:	08005a5f 	.word	0x08005a5f

0800527c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b20      	cmp	r3, #32
 8005294:	d11d      	bne.n	80052d2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_UART_Receive_DMA+0x26>
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e016      	b.n	80052d4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_UART_Receive_DMA+0x38>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e00f      	b.n	80052d4 <HAL_UART_Receive_DMA+0x58>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fc13 	bl	8005af4 <UART_Start_Receive_DMA>
 80052ce:	4603      	mov	r3, r0
 80052d0:	e000      	b.n	80052d4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b0ba      	sub	sp, #232	; 0xe8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005302:	2300      	movs	r3, #0
 8005304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005308:	2300      	movs	r3, #0
 800530a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800531a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10f      	bne.n	8005342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_UART_IRQHandler+0x66>
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fd7f 	bl	8005e3e <UART_Receive_IT>
      return;
 8005340:	e256      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80de 	beq.w	8005508 <HAL_UART_IRQHandler+0x22c>
 800534c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d106      	bne.n	8005366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80d1 	beq.w	8005508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xae>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0201 	orr.w	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_UART_IRQHandler+0xd2>
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0202 	orr.w	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00b      	beq.n	80053d2 <HAL_UART_IRQHandler+0xf6>
 80053ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0204 	orr.w	r2, r3, #4
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d011      	beq.n	8005402 <HAL_UART_IRQHandler+0x126>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0208 	orr.w	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 81ed 	beq.w	80057e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_UART_IRQHandler+0x14e>
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fd0a 	bl	8005e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <HAL_UART_IRQHandler+0x17a>
 800544e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005452:	2b00      	cmp	r3, #0
 8005454:	d04f      	beq.n	80054f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fc12 	bl	8005c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d141      	bne.n	80054ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800549a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1d9      	bne.n	800546a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d013      	beq.n	80054e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	4a7d      	ldr	r2, [pc, #500]	; (80056b8 <HAL_UART_IRQHandler+0x3dc>)
 80054c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fd fec0 	bl	8003250 <HAL_DMA_Abort_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054e0:	4610      	mov	r0, r2
 80054e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	e00e      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f99a 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e00a      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f996 	bl	8005820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	e006      	b.n	8005504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f992 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005502:	e170      	b.n	80057e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	bf00      	nop
    return;
 8005506:	e16e      	b.n	80057e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 814a 	bne.w	80057a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8143 	beq.w	80057a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 813c 	beq.w	80057a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800552e:	2300      	movs	r3, #0
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	f040 80b4 	bne.w	80056bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8140 	beq.w	80057ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800556e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005572:	429a      	cmp	r2, r3
 8005574:	f080 8139 	bcs.w	80057ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	f000 8088 	beq.w	800569e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1d9      	bne.n	800558e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3314      	adds	r3, #20
 80055fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e1      	bne.n	80055da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3314      	adds	r3, #20
 8005636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800563a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800563c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e3      	bne.n	8005616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566e:	f023 0310 	bic.w	r3, r3, #16
 8005672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005680:	65ba      	str	r2, [r7, #88]	; 0x58
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e3      	bne.n	800565c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	4618      	mov	r0, r3
 800569a:	f7fd fd69 	bl	8003170 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8c0 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056b4:	e099      	b.n	80057ea <HAL_UART_IRQHandler+0x50e>
 80056b6:	bf00      	nop
 80056b8:	08005d47 	.word	0x08005d47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 808b 	beq.w	80057ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8086 	beq.w	80057ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005706:	647a      	str	r2, [r7, #68]	; 0x44
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800570c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	623b      	str	r3, [r7, #32]
   return(result);
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800573e:	633a      	str	r2, [r7, #48]	; 0x30
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005784:	61fa      	str	r2, [r7, #28]
 8005786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	69b9      	ldr	r1, [r7, #24]
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	617b      	str	r3, [r7, #20]
   return(result);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f848 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057a4:	e023      	b.n	80057ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_UART_IRQHandler+0x4ea>
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fad5 	bl	8005d6e <UART_Transmit_IT>
    return;
 80057c4:	e014      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00e      	beq.n	80057f0 <HAL_UART_IRQHandler+0x514>
 80057d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fb15 	bl	8005e0e <UART_EndTransmit_IT>
    return;
 80057e4:	e004      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
    return;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ee:	bf00      	nop
  }
}
 80057f0:	37e8      	adds	r7, #232	; 0xe8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop

080057f8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	; 0x40
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d137      	bne.n	80058d8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	2200      	movs	r2, #0
 800586c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	623b      	str	r3, [r7, #32]
   return(result);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3314      	adds	r3, #20
 800588c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588e:	633a      	str	r2, [r7, #48]	; 0x30
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e5      	bne.n	800586e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c2:	61fa      	str	r2, [r7, #28]
 80058c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	69b9      	ldr	r1, [r7, #24]
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	617b      	str	r3, [r7, #20]
   return(result);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e5      	bne.n	80058a2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058d6:	e002      	b.n	80058de <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058da:	f7fc f867 	bl	80019ac <HAL_UART_TxCpltCallback>
}
 80058de:	bf00      	nop
 80058e0:	3740      	adds	r7, #64	; 0x40
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f7ff ff7f 	bl	80057f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b09c      	sub	sp, #112	; 0x70
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591a:	2b00      	cmp	r3, #0
 800591c:	d172      	bne.n	8005a04 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800591e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005920:	2200      	movs	r2, #0
 8005922:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005936:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800593a:	66bb      	str	r3, [r7, #104]	; 0x68
 800593c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	330c      	adds	r3, #12
 8005942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005944:	65ba      	str	r2, [r7, #88]	; 0x58
 8005946:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800594a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800594c:	e841 2300 	strex	r3, r2, [r1]
 8005950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1e5      	bne.n	8005924 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	667b      	str	r3, [r7, #100]	; 0x64
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005978:	647a      	str	r2, [r7, #68]	; 0x44
 800597a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800597e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e5      	bne.n	8005958 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3314      	adds	r3, #20
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	623b      	str	r3, [r7, #32]
   return(result);
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059a2:	663b      	str	r3, [r7, #96]	; 0x60
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3314      	adds	r3, #20
 80059aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059ac:	633a      	str	r2, [r7, #48]	; 0x30
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d119      	bne.n	8005a04 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60fb      	str	r3, [r7, #12]
   return(result);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	69b9      	ldr	r1, [r7, #24]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	617b      	str	r3, [r7, #20]
   return(result);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d106      	bne.n	8005a1a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a10:	4619      	mov	r1, r3
 8005a12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a14:	f7ff ff0e 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a18:	e002      	b.n	8005a20 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005a1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a1c:	f7fb ffd8 	bl	80019d0 <HAL_UART_RxCpltCallback>
}
 8005a20:	bf00      	nop
 8005a22:	3770      	adds	r7, #112	; 0x70
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d108      	bne.n	8005a50 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a42:	085b      	lsrs	r3, r3, #1
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4619      	mov	r1, r3
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fef3 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a4e:	e002      	b.n	8005a56 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7ff fedb 	bl	800580c <HAL_UART_RxHalfCpltCallback>
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b21      	cmp	r3, #33	; 0x21
 8005a90:	d108      	bne.n	8005aa4 <UART_DMAError+0x46>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a9e:	68b8      	ldr	r0, [r7, #8]
 8005aa0:	f000 f8c6 	bl	8005c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	bf0c      	ite	eq
 8005ab2:	2301      	moveq	r3, #1
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b22      	cmp	r3, #34	; 0x22
 8005ac4:	d108      	bne.n	8005ad8 <UART_DMAError+0x7a>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ad2:	68b8      	ldr	r0, [r7, #8]
 8005ad4:	f000 f8d4 	bl	8005c80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f043 0210 	orr.w	r2, r3, #16
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae4:	68b8      	ldr	r0, [r7, #8]
 8005ae6:	f7ff fe9b 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b098      	sub	sp, #96	; 0x60
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2222      	movs	r2, #34	; 0x22
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	4a40      	ldr	r2, [pc, #256]	; (8005c24 <UART_Start_Receive_DMA+0x130>)
 8005b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	4a3f      	ldr	r2, [pc, #252]	; (8005c28 <UART_Start_Receive_DMA+0x134>)
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	4a3e      	ldr	r2, [pc, #248]	; (8005c2c <UART_Start_Receive_DMA+0x138>)
 8005b32:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	2200      	movs	r2, #0
 8005b3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005b3c:	f107 0308 	add.w	r3, r7, #8
 8005b40:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	f7fd fab4 	bl	80030c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d019      	beq.n	8005bb2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b9e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ba0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bd2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3314      	adds	r3, #20
 8005bec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c06:	627a      	str	r2, [r7, #36]	; 0x24
 8005c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6a39      	ldr	r1, [r7, #32]
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e5      	bne.n	8005be6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3760      	adds	r7, #96	; 0x60
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	08005903 	.word	0x08005903
 8005c28:	08005a29 	.word	0x08005a29
 8005c2c:	08005a5f 	.word	0x08005a5f

08005c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	; 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	61ba      	str	r2, [r7, #24]
 8005c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6979      	ldr	r1, [r7, #20]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	613b      	str	r3, [r7, #16]
   return(result);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c74:	bf00      	nop
 8005c76:	3724      	adds	r7, #36	; 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b095      	sub	sp, #84	; 0x54
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f023 0301 	bic.w	r3, r3, #1
 8005cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	3314      	adds	r3, #20
 8005cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d119      	bne.n	8005d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f023 0310 	bic.w	r3, r3, #16
 8005d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d18:	61ba      	str	r2, [r7, #24]
 8005d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	613b      	str	r3, [r7, #16]
   return(result);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d3a:	bf00      	nop
 8005d3c:	3754      	adds	r7, #84	; 0x54
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f7ff fd5d 	bl	8005820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b21      	cmp	r3, #33	; 0x21
 8005d80:	d13e      	bne.n	8005e00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	d114      	bne.n	8005db6 <UART_Transmit_IT+0x48>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d110      	bne.n	8005db6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1c9a      	adds	r2, r3, #2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	621a      	str	r2, [r3, #32]
 8005db4:	e008      	b.n	8005dc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6211      	str	r1, [r2, #32]
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10f      	bne.n	8005dfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fb fdbc 	bl	80019ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b08c      	sub	sp, #48	; 0x30
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b22      	cmp	r3, #34	; 0x22
 8005e50:	f040 80ab 	bne.w	8005faa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5c:	d117      	bne.n	8005e8e <UART_Receive_IT+0x50>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d113      	bne.n	8005e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	1c9a      	adds	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e8c:	e026      	b.n	8005edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d007      	beq.n	8005eb2 <UART_Receive_IT+0x74>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <UART_Receive_IT+0x82>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e008      	b.n	8005ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d15a      	bne.n	8005fa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0220 	bic.w	r2, r2, #32
 8005efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d135      	bne.n	8005f9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	613b      	str	r3, [r7, #16]
   return(result);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f023 0310 	bic.w	r3, r3, #16
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	623a      	str	r2, [r7, #32]
 8005f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5a:	69f9      	ldr	r1, [r7, #28]
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1e5      	bne.n	8005f36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d10a      	bne.n	8005f8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff fc4d 	bl	8005834 <HAL_UARTEx_RxEventCallback>
 8005f9a:	e002      	b.n	8005fa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fb fd17 	bl	80019d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e002      	b.n	8005fac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	e000      	b.n	8005fac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005faa:	2302      	movs	r3, #2
  }
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3730      	adds	r7, #48	; 0x30
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fb8:	b0c0      	sub	sp, #256	; 0x100
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd0:	68d9      	ldr	r1, [r3, #12]
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	ea40 0301 	orr.w	r3, r0, r1
 8005fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800600c:	f021 010c 	bic.w	r1, r1, #12
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800601a:	430b      	orrs	r3, r1
 800601c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800602a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602e:	6999      	ldr	r1, [r3, #24]
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	ea40 0301 	orr.w	r3, r0, r1
 800603a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8f      	ldr	r3, [pc, #572]	; (8006280 <UART_SetConfig+0x2cc>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d005      	beq.n	8006054 <UART_SetConfig+0xa0>
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b8d      	ldr	r3, [pc, #564]	; (8006284 <UART_SetConfig+0x2d0>)
 8006050:	429a      	cmp	r2, r3
 8006052:	d104      	bne.n	800605e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006054:	f7fe f9c4 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8006058:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800605c:	e003      	b.n	8006066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800605e:	f7fe f9ab 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8006062:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006070:	f040 810c 	bne.w	800628c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800607e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	1891      	adds	r1, r2, r2
 800608c:	65b9      	str	r1, [r7, #88]	; 0x58
 800608e:	415b      	adcs	r3, r3
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006096:	4621      	mov	r1, r4
 8006098:	eb12 0801 	adds.w	r8, r2, r1
 800609c:	4629      	mov	r1, r5
 800609e:	eb43 0901 	adc.w	r9, r3, r1
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060b6:	4690      	mov	r8, r2
 80060b8:	4699      	mov	r9, r3
 80060ba:	4623      	mov	r3, r4
 80060bc:	eb18 0303 	adds.w	r3, r8, r3
 80060c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060c4:	462b      	mov	r3, r5
 80060c6:	eb49 0303 	adc.w	r3, r9, r3
 80060ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060e2:	460b      	mov	r3, r1
 80060e4:	18db      	adds	r3, r3, r3
 80060e6:	653b      	str	r3, [r7, #80]	; 0x50
 80060e8:	4613      	mov	r3, r2
 80060ea:	eb42 0303 	adc.w	r3, r2, r3
 80060ee:	657b      	str	r3, [r7, #84]	; 0x54
 80060f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060f8:	f7fa f874 	bl	80001e4 <__aeabi_uldivmod>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	4b61      	ldr	r3, [pc, #388]	; (8006288 <UART_SetConfig+0x2d4>)
 8006102:	fba3 2302 	umull	r2, r3, r3, r2
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	011c      	lsls	r4, r3, #4
 800610a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006114:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800611c:	4642      	mov	r2, r8
 800611e:	464b      	mov	r3, r9
 8006120:	1891      	adds	r1, r2, r2
 8006122:	64b9      	str	r1, [r7, #72]	; 0x48
 8006124:	415b      	adcs	r3, r3
 8006126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800612c:	4641      	mov	r1, r8
 800612e:	eb12 0a01 	adds.w	sl, r2, r1
 8006132:	4649      	mov	r1, r9
 8006134:	eb43 0b01 	adc.w	fp, r3, r1
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800614c:	4692      	mov	sl, r2
 800614e:	469b      	mov	fp, r3
 8006150:	4643      	mov	r3, r8
 8006152:	eb1a 0303 	adds.w	r3, sl, r3
 8006156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800615a:	464b      	mov	r3, r9
 800615c:	eb4b 0303 	adc.w	r3, fp, r3
 8006160:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006170:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006178:	460b      	mov	r3, r1
 800617a:	18db      	adds	r3, r3, r3
 800617c:	643b      	str	r3, [r7, #64]	; 0x40
 800617e:	4613      	mov	r3, r2
 8006180:	eb42 0303 	adc.w	r3, r2, r3
 8006184:	647b      	str	r3, [r7, #68]	; 0x44
 8006186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800618a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800618e:	f7fa f829 	bl	80001e4 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4611      	mov	r1, r2
 8006198:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <UART_SetConfig+0x2d4>)
 800619a:	fba3 2301 	umull	r2, r3, r3, r1
 800619e:	095b      	lsrs	r3, r3, #5
 80061a0:	2264      	movs	r2, #100	; 0x64
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	1acb      	subs	r3, r1, r3
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061ae:	4b36      	ldr	r3, [pc, #216]	; (8006288 <UART_SetConfig+0x2d4>)
 80061b0:	fba3 2302 	umull	r2, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061bc:	441c      	add	r4, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80061d8:	415b      	adcs	r3, r3
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061e0:	4641      	mov	r1, r8
 80061e2:	1851      	adds	r1, r2, r1
 80061e4:	6339      	str	r1, [r7, #48]	; 0x30
 80061e6:	4649      	mov	r1, r9
 80061e8:	414b      	adcs	r3, r1
 80061ea:	637b      	str	r3, [r7, #52]	; 0x34
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061f8:	4659      	mov	r1, fp
 80061fa:	00cb      	lsls	r3, r1, #3
 80061fc:	4651      	mov	r1, sl
 80061fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006202:	4651      	mov	r1, sl
 8006204:	00ca      	lsls	r2, r1, #3
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	4603      	mov	r3, r0
 800620c:	4642      	mov	r2, r8
 800620e:	189b      	adds	r3, r3, r2
 8006210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006214:	464b      	mov	r3, r9
 8006216:	460a      	mov	r2, r1
 8006218:	eb42 0303 	adc.w	r3, r2, r3
 800621c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800622c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006234:	460b      	mov	r3, r1
 8006236:	18db      	adds	r3, r3, r3
 8006238:	62bb      	str	r3, [r7, #40]	; 0x28
 800623a:	4613      	mov	r3, r2
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800624a:	f7f9 ffcb 	bl	80001e4 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <UART_SetConfig+0x2d4>)
 8006254:	fba3 1302 	umull	r1, r3, r3, r2
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	2164      	movs	r1, #100	; 0x64
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	3332      	adds	r3, #50	; 0x32
 8006266:	4a08      	ldr	r2, [pc, #32]	; (8006288 <UART_SetConfig+0x2d4>)
 8006268:	fba2 2303 	umull	r2, r3, r2, r3
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	f003 0207 	and.w	r2, r3, #7
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4422      	add	r2, r4
 800627a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800627c:	e105      	b.n	800648a <UART_SetConfig+0x4d6>
 800627e:	bf00      	nop
 8006280:	40011000 	.word	0x40011000
 8006284:	40011400 	.word	0x40011400
 8006288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800628c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006296:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800629a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800629e:	4642      	mov	r2, r8
 80062a0:	464b      	mov	r3, r9
 80062a2:	1891      	adds	r1, r2, r2
 80062a4:	6239      	str	r1, [r7, #32]
 80062a6:	415b      	adcs	r3, r3
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ae:	4641      	mov	r1, r8
 80062b0:	1854      	adds	r4, r2, r1
 80062b2:	4649      	mov	r1, r9
 80062b4:	eb43 0501 	adc.w	r5, r3, r1
 80062b8:	f04f 0200 	mov.w	r2, #0
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	00eb      	lsls	r3, r5, #3
 80062c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062c6:	00e2      	lsls	r2, r4, #3
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	4643      	mov	r3, r8
 80062ce:	18e3      	adds	r3, r4, r3
 80062d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062d4:	464b      	mov	r3, r9
 80062d6:	eb45 0303 	adc.w	r3, r5, r3
 80062da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062fa:	4629      	mov	r1, r5
 80062fc:	008b      	lsls	r3, r1, #2
 80062fe:	4621      	mov	r1, r4
 8006300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006304:	4621      	mov	r1, r4
 8006306:	008a      	lsls	r2, r1, #2
 8006308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800630c:	f7f9 ff6a 	bl	80001e4 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4b60      	ldr	r3, [pc, #384]	; (8006498 <UART_SetConfig+0x4e4>)
 8006316:	fba3 2302 	umull	r2, r3, r3, r2
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	011c      	lsls	r4, r3, #4
 800631e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006322:	2200      	movs	r2, #0
 8006324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006328:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800632c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	1891      	adds	r1, r2, r2
 8006336:	61b9      	str	r1, [r7, #24]
 8006338:	415b      	adcs	r3, r3
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006340:	4641      	mov	r1, r8
 8006342:	1851      	adds	r1, r2, r1
 8006344:	6139      	str	r1, [r7, #16]
 8006346:	4649      	mov	r1, r9
 8006348:	414b      	adcs	r3, r1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006358:	4659      	mov	r1, fp
 800635a:	00cb      	lsls	r3, r1, #3
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006362:	4651      	mov	r1, sl
 8006364:	00ca      	lsls	r2, r1, #3
 8006366:	4610      	mov	r0, r2
 8006368:	4619      	mov	r1, r3
 800636a:	4603      	mov	r3, r0
 800636c:	4642      	mov	r2, r8
 800636e:	189b      	adds	r3, r3, r2
 8006370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006374:	464b      	mov	r3, r9
 8006376:	460a      	mov	r2, r1
 8006378:	eb42 0303 	adc.w	r3, r2, r3
 800637c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	67bb      	str	r3, [r7, #120]	; 0x78
 800638a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006398:	4649      	mov	r1, r9
 800639a:	008b      	lsls	r3, r1, #2
 800639c:	4641      	mov	r1, r8
 800639e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a2:	4641      	mov	r1, r8
 80063a4:	008a      	lsls	r2, r1, #2
 80063a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063aa:	f7f9 ff1b 	bl	80001e4 <__aeabi_uldivmod>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4b39      	ldr	r3, [pc, #228]	; (8006498 <UART_SetConfig+0x4e4>)
 80063b4:	fba3 1302 	umull	r1, r3, r3, r2
 80063b8:	095b      	lsrs	r3, r3, #5
 80063ba:	2164      	movs	r1, #100	; 0x64
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	3332      	adds	r3, #50	; 0x32
 80063c6:	4a34      	ldr	r2, [pc, #208]	; (8006498 <UART_SetConfig+0x4e4>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	095b      	lsrs	r3, r3, #5
 80063ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d2:	441c      	add	r4, r3
 80063d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d8:	2200      	movs	r2, #0
 80063da:	673b      	str	r3, [r7, #112]	; 0x70
 80063dc:	677a      	str	r2, [r7, #116]	; 0x74
 80063de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063f2:	4641      	mov	r1, r8
 80063f4:	1851      	adds	r1, r2, r1
 80063f6:	6039      	str	r1, [r7, #0]
 80063f8:	4649      	mov	r1, r9
 80063fa:	414b      	adcs	r3, r1
 80063fc:	607b      	str	r3, [r7, #4]
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800640a:	4659      	mov	r1, fp
 800640c:	00cb      	lsls	r3, r1, #3
 800640e:	4651      	mov	r1, sl
 8006410:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006414:	4651      	mov	r1, sl
 8006416:	00ca      	lsls	r2, r1, #3
 8006418:	4610      	mov	r0, r2
 800641a:	4619      	mov	r1, r3
 800641c:	4603      	mov	r3, r0
 800641e:	4642      	mov	r2, r8
 8006420:	189b      	adds	r3, r3, r2
 8006422:	66bb      	str	r3, [r7, #104]	; 0x68
 8006424:	464b      	mov	r3, r9
 8006426:	460a      	mov	r2, r1
 8006428:	eb42 0303 	adc.w	r3, r2, r3
 800642c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	663b      	str	r3, [r7, #96]	; 0x60
 8006438:	667a      	str	r2, [r7, #100]	; 0x64
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006446:	4649      	mov	r1, r9
 8006448:	008b      	lsls	r3, r1, #2
 800644a:	4641      	mov	r1, r8
 800644c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006450:	4641      	mov	r1, r8
 8006452:	008a      	lsls	r2, r1, #2
 8006454:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006458:	f7f9 fec4 	bl	80001e4 <__aeabi_uldivmod>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <UART_SetConfig+0x4e4>)
 8006462:	fba3 1302 	umull	r1, r3, r3, r2
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	2164      	movs	r1, #100	; 0x64
 800646a:	fb01 f303 	mul.w	r3, r1, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	3332      	adds	r3, #50	; 0x32
 8006474:	4a08      	ldr	r2, [pc, #32]	; (8006498 <UART_SetConfig+0x4e4>)
 8006476:	fba2 2303 	umull	r2, r3, r2, r3
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4422      	add	r2, r4
 8006488:	609a      	str	r2, [r3, #8]
}
 800648a:	bf00      	nop
 800648c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006490:	46bd      	mov	sp, r7
 8006492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006496:	bf00      	nop
 8006498:	51eb851f 	.word	0x51eb851f

0800649c <__cxa_pure_virtual>:
 800649c:	b508      	push	{r3, lr}
 800649e:	f000 f80d 	bl	80064bc <_ZSt9terminatev>

080064a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80064a2:	b508      	push	{r3, lr}
 80064a4:	4780      	blx	r0
 80064a6:	f000 f80e 	bl	80064c6 <abort>
	...

080064ac <_ZSt13get_terminatev>:
 80064ac:	4b02      	ldr	r3, [pc, #8]	; (80064b8 <_ZSt13get_terminatev+0xc>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	f3bf 8f5b 	dmb	ish
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	2000000c 	.word	0x2000000c

080064bc <_ZSt9terminatev>:
 80064bc:	b508      	push	{r3, lr}
 80064be:	f7ff fff5 	bl	80064ac <_ZSt13get_terminatev>
 80064c2:	f7ff ffee 	bl	80064a2 <_ZN10__cxxabiv111__terminateEPFvvE>

080064c6 <abort>:
 80064c6:	b508      	push	{r3, lr}
 80064c8:	2006      	movs	r0, #6
 80064ca:	f000 f873 	bl	80065b4 <raise>
 80064ce:	2001      	movs	r0, #1
 80064d0:	f7fc fb24 	bl	8002b1c <_exit>

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000010 	.word	0x20000010

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	; (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	; (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	; (8006524 <__libc_init_array+0x44>)
 80064f4:	f000 f9b0 	bl	8006858 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08006b00 	.word	0x08006b00
 800651c:	08006b00 	.word	0x08006b00
 8006520:	08006b00 	.word	0x08006b00
 8006524:	08006b08 	.word	0x08006b08

08006528 <memcpy>:
 8006528:	440a      	add	r2, r1
 800652a:	4291      	cmp	r1, r2
 800652c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006530:	d100      	bne.n	8006534 <memcpy+0xc>
 8006532:	4770      	bx	lr
 8006534:	b510      	push	{r4, lr}
 8006536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800653a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653e:	4291      	cmp	r1, r2
 8006540:	d1f9      	bne.n	8006536 <memcpy+0xe>
 8006542:	bd10      	pop	{r4, pc}

08006544 <memset>:
 8006544:	4402      	add	r2, r0
 8006546:	4603      	mov	r3, r0
 8006548:	4293      	cmp	r3, r2
 800654a:	d100      	bne.n	800654e <memset+0xa>
 800654c:	4770      	bx	lr
 800654e:	f803 1b01 	strb.w	r1, [r3], #1
 8006552:	e7f9      	b.n	8006548 <memset+0x4>

08006554 <realloc>:
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <realloc+0xc>)
 8006556:	460a      	mov	r2, r1
 8006558:	4601      	mov	r1, r0
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	f000 b8da 	b.w	8006714 <_realloc_r>
 8006560:	20000010 	.word	0x20000010

08006564 <_raise_r>:
 8006564:	291f      	cmp	r1, #31
 8006566:	b538      	push	{r3, r4, r5, lr}
 8006568:	4604      	mov	r4, r0
 800656a:	460d      	mov	r5, r1
 800656c:	d904      	bls.n	8006578 <_raise_r+0x14>
 800656e:	2316      	movs	r3, #22
 8006570:	6003      	str	r3, [r0, #0]
 8006572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800657a:	b112      	cbz	r2, 8006582 <_raise_r+0x1e>
 800657c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006580:	b94b      	cbnz	r3, 8006596 <_raise_r+0x32>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f830 	bl	80065e8 <_getpid_r>
 8006588:	462a      	mov	r2, r5
 800658a:	4601      	mov	r1, r0
 800658c:	4620      	mov	r0, r4
 800658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006592:	f000 b817 	b.w	80065c4 <_kill_r>
 8006596:	2b01      	cmp	r3, #1
 8006598:	d00a      	beq.n	80065b0 <_raise_r+0x4c>
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	d103      	bne.n	80065a6 <_raise_r+0x42>
 800659e:	2316      	movs	r3, #22
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	2001      	movs	r0, #1
 80065a4:	e7e7      	b.n	8006576 <_raise_r+0x12>
 80065a6:	2400      	movs	r4, #0
 80065a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80065ac:	4628      	mov	r0, r5
 80065ae:	4798      	blx	r3
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7e0      	b.n	8006576 <_raise_r+0x12>

080065b4 <raise>:
 80065b4:	4b02      	ldr	r3, [pc, #8]	; (80065c0 <raise+0xc>)
 80065b6:	4601      	mov	r1, r0
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	f7ff bfd3 	b.w	8006564 <_raise_r>
 80065be:	bf00      	nop
 80065c0:	20000010 	.word	0x20000010

080065c4 <_kill_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	; (80065e4 <_kill_r+0x20>)
 80065c8:	2300      	movs	r3, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	f7fc fa93 	bl	8002afc <_kill>
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	d102      	bne.n	80065e0 <_kill_r+0x1c>
 80065da:	682b      	ldr	r3, [r5, #0]
 80065dc:	b103      	cbz	r3, 80065e0 <_kill_r+0x1c>
 80065de:	6023      	str	r3, [r4, #0]
 80065e0:	bd38      	pop	{r3, r4, r5, pc}
 80065e2:	bf00      	nop
 80065e4:	20000c00 	.word	0x20000c00

080065e8 <_getpid_r>:
 80065e8:	f7fc ba80 	b.w	8002aec <_getpid>

080065ec <sbrk_aligned>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4e0e      	ldr	r6, [pc, #56]	; (8006628 <sbrk_aligned+0x3c>)
 80065f0:	460c      	mov	r4, r1
 80065f2:	6831      	ldr	r1, [r6, #0]
 80065f4:	4605      	mov	r5, r0
 80065f6:	b911      	cbnz	r1, 80065fe <sbrk_aligned+0x12>
 80065f8:	f000 f8bc 	bl	8006774 <_sbrk_r>
 80065fc:	6030      	str	r0, [r6, #0]
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f8b7 	bl	8006774 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d00a      	beq.n	8006620 <sbrk_aligned+0x34>
 800660a:	1cc4      	adds	r4, r0, #3
 800660c:	f024 0403 	bic.w	r4, r4, #3
 8006610:	42a0      	cmp	r0, r4
 8006612:	d007      	beq.n	8006624 <sbrk_aligned+0x38>
 8006614:	1a21      	subs	r1, r4, r0
 8006616:	4628      	mov	r0, r5
 8006618:	f000 f8ac 	bl	8006774 <_sbrk_r>
 800661c:	3001      	adds	r0, #1
 800661e:	d101      	bne.n	8006624 <sbrk_aligned+0x38>
 8006620:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006624:	4620      	mov	r0, r4
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	20000bfc 	.word	0x20000bfc

0800662c <_malloc_r>:
 800662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006630:	1ccd      	adds	r5, r1, #3
 8006632:	f025 0503 	bic.w	r5, r5, #3
 8006636:	3508      	adds	r5, #8
 8006638:	2d0c      	cmp	r5, #12
 800663a:	bf38      	it	cc
 800663c:	250c      	movcc	r5, #12
 800663e:	2d00      	cmp	r5, #0
 8006640:	4607      	mov	r7, r0
 8006642:	db01      	blt.n	8006648 <_malloc_r+0x1c>
 8006644:	42a9      	cmp	r1, r5
 8006646:	d905      	bls.n	8006654 <_malloc_r+0x28>
 8006648:	230c      	movs	r3, #12
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	2600      	movs	r6, #0
 800664e:	4630      	mov	r0, r6
 8006650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006654:	4e2e      	ldr	r6, [pc, #184]	; (8006710 <_malloc_r+0xe4>)
 8006656:	f000 f89d 	bl	8006794 <__malloc_lock>
 800665a:	6833      	ldr	r3, [r6, #0]
 800665c:	461c      	mov	r4, r3
 800665e:	bb34      	cbnz	r4, 80066ae <_malloc_r+0x82>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	f7ff ffc2 	bl	80065ec <sbrk_aligned>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	4604      	mov	r4, r0
 800666c:	d14d      	bne.n	800670a <_malloc_r+0xde>
 800666e:	6834      	ldr	r4, [r6, #0]
 8006670:	4626      	mov	r6, r4
 8006672:	2e00      	cmp	r6, #0
 8006674:	d140      	bne.n	80066f8 <_malloc_r+0xcc>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	4631      	mov	r1, r6
 800667a:	4638      	mov	r0, r7
 800667c:	eb04 0803 	add.w	r8, r4, r3
 8006680:	f000 f878 	bl	8006774 <_sbrk_r>
 8006684:	4580      	cmp	r8, r0
 8006686:	d13a      	bne.n	80066fe <_malloc_r+0xd2>
 8006688:	6821      	ldr	r1, [r4, #0]
 800668a:	3503      	adds	r5, #3
 800668c:	1a6d      	subs	r5, r5, r1
 800668e:	f025 0503 	bic.w	r5, r5, #3
 8006692:	3508      	adds	r5, #8
 8006694:	2d0c      	cmp	r5, #12
 8006696:	bf38      	it	cc
 8006698:	250c      	movcc	r5, #12
 800669a:	4629      	mov	r1, r5
 800669c:	4638      	mov	r0, r7
 800669e:	f7ff ffa5 	bl	80065ec <sbrk_aligned>
 80066a2:	3001      	adds	r0, #1
 80066a4:	d02b      	beq.n	80066fe <_malloc_r+0xd2>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	442b      	add	r3, r5
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	e00e      	b.n	80066cc <_malloc_r+0xa0>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	1b52      	subs	r2, r2, r5
 80066b2:	d41e      	bmi.n	80066f2 <_malloc_r+0xc6>
 80066b4:	2a0b      	cmp	r2, #11
 80066b6:	d916      	bls.n	80066e6 <_malloc_r+0xba>
 80066b8:	1961      	adds	r1, r4, r5
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	6025      	str	r5, [r4, #0]
 80066be:	bf18      	it	ne
 80066c0:	6059      	strne	r1, [r3, #4]
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	bf08      	it	eq
 80066c6:	6031      	streq	r1, [r6, #0]
 80066c8:	5162      	str	r2, [r4, r5]
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	4638      	mov	r0, r7
 80066ce:	f104 060b 	add.w	r6, r4, #11
 80066d2:	f000 f865 	bl	80067a0 <__malloc_unlock>
 80066d6:	f026 0607 	bic.w	r6, r6, #7
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	1af2      	subs	r2, r6, r3
 80066de:	d0b6      	beq.n	800664e <_malloc_r+0x22>
 80066e0:	1b9b      	subs	r3, r3, r6
 80066e2:	50a3      	str	r3, [r4, r2]
 80066e4:	e7b3      	b.n	800664e <_malloc_r+0x22>
 80066e6:	6862      	ldr	r2, [r4, #4]
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	bf0c      	ite	eq
 80066ec:	6032      	streq	r2, [r6, #0]
 80066ee:	605a      	strne	r2, [r3, #4]
 80066f0:	e7ec      	b.n	80066cc <_malloc_r+0xa0>
 80066f2:	4623      	mov	r3, r4
 80066f4:	6864      	ldr	r4, [r4, #4]
 80066f6:	e7b2      	b.n	800665e <_malloc_r+0x32>
 80066f8:	4634      	mov	r4, r6
 80066fa:	6876      	ldr	r6, [r6, #4]
 80066fc:	e7b9      	b.n	8006672 <_malloc_r+0x46>
 80066fe:	230c      	movs	r3, #12
 8006700:	603b      	str	r3, [r7, #0]
 8006702:	4638      	mov	r0, r7
 8006704:	f000 f84c 	bl	80067a0 <__malloc_unlock>
 8006708:	e7a1      	b.n	800664e <_malloc_r+0x22>
 800670a:	6025      	str	r5, [r4, #0]
 800670c:	e7de      	b.n	80066cc <_malloc_r+0xa0>
 800670e:	bf00      	nop
 8006710:	20000bf8 	.word	0x20000bf8

08006714 <_realloc_r>:
 8006714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	4680      	mov	r8, r0
 800671a:	4614      	mov	r4, r2
 800671c:	460e      	mov	r6, r1
 800671e:	b921      	cbnz	r1, 800672a <_realloc_r+0x16>
 8006720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006724:	4611      	mov	r1, r2
 8006726:	f7ff bf81 	b.w	800662c <_malloc_r>
 800672a:	b92a      	cbnz	r2, 8006738 <_realloc_r+0x24>
 800672c:	f000 f83e 	bl	80067ac <_free_r>
 8006730:	4625      	mov	r5, r4
 8006732:	4628      	mov	r0, r5
 8006734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006738:	f000 f884 	bl	8006844 <_malloc_usable_size_r>
 800673c:	4284      	cmp	r4, r0
 800673e:	4607      	mov	r7, r0
 8006740:	d802      	bhi.n	8006748 <_realloc_r+0x34>
 8006742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006746:	d812      	bhi.n	800676e <_realloc_r+0x5a>
 8006748:	4621      	mov	r1, r4
 800674a:	4640      	mov	r0, r8
 800674c:	f7ff ff6e 	bl	800662c <_malloc_r>
 8006750:	4605      	mov	r5, r0
 8006752:	2800      	cmp	r0, #0
 8006754:	d0ed      	beq.n	8006732 <_realloc_r+0x1e>
 8006756:	42bc      	cmp	r4, r7
 8006758:	4622      	mov	r2, r4
 800675a:	4631      	mov	r1, r6
 800675c:	bf28      	it	cs
 800675e:	463a      	movcs	r2, r7
 8006760:	f7ff fee2 	bl	8006528 <memcpy>
 8006764:	4631      	mov	r1, r6
 8006766:	4640      	mov	r0, r8
 8006768:	f000 f820 	bl	80067ac <_free_r>
 800676c:	e7e1      	b.n	8006732 <_realloc_r+0x1e>
 800676e:	4635      	mov	r5, r6
 8006770:	e7df      	b.n	8006732 <_realloc_r+0x1e>
	...

08006774 <_sbrk_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_sbrk_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fc f9d6 	bl	8002b30 <_sbrk>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_sbrk_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_sbrk_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000c00 	.word	0x20000c00

08006794 <__malloc_lock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_lock+0x8>)
 8006796:	f000 b85d 	b.w	8006854 <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	20000c04 	.word	0x20000c04

080067a0 <__malloc_unlock>:
 80067a0:	4801      	ldr	r0, [pc, #4]	; (80067a8 <__malloc_unlock+0x8>)
 80067a2:	f000 b858 	b.w	8006856 <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	20000c04 	.word	0x20000c04

080067ac <_free_r>:
 80067ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ae:	2900      	cmp	r1, #0
 80067b0:	d044      	beq.n	800683c <_free_r+0x90>
 80067b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b6:	9001      	str	r0, [sp, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f1a1 0404 	sub.w	r4, r1, #4
 80067be:	bfb8      	it	lt
 80067c0:	18e4      	addlt	r4, r4, r3
 80067c2:	f7ff ffe7 	bl	8006794 <__malloc_lock>
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <_free_r+0x94>)
 80067c8:	9801      	ldr	r0, [sp, #4]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	b933      	cbnz	r3, 80067dc <_free_r+0x30>
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067d8:	f7ff bfe2 	b.w	80067a0 <__malloc_unlock>
 80067dc:	42a3      	cmp	r3, r4
 80067de:	d908      	bls.n	80067f2 <_free_r+0x46>
 80067e0:	6825      	ldr	r5, [r4, #0]
 80067e2:	1961      	adds	r1, r4, r5
 80067e4:	428b      	cmp	r3, r1
 80067e6:	bf01      	itttt	eq
 80067e8:	6819      	ldreq	r1, [r3, #0]
 80067ea:	685b      	ldreq	r3, [r3, #4]
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	e7ed      	b.n	80067ce <_free_r+0x22>
 80067f2:	461a      	mov	r2, r3
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b10b      	cbz	r3, 80067fc <_free_r+0x50>
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	d9fa      	bls.n	80067f2 <_free_r+0x46>
 80067fc:	6811      	ldr	r1, [r2, #0]
 80067fe:	1855      	adds	r5, r2, r1
 8006800:	42a5      	cmp	r5, r4
 8006802:	d10b      	bne.n	800681c <_free_r+0x70>
 8006804:	6824      	ldr	r4, [r4, #0]
 8006806:	4421      	add	r1, r4
 8006808:	1854      	adds	r4, r2, r1
 800680a:	42a3      	cmp	r3, r4
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	d1e0      	bne.n	80067d2 <_free_r+0x26>
 8006810:	681c      	ldr	r4, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	6053      	str	r3, [r2, #4]
 8006816:	4421      	add	r1, r4
 8006818:	6011      	str	r1, [r2, #0]
 800681a:	e7da      	b.n	80067d2 <_free_r+0x26>
 800681c:	d902      	bls.n	8006824 <_free_r+0x78>
 800681e:	230c      	movs	r3, #12
 8006820:	6003      	str	r3, [r0, #0]
 8006822:	e7d6      	b.n	80067d2 <_free_r+0x26>
 8006824:	6825      	ldr	r5, [r4, #0]
 8006826:	1961      	adds	r1, r4, r5
 8006828:	428b      	cmp	r3, r1
 800682a:	bf04      	itt	eq
 800682c:	6819      	ldreq	r1, [r3, #0]
 800682e:	685b      	ldreq	r3, [r3, #4]
 8006830:	6063      	str	r3, [r4, #4]
 8006832:	bf04      	itt	eq
 8006834:	1949      	addeq	r1, r1, r5
 8006836:	6021      	streq	r1, [r4, #0]
 8006838:	6054      	str	r4, [r2, #4]
 800683a:	e7ca      	b.n	80067d2 <_free_r+0x26>
 800683c:	b003      	add	sp, #12
 800683e:	bd30      	pop	{r4, r5, pc}
 8006840:	20000bf8 	.word	0x20000bf8

08006844 <_malloc_usable_size_r>:
 8006844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006848:	1f18      	subs	r0, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfbc      	itt	lt
 800684e:	580b      	ldrlt	r3, [r1, r0]
 8006850:	18c0      	addlt	r0, r0, r3
 8006852:	4770      	bx	lr

08006854 <__retarget_lock_acquire_recursive>:
 8006854:	4770      	bx	lr

08006856 <__retarget_lock_release_recursive>:
 8006856:	4770      	bx	lr

08006858 <_init>:
 8006858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685a:	bf00      	nop
 800685c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800685e:	bc08      	pop	{r3}
 8006860:	469e      	mov	lr, r3
 8006862:	4770      	bx	lr

08006864 <_fini>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	bf00      	nop
 8006868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800686a:	bc08      	pop	{r3}
 800686c:	469e      	mov	lr, r3
 800686e:	4770      	bx	lr
